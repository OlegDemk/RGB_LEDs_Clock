
RGB_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a630  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad50  0800ad50  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad50  0800ad50  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad50  0800ad50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad50  0800ad50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ad58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a18  20000078  0800add0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a90  0800add0  00023a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c986  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003daa  00000000  00000000  0003ca27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  000407d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00041f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6d1  00000000  00000000  000435b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5f6  00000000  00000000  0005dc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c17f  00000000  00000000  00079277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001153f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006884  00000000  00000000  00115448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a728 	.word	0x0800a728

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800a728 	.word	0x0800a728

08000150 <Set_LED>:
static void fillInAllScreen(bool red, bool green, bool blue, uint8_t min_brightness, uint8_t max_brightness, int delay);
// void setStringOnScreen(uint8_t startRow, char *simbolstr, uint8_t string_size, uint8_t red, uint8_t green, uint8_t blue);

// -------------------------------------------------------------------------------------------
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
 800015c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	b2d9      	uxtb	r1, r3
 8000162:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <Set_LED+0x54>)
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	b2d9      	uxtb	r1, r3
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <Set_LED+0x54>)
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	460a      	mov	r2, r1
 8000178:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800017a:	68bb      	ldr	r3, [r7, #8]
 800017c:	b2d9      	uxtb	r1, r3
 800017e:	4a09      	ldr	r2, [pc, #36]	; (80001a4 <Set_LED+0x54>)
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	4413      	add	r3, r2
 8000186:	460a      	mov	r2, r1
 8000188:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	b2d9      	uxtb	r1, r3
 800018e:	4a05      	ldr	r2, [pc, #20]	; (80001a4 <Set_LED+0x54>)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	009b      	lsls	r3, r3, #2
 8000194:	4413      	add	r3, r2
 8000196:	460a      	mov	r2, r1
 8000198:	70da      	strb	r2, [r3, #3]
}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000094 	.word	0x20000094

080001a8 <WS2812_Send>:
// -------------------------------------------------------------------------------------------
void WS2812_Send(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, USER_OUT_Pin, GPIO_PIN_SET);

	uint32_t indx=0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
	uint32_t color;
	int i = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	613b      	str	r3, [r7, #16]


	for (i=0; i<DELAY; i++)								// Make dalay
 80001b6:	2300      	movs	r3, #0
 80001b8:	613b      	str	r3, [r7, #16]
 80001ba:	e00a      	b.n	80001d2 <WS2812_Send+0x2a>
	{
		pwmData[indx] = 0;
 80001bc:	4a2e      	ldr	r2, [pc, #184]	; (8000278 <WS2812_Send+0xd0>)
 80001be:	697b      	ldr	r3, [r7, #20]
 80001c0:	2100      	movs	r1, #0
 80001c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
	for (i=0; i<DELAY; i++)								// Make dalay
 80001cc:	693b      	ldr	r3, [r7, #16]
 80001ce:	3301      	adds	r3, #1
 80001d0:	613b      	str	r3, [r7, #16]
 80001d2:	693b      	ldr	r3, [r7, #16]
 80001d4:	2b36      	cmp	r3, #54	; 0x36
 80001d6:	ddf1      	ble.n	80001bc <WS2812_Send+0x14>
	}

	for(int i= 0; i<MAX_LED; i++)													// go over all LEDs
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	e036      	b.n	800024c <WS2812_Send+0xa4>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));	// Save color data into one value
 80001de:	4a27      	ldr	r2, [pc, #156]	; (800027c <WS2812_Send+0xd4>)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	4413      	add	r3, r2
 80001e6:	785b      	ldrb	r3, [r3, #1]
 80001e8:	041a      	lsls	r2, r3, #16
 80001ea:	4924      	ldr	r1, [pc, #144]	; (800027c <WS2812_Send+0xd4>)
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	440b      	add	r3, r1
 80001f2:	789b      	ldrb	r3, [r3, #2]
 80001f4:	021b      	lsls	r3, r3, #8
 80001f6:	431a      	orrs	r2, r3
 80001f8:	4920      	ldr	r1, [pc, #128]	; (800027c <WS2812_Send+0xd4>)
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	440b      	add	r3, r1
 8000200:	78db      	ldrb	r3, [r3, #3]
 8000202:	4313      	orrs	r3, r2
 8000204:	607b      	str	r3, [r7, #4]

		for(int k=23; k>=0; k--)							// analysis every bites
 8000206:	2317      	movs	r3, #23
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e019      	b.n	8000240 <WS2812_Send+0x98>
		{
			if (color&(1<<k))								//	if was 1 make 1 signal
 800020c:	2201      	movs	r2, #1
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	fa02 f303 	lsl.w	r3, r2, r3
 8000214:	461a      	mov	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4013      	ands	r3, r2
 800021a:	2b00      	cmp	r3, #0
 800021c:	d005      	beq.n	800022a <WS2812_Send+0x82>
			{
				pwmData[indx] = 60;  						// 2/3 of 90
 800021e:	4a16      	ldr	r2, [pc, #88]	; (8000278 <WS2812_Send+0xd0>)
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	213c      	movs	r1, #60	; 0x3c
 8000224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000228:	e004      	b.n	8000234 <WS2812_Send+0x8c>
			}
			else											//	if was 0 make 0 signal
			{
				pwmData[indx] = 30; 						 // 1/3 of 90
 800022a:	4a13      	ldr	r2, [pc, #76]	; (8000278 <WS2812_Send+0xd0>)
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	211e      	movs	r1, #30
 8000230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	3301      	adds	r3, #1
 8000238:	617b      	str	r3, [r7, #20]
		for(int k=23; k>=0; k--)							// analysis every bites
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	3b01      	subs	r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2b00      	cmp	r3, #0
 8000244:	dae2      	bge.n	800020c <WS2812_Send+0x64>
	for(int i= 0; i<MAX_LED; i++)													// go over all LEDs
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	3301      	adds	r3, #1
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2b54      	cmp	r3, #84	; 0x54
 8000250:	ddc5      	ble.n	80001de <WS2812_Send+0x36>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)pwmData, indx);
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	b29b      	uxth	r3, r3
 8000256:	4a08      	ldr	r2, [pc, #32]	; (8000278 <WS2812_Send+0xd0>)
 8000258:	210c      	movs	r1, #12
 800025a:	4809      	ldr	r0, [pc, #36]	; (8000280 <WS2812_Send+0xd8>)
 800025c:	f005 f900 	bl	8005460 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000260:	bf00      	nop
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <WS2812_Send+0xdc>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0fb      	beq.n	8000262 <WS2812_Send+0xba>
	datasentflag = 0;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <WS2812_Send+0xdc>)
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]

}
 8000270:	bf00      	nop
 8000272:	3718      	adds	r7, #24
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	200001e8 	.word	0x200001e8
 800027c:	20000094 	.word	0x20000094
 8000280:	200012ec 	.word	0x200012ec
 8000284:	20001248 	.word	0x20001248

08000288 <HAL_TIM_PWM_PulseFinishedCallback>:
// -------------------------------------------------------------------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_4);
 8000290:	210c      	movs	r1, #12
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000294:	f005 fa7e 	bl	8005794 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800029a:	2201      	movs	r2, #1
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200012ec 	.word	0x200012ec
 80002ac:	20001248 	.word	0x20001248

080002b0 <cleanAllScreenBuffer>:
// --------------------------------------------------------------------------------------------
void cleanAllScreenBuffer(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	for(int i = 0; i <= MAX_LED; i++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e008      	b.n	80002ce <cleanAllScreenBuffer+0x1e>
	{
		Set_LED (i, 0, 0, 0);
 80002bc:	2300      	movs	r3, #0
 80002be:	2200      	movs	r2, #0
 80002c0:	2100      	movs	r1, #0
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f7ff ff44 	bl	8000150 <Set_LED>
	for(int i = 0; i <= MAX_LED; i++)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b55      	cmp	r3, #85	; 0x55
 80002d2:	ddf3      	ble.n	80002bc <cleanAllScreenBuffer+0xc>
	}
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <printTime>:
	WS2812_Send();
}

//// ----------------------------------------------------------------------------------------------
void printTime(uint8_t minutes, uint8_t hours,  uint8_t green, uint8_t red,uint8_t blue)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b08b      	sub	sp, #44	; 0x2c
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	4604      	mov	r4, r0
 80002e8:	4608      	mov	r0, r1
 80002ea:	4611      	mov	r1, r2
 80002ec:	461a      	mov	r2, r3
 80002ee:	4623      	mov	r3, r4
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4603      	mov	r3, r0
 80002f4:	71bb      	strb	r3, [r7, #6]
 80002f6:	460b      	mov	r3, r1
 80002f8:	717b      	strb	r3, [r7, #5]
 80002fa:	4613      	mov	r3, r2
 80002fc:	713b      	strb	r3, [r7, #4]

	char main_buffer_str[6] = {0};
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
 8000302:	2300      	movs	r3, #0
 8000304:	83bb      	strh	r3, [r7, #28]
	char minutes_str[3] = {0};
 8000306:	4b37      	ldr	r3, [pc, #220]	; (80003e4 <printTime+0x104>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	82bb      	strh	r3, [r7, #20]
 800030c:	2300      	movs	r3, #0
 800030e:	75bb      	strb	r3, [r7, #22]
	char hours_str[3] = {0};
 8000310:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <printTime+0x104>)
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	823b      	strh	r3, [r7, #16]
 8000316:	2300      	movs	r3, #0
 8000318:	74bb      	strb	r3, [r7, #18]
	char dobledot[2] = ":";
 800031a:	233a      	movs	r3, #58	; 0x3a
 800031c:	81bb      	strh	r3, [r7, #12]

	char sero_str[2] = "0";
 800031e:	2330      	movs	r3, #48	; 0x30
 8000320:	813b      	strh	r3, [r7, #8]

	sprintf(minutes_str, "%d", minutes);
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	492f      	ldr	r1, [pc, #188]	; (80003e8 <printTime+0x108>)
 800032a:	4618      	mov	r0, r3
 800032c:	f009 fe26 	bl	8009f7c <siprintf>
	sprintf(hours_str, "%d", hours);
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	492c      	ldr	r1, [pc, #176]	; (80003e8 <printTime+0x108>)
 8000338:	4618      	mov	r0, r3
 800033a:	f009 fe1f 	bl	8009f7c <siprintf>

	// додати 0 якщо менше 9
	if(hours <= 9)
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b09      	cmp	r3, #9
 8000342:	d810      	bhi.n	8000366 <printTime+0x86>
	{
		strcat(main_buffer_str, sero_str);
 8000344:	f107 0208 	add.w	r2, r7, #8
 8000348:	f107 0318 	add.w	r3, r7, #24
 800034c:	4611      	mov	r1, r2
 800034e:	4618      	mov	r0, r3
 8000350:	f009 fe34 	bl	8009fbc <strcat>
		strcat(main_buffer_str, hours_str);
 8000354:	f107 0210 	add.w	r2, r7, #16
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4611      	mov	r1, r2
 800035e:	4618      	mov	r0, r3
 8000360:	f009 fe2c 	bl	8009fbc <strcat>
 8000364:	e007      	b.n	8000376 <printTime+0x96>
	}
	else
	{
		strcat(main_buffer_str, hours_str);
 8000366:	f107 0210 	add.w	r2, r7, #16
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f009 fe23 	bl	8009fbc <strcat>
	}

	strcat(main_buffer_str, dobledot);
 8000376:	f107 020c 	add.w	r2, r7, #12
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	4611      	mov	r1, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f009 fe1b 	bl	8009fbc <strcat>

	if(minutes <= 9)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b09      	cmp	r3, #9
 800038a:	d810      	bhi.n	80003ae <printTime+0xce>
	{
		strcat(main_buffer_str, sero_str);
 800038c:	f107 0208 	add.w	r2, r7, #8
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	4611      	mov	r1, r2
 8000396:	4618      	mov	r0, r3
 8000398:	f009 fe10 	bl	8009fbc <strcat>
		strcat(main_buffer_str, minutes_str);
 800039c:	f107 0214 	add.w	r2, r7, #20
 80003a0:	f107 0318 	add.w	r3, r7, #24
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f009 fe08 	bl	8009fbc <strcat>
 80003ac:	e007      	b.n	80003be <printTime+0xde>
	}
	else
	{
		strcat(main_buffer_str, minutes_str);
 80003ae:	f107 0214 	add.w	r2, r7, #20
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	4611      	mov	r1, r2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f009 fdff 	bl	8009fbc <strcat>
	}

	cleanAllScreenBuffer();
 80003be:	f7ff ff77 	bl	80002b0 <cleanAllScreenBuffer>

	setTimeString( main_buffer_str, 5, red, green, blue);
 80003c2:	7979      	ldrb	r1, [r7, #5]
 80003c4:	793a      	ldrb	r2, [r7, #4]
 80003c6:	f107 0018 	add.w	r0, r7, #24
 80003ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	460b      	mov	r3, r1
 80003d2:	2105      	movs	r1, #5
 80003d4:	f000 f80a 	bl	80003ec <setTimeString>

	WS2812_Send();
 80003d8:	f7ff fee6 	bl	80001a8 <WS2812_Send>
}
 80003dc:	bf00      	nop
 80003de:	3724      	adds	r7, #36	; 0x24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	0800a74c 	.word	0x0800a74c
 80003e8:	0800a748 	.word	0x0800a748

080003ec <setTimeString>:
//// ----------------------------------------------------------------------------------------------
void setTimeString( char *simbolstr, uint8_t string_size, uint8_t red, uint8_t green, uint8_t blue)
{
 80003ec:	b490      	push	{r4, r7}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	4608      	mov	r0, r1
 80003f6:	4611      	mov	r1, r2
 80003f8:	461a      	mov	r2, r3
 80003fa:	4603      	mov	r3, r0
 80003fc:	70fb      	strb	r3, [r7, #3]
 80003fe:	460b      	mov	r3, r1
 8000400:	70bb      	strb	r3, [r7, #2]
 8000402:	4613      	mov	r3, r2
 8000404:	707b      	strb	r3, [r7, #1]
	uint8_t startRow = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	77fb      	strb	r3, [r7, #31]
	uint8_t k = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	77bb      	strb	r3, [r7, #30]
	uint8_t simbol = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	777b      	strb	r3, [r7, #29]

	for(uint8_t q = 0; q <= string_size; q++)
 8000412:	2300      	movs	r3, #0
 8000414:	773b      	strb	r3, [r7, #28]
 8000416:	e153      	b.n	80006c0 <setTimeString+0x2d4>
	{
		if(((simbolstr[q] - 48) >= 0) && (simbolstr[q] - 48 <= 9))		// If it is digits
 8000418:	7f3b      	ldrb	r3, [r7, #28]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b2f      	cmp	r3, #47	; 0x2f
 8000422:	d90c      	bls.n	800043e <setTimeString+0x52>
 8000424:	7f3b      	ldrb	r3, [r7, #28]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b39      	cmp	r3, #57	; 0x39
 800042e:	d806      	bhi.n	800043e <setTimeString+0x52>
		{
			simbol = simbolstr[q] - 48;
 8000430:	7f3b      	ldrb	r3, [r7, #28]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3b30      	subs	r3, #48	; 0x30
 800043a:	777b      	strb	r3, [r7, #29]
 800043c:	e014      	b.n	8000468 <setTimeString+0x7c>
		}
		else															// If it is not digits
		{
			if(simbolstr[q] == ':')						// For make blink ':'
 800043e:	7f3b      	ldrb	r3, [r7, #28]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	4413      	add	r3, r2
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b3a      	cmp	r3, #58	; 0x3a
 8000448:	d10e      	bne.n	8000468 <setTimeString+0x7c>
			{
				static bool trigSeccond = true;
				if(trigSeccond == true)
 800044a:	4ba3      	ldr	r3, [pc, #652]	; (80006d8 <setTimeString+0x2ec>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d005      	beq.n	800045e <setTimeString+0x72>
				{
					trigSeccond = false;
 8000452:	4ba1      	ldr	r3, [pc, #644]	; (80006d8 <setTimeString+0x2ec>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
					simbol = 10;						// ':' symbol
 8000458:	230a      	movs	r3, #10
 800045a:	777b      	strb	r3, [r7, #29]
 800045c:	e004      	b.n	8000468 <setTimeString+0x7c>
				}
				else
				{
					trigSeccond = true;
 800045e:	4b9e      	ldr	r3, [pc, #632]	; (80006d8 <setTimeString+0x2ec>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
					simbol = 11;						//' ' symbol (empty space)
 8000464:	230b      	movs	r3, #11
 8000466:	777b      	strb	r3, [r7, #29]
				}
			}
		}

		// Choosing position for each symbols on screen
		switch (q) {
 8000468:	7f3b      	ldrb	r3, [r7, #28]
 800046a:	2b04      	cmp	r3, #4
 800046c:	d81b      	bhi.n	80004a6 <setTimeString+0xba>
 800046e:	a201      	add	r2, pc, #4	; (adr r2, 8000474 <setTimeString+0x88>)
 8000470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000474:	08000489 	.word	0x08000489
 8000478:	0800048f 	.word	0x0800048f
 800047c:	08000495 	.word	0x08000495
 8000480:	0800049b 	.word	0x0800049b
 8000484:	080004a1 	.word	0x080004a1
			case 0:
				startRow = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	77fb      	strb	r3, [r7, #31]
				break;
 800048c:	e00b      	b.n	80004a6 <setTimeString+0xba>
			case 1:
				startRow = 4;
 800048e:	2304      	movs	r3, #4
 8000490:	77fb      	strb	r3, [r7, #31]
				break;
 8000492:	e008      	b.n	80004a6 <setTimeString+0xba>
			case 2:
				startRow = 7;
 8000494:	2307      	movs	r3, #7
 8000496:	77fb      	strb	r3, [r7, #31]
				break;
 8000498:	e005      	b.n	80004a6 <setTimeString+0xba>
			case 3:
				startRow = 10;
 800049a:	230a      	movs	r3, #10
 800049c:	77fb      	strb	r3, [r7, #31]
				break;
 800049e:	e002      	b.n	80004a6 <setTimeString+0xba>
			case 4:
				startRow = 14;
 80004a0:	230e      	movs	r3, #14
 80004a2:	77fb      	strb	r3, [r7, #31]
				break;
 80004a4:	bf00      	nop
		}

		startRow = startRow * ROWS;					// make one step(column) on screenЗ (one column = 5 LEDs)
 80004a6:	7ffb      	ldrb	r3, [r7, #31]
 80004a8:	461a      	mov	r2, r3
 80004aa:	0092      	lsls	r2, r2, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	77fb      	strb	r3, [r7, #31]

		if((startRow == 5) || (startRow == 15) || (startRow == 25) || (startRow == 35) || (startRow == 45) || (startRow == 55) || (startRow == 65))  // Pair column ( LEDs startfrom top)
 80004b0:	7ffb      	ldrb	r3, [r7, #31]
 80004b2:	2b05      	cmp	r3, #5
 80004b4:	d012      	beq.n	80004dc <setTimeString+0xf0>
 80004b6:	7ffb      	ldrb	r3, [r7, #31]
 80004b8:	2b0f      	cmp	r3, #15
 80004ba:	d00f      	beq.n	80004dc <setTimeString+0xf0>
 80004bc:	7ffb      	ldrb	r3, [r7, #31]
 80004be:	2b19      	cmp	r3, #25
 80004c0:	d00c      	beq.n	80004dc <setTimeString+0xf0>
 80004c2:	7ffb      	ldrb	r3, [r7, #31]
 80004c4:	2b23      	cmp	r3, #35	; 0x23
 80004c6:	d009      	beq.n	80004dc <setTimeString+0xf0>
 80004c8:	7ffb      	ldrb	r3, [r7, #31]
 80004ca:	2b2d      	cmp	r3, #45	; 0x2d
 80004cc:	d006      	beq.n	80004dc <setTimeString+0xf0>
 80004ce:	7ffb      	ldrb	r3, [r7, #31]
 80004d0:	2b37      	cmp	r3, #55	; 0x37
 80004d2:	d003      	beq.n	80004dc <setTimeString+0xf0>
 80004d4:	7ffb      	ldrb	r3, [r7, #31]
 80004d6:	2b41      	cmp	r3, #65	; 0x41
 80004d8:	f040 80c3 	bne.w	8000662 <setTimeString+0x276>
		{
			// Convert pattern
			uint8_t k = 0, l = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	76fb      	strb	r3, [r7, #27]
 80004e0:	2300      	movs	r3, #0
 80004e2:	76bb      	strb	r3, [r7, #26]
			bool t_buffer[15] = {0, };
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	f8c3 200b 	str.w	r2, [r3, #11]

			for(uint8_t i = 1; i <= 3; i++)
 80004f4:	2301      	movs	r3, #1
 80004f6:	767b      	strb	r3, [r7, #25]
 80004f8:	e086      	b.n	8000608 <setTimeString+0x21c>
			{
					t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 80004fa:	7f7a      	ldrb	r2, [r7, #29]
 80004fc:	7efb      	ldrb	r3, [r7, #27]
 80004fe:	1c59      	adds	r1, r3, #1
 8000500:	76f9      	strb	r1, [r7, #27]
 8000502:	461c      	mov	r4, r3
 8000504:	7e79      	ldrb	r1, [r7, #25]
 8000506:	460b      	mov	r3, r1
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	1e59      	subs	r1, r3, #1
 800050e:	7ebb      	ldrb	r3, [r7, #26]
 8000510:	1c58      	adds	r0, r3, #1
 8000512:	76b8      	strb	r0, [r7, #26]
 8000514:	1ac9      	subs	r1, r1, r3
 8000516:	4871      	ldr	r0, [pc, #452]	; (80006dc <setTimeString+0x2f0>)
 8000518:	4613      	mov	r3, r2
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	1a9b      	subs	r3, r3, r2
 800051e:	4403      	add	r3, r0
 8000520:	4423      	add	r3, r4
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	f101 0320 	add.w	r3, r1, #32
 8000528:	443b      	add	r3, r7
 800052a:	f803 2c18 	strb.w	r2, [r3, #-24]
					t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 800052e:	7f7a      	ldrb	r2, [r7, #29]
 8000530:	7efb      	ldrb	r3, [r7, #27]
 8000532:	1c59      	adds	r1, r3, #1
 8000534:	76f9      	strb	r1, [r7, #27]
 8000536:	461c      	mov	r4, r3
 8000538:	7e79      	ldrb	r1, [r7, #25]
 800053a:	460b      	mov	r3, r1
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	440b      	add	r3, r1
 8000540:	1e59      	subs	r1, r3, #1
 8000542:	7ebb      	ldrb	r3, [r7, #26]
 8000544:	1c58      	adds	r0, r3, #1
 8000546:	76b8      	strb	r0, [r7, #26]
 8000548:	1ac9      	subs	r1, r1, r3
 800054a:	4864      	ldr	r0, [pc, #400]	; (80006dc <setTimeString+0x2f0>)
 800054c:	4613      	mov	r3, r2
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	4403      	add	r3, r0
 8000554:	4423      	add	r3, r4
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	f101 0320 	add.w	r3, r1, #32
 800055c:	443b      	add	r3, r7
 800055e:	f803 2c18 	strb.w	r2, [r3, #-24]
					t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 8000562:	7f7a      	ldrb	r2, [r7, #29]
 8000564:	7efb      	ldrb	r3, [r7, #27]
 8000566:	1c59      	adds	r1, r3, #1
 8000568:	76f9      	strb	r1, [r7, #27]
 800056a:	461c      	mov	r4, r3
 800056c:	7e79      	ldrb	r1, [r7, #25]
 800056e:	460b      	mov	r3, r1
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	440b      	add	r3, r1
 8000574:	1e59      	subs	r1, r3, #1
 8000576:	7ebb      	ldrb	r3, [r7, #26]
 8000578:	1c58      	adds	r0, r3, #1
 800057a:	76b8      	strb	r0, [r7, #26]
 800057c:	1ac9      	subs	r1, r1, r3
 800057e:	4857      	ldr	r0, [pc, #348]	; (80006dc <setTimeString+0x2f0>)
 8000580:	4613      	mov	r3, r2
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4403      	add	r3, r0
 8000588:	4423      	add	r3, r4
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	f101 0320 	add.w	r3, r1, #32
 8000590:	443b      	add	r3, r7
 8000592:	f803 2c18 	strb.w	r2, [r3, #-24]
					t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 8000596:	7f7a      	ldrb	r2, [r7, #29]
 8000598:	7efb      	ldrb	r3, [r7, #27]
 800059a:	1c59      	adds	r1, r3, #1
 800059c:	76f9      	strb	r1, [r7, #27]
 800059e:	461c      	mov	r4, r3
 80005a0:	7e79      	ldrb	r1, [r7, #25]
 80005a2:	460b      	mov	r3, r1
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	1e59      	subs	r1, r3, #1
 80005aa:	7ebb      	ldrb	r3, [r7, #26]
 80005ac:	1c58      	adds	r0, r3, #1
 80005ae:	76b8      	strb	r0, [r7, #26]
 80005b0:	1ac9      	subs	r1, r1, r3
 80005b2:	484a      	ldr	r0, [pc, #296]	; (80006dc <setTimeString+0x2f0>)
 80005b4:	4613      	mov	r3, r2
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	4403      	add	r3, r0
 80005bc:	4423      	add	r3, r4
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	f101 0320 	add.w	r3, r1, #32
 80005c4:	443b      	add	r3, r7
 80005c6:	f803 2c18 	strb.w	r2, [r3, #-24]
					t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 80005ca:	7f7a      	ldrb	r2, [r7, #29]
 80005cc:	7efb      	ldrb	r3, [r7, #27]
 80005ce:	1c59      	adds	r1, r3, #1
 80005d0:	76f9      	strb	r1, [r7, #27]
 80005d2:	461c      	mov	r4, r3
 80005d4:	7e79      	ldrb	r1, [r7, #25]
 80005d6:	460b      	mov	r3, r1
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	440b      	add	r3, r1
 80005dc:	1e59      	subs	r1, r3, #1
 80005de:	7ebb      	ldrb	r3, [r7, #26]
 80005e0:	1c58      	adds	r0, r3, #1
 80005e2:	76b8      	strb	r0, [r7, #26]
 80005e4:	1ac9      	subs	r1, r1, r3
 80005e6:	483d      	ldr	r0, [pc, #244]	; (80006dc <setTimeString+0x2f0>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	011b      	lsls	r3, r3, #4
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	4403      	add	r3, r0
 80005f0:	4423      	add	r3, r4
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	f101 0320 	add.w	r3, r1, #32
 80005f8:	443b      	add	r3, r7
 80005fa:	f803 2c18 	strb.w	r2, [r3, #-24]
					l = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	76bb      	strb	r3, [r7, #26]
			for(uint8_t i = 1; i <= 3; i++)
 8000602:	7e7b      	ldrb	r3, [r7, #25]
 8000604:	3301      	adds	r3, #1
 8000606:	767b      	strb	r3, [r7, #25]
 8000608:	7e7b      	ldrb	r3, [r7, #25]
 800060a:	2b03      	cmp	r3, #3
 800060c:	f67f af75 	bls.w	80004fa <setTimeString+0x10e>
				}

				for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 8000610:	2300      	movs	r3, #0
 8000612:	76fb      	strb	r3, [r7, #27]
 8000614:	e01f      	b.n	8000656 <setTimeString+0x26a>
				{
					if(t_buffer[k] == 1)											// compare with mask
 8000616:	7efb      	ldrb	r3, [r7, #27]
 8000618:	3320      	adds	r3, #32
 800061a:	443b      	add	r3, r7
 800061c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d012      	beq.n	800064a <setTimeString+0x25e>
					{
						LED_Data[startRow][1] = red;
 8000624:	7ffb      	ldrb	r3, [r7, #31]
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <setTimeString+0x2f4>)
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	78ba      	ldrb	r2, [r7, #2]
 800062e:	705a      	strb	r2, [r3, #1]
						LED_Data[startRow][2] = green;
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <setTimeString+0x2f4>)
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	787a      	ldrb	r2, [r7, #1]
 800063a:	709a      	strb	r2, [r3, #2]
						LED_Data[startRow][3] = blue;
 800063c:	7ffb      	ldrb	r3, [r7, #31]
 800063e:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <setTimeString+0x2f4>)
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000648:	70da      	strb	r2, [r3, #3]
					}
					startRow++;
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	3301      	adds	r3, #1
 800064e:	77fb      	strb	r3, [r7, #31]
				for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 8000650:	7efb      	ldrb	r3, [r7, #27]
 8000652:	3301      	adds	r3, #1
 8000654:	76fb      	strb	r3, [r7, #27]
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <setTimeString+0x2f8>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	7efa      	ldrb	r2, [r7, #27]
 800065c:	429a      	cmp	r2, r3
 800065e:	d9da      	bls.n	8000616 <setTimeString+0x22a>
		{
 8000660:	e02b      	b.n	80006ba <setTimeString+0x2ce>
				}
			}
			else																	// Not pair column ( LEDs start from bottom)
			{
				for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 8000662:	2300      	movs	r3, #0
 8000664:	77bb      	strb	r3, [r7, #30]
 8000666:	e023      	b.n	80006b0 <setTimeString+0x2c4>
				{
					if(digits_paterns[simbol][k] == 1)								// compare with mask
 8000668:	7f7a      	ldrb	r2, [r7, #29]
 800066a:	7fb9      	ldrb	r1, [r7, #30]
 800066c:	481b      	ldr	r0, [pc, #108]	; (80006dc <setTimeString+0x2f0>)
 800066e:	4613      	mov	r3, r2
 8000670:	011b      	lsls	r3, r3, #4
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	4403      	add	r3, r0
 8000676:	440b      	add	r3, r1
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d012      	beq.n	80006a4 <setTimeString+0x2b8>
					{
						LED_Data[startRow][1] = red;
 800067e:	7ffb      	ldrb	r3, [r7, #31]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <setTimeString+0x2f4>)
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	78ba      	ldrb	r2, [r7, #2]
 8000688:	705a      	strb	r2, [r3, #1]
						LED_Data[startRow][2] = green;
 800068a:	7ffb      	ldrb	r3, [r7, #31]
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <setTimeString+0x2f4>)
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	787a      	ldrb	r2, [r7, #1]
 8000694:	709a      	strb	r2, [r3, #2]
						LED_Data[startRow][3] = blue;
 8000696:	7ffb      	ldrb	r3, [r7, #31]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <setTimeString+0x2f4>)
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80006a2:	70da      	strb	r2, [r3, #3]
					}
					startRow++;
 80006a4:	7ffb      	ldrb	r3, [r7, #31]
 80006a6:	3301      	adds	r3, #1
 80006a8:	77fb      	strb	r3, [r7, #31]
				for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 80006aa:	7fbb      	ldrb	r3, [r7, #30]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77bb      	strb	r3, [r7, #30]
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <setTimeString+0x2f8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	7fba      	ldrb	r2, [r7, #30]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d9d6      	bls.n	8000668 <setTimeString+0x27c>
	for(uint8_t q = 0; q <= string_size; q++)
 80006ba:	7f3b      	ldrb	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	773b      	strb	r3, [r7, #28]
 80006c0:	7f3a      	ldrb	r2, [r7, #28]
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	f67f aea7 	bls.w	8000418 <setTimeString+0x2c>
				}
			}
	}
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc90      	pop	{r4, r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000001 	.word	0x20000001
 80006dc:	0800a828 	.word	0x0800a828
 80006e0:	20000094 	.word	0x20000094
 80006e4:	20000000 	.word	0x20000000

080006e8 <setStringOnScreenWithShift>:
//// ----------------------------------------------------------------------------------------------
void setStringOnScreenWithShift(uint8_t startPosition, char *simbolstr, uint8_t string_size, uint8_t red, uint8_t green, uint8_t blue)
{
 80006e8:	b490      	push	{r4, r7}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6039      	str	r1, [r7, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	4603      	mov	r3, r0
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	460b      	mov	r3, r1
 80006fa:	71bb      	strb	r3, [r7, #6]
 80006fc:	4613      	mov	r3, r2
 80006fe:	717b      	strb	r3, [r7, #5]
	uint8_t k = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	77fb      	strb	r3, [r7, #31]
	uint8_t simbol = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	77bb      	strb	r3, [r7, #30]
	uint8_t startRow = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	777b      	strb	r3, [r7, #29]

	for(uint8_t q = 0; ((q <= string_size) && (isalnum(simbolstr[q])) || (simbolstr[q] == ':') || (simbolstr[q] == ' ')); q++)
 800070c:	2300      	movs	r3, #0
 800070e:	773b      	strb	r3, [r7, #28]
 8000710:	e179      	b.n	8000a06 <setStringOnScreenWithShift+0x31e>
	{
		if(isdigit(simbolstr[q]))					// Detect digit
 8000712:	7f3b      	ldrb	r3, [r7, #28]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a9f      	ldr	r2, [pc, #636]	; (800099c <setStringOnScreenWithShift+0x2b4>)
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	2b00      	cmp	r3, #0
 8000728:	d005      	beq.n	8000736 <setStringOnScreenWithShift+0x4e>
		{
			simbol = simbolstr[q] - 48;
 800072a:	7f3b      	ldrb	r3, [r7, #28]
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3b30      	subs	r3, #48	; 0x30
 8000734:	77bb      	strb	r3, [r7, #30]
		}
		if(isupper(simbolstr[q]))					// Detect letters
 8000736:	7f3b      	ldrb	r3, [r7, #28]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	4413      	add	r3, r2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a96      	ldr	r2, [pc, #600]	; (800099c <setStringOnScreenWithShift+0x2b4>)
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	2b01      	cmp	r3, #1
 800074c:	d105      	bne.n	800075a <setStringOnScreenWithShift+0x72>
		{
			simbol = simbolstr[q] - 53;
 800074e:	7f3b      	ldrb	r3, [r7, #28]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3b35      	subs	r3, #53	; 0x35
 8000758:	77bb      	strb	r3, [r7, #30]
		}
		if(simbolstr[q] == ' ')
 800075a:	7f3b      	ldrb	r3, [r7, #28]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b20      	cmp	r3, #32
 8000764:	d105      	bne.n	8000772 <setStringOnScreenWithShift+0x8a>
		{
			simbol = simbolstr[q] - 21;
 8000766:	7f3b      	ldrb	r3, [r7, #28]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3b15      	subs	r3, #21
 8000770:	77bb      	strb	r3, [r7, #30]
		}
		if(simbolstr[q] == ':')
 8000772:	7f3b      	ldrb	r3, [r7, #28]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b3a      	cmp	r3, #58	; 0x3a
 800077c:	d105      	bne.n	800078a <setStringOnScreenWithShift+0xa2>
		{
			simbol = simbolstr[q] - 48;
 800077e:	7f3b      	ldrb	r3, [r7, #28]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b30      	subs	r3, #48	; 0x30
 8000788:	77bb      	strb	r3, [r7, #30]
		}

		// Select place for sign on screen
		switch (q) {
 800078a:	7f3b      	ldrb	r3, [r7, #28]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d820      	bhi.n	80007d2 <setStringOnScreenWithShift+0xea>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <setStringOnScreenWithShift+0xb0>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007ad 	.word	0x080007ad
 800079c:	080007b3 	.word	0x080007b3
 80007a0:	080007bb 	.word	0x080007bb
 80007a4:	080007c3 	.word	0x080007c3
 80007a8:	080007cb 	.word	0x080007cb
			case 0:
				startRow = 0 + startPosition;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	777b      	strb	r3, [r7, #29]
				break;
 80007b0:	e00f      	b.n	80007d2 <setStringOnScreenWithShift+0xea>
			case 1:
				startRow = 4 + startPosition;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	3304      	adds	r3, #4
 80007b6:	777b      	strb	r3, [r7, #29]
				break;
 80007b8:	e00b      	b.n	80007d2 <setStringOnScreenWithShift+0xea>
			case 2:
				startRow = 8 + startPosition;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3308      	adds	r3, #8
 80007be:	777b      	strb	r3, [r7, #29]
				break;
 80007c0:	e007      	b.n	80007d2 <setStringOnScreenWithShift+0xea>
			case 3:
				startRow = 12 + startPosition;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	330c      	adds	r3, #12
 80007c6:	777b      	strb	r3, [r7, #29]
				break;
 80007c8:	e003      	b.n	80007d2 <setStringOnScreenWithShift+0xea>
			case 4:
				startRow = 16 + startPosition;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	3310      	adds	r3, #16
 80007ce:	777b      	strb	r3, [r7, #29]
				break;
 80007d0:	bf00      	nop
		}

		startRow = startRow * ROWS;					// make one step(column) on screenЗ (one column = 5 LEDs)
 80007d2:	7f7b      	ldrb	r3, [r7, #29]
 80007d4:	461a      	mov	r2, r3
 80007d6:	0092      	lsls	r2, r2, #2
 80007d8:	4413      	add	r3, r2
 80007da:	777b      	strb	r3, [r7, #29]

		if((startRow == 5) || (startRow == 15) || (startRow == 25) || (startRow == 35) || (startRow == 45) || (startRow == 55) || (startRow == 65) || (startRow == 75))  // Pair column ( LEDs startfrom top)
 80007dc:	7f7b      	ldrb	r3, [r7, #29]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d015      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 80007e2:	7f7b      	ldrb	r3, [r7, #29]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d012      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 80007e8:	7f7b      	ldrb	r3, [r7, #29]
 80007ea:	2b19      	cmp	r3, #25
 80007ec:	d00f      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 80007ee:	7f7b      	ldrb	r3, [r7, #29]
 80007f0:	2b23      	cmp	r3, #35	; 0x23
 80007f2:	d00c      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 80007f4:	7f7b      	ldrb	r3, [r7, #29]
 80007f6:	2b2d      	cmp	r3, #45	; 0x2d
 80007f8:	d009      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 80007fa:	7f7b      	ldrb	r3, [r7, #29]
 80007fc:	2b37      	cmp	r3, #55	; 0x37
 80007fe:	d006      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 8000800:	7f7b      	ldrb	r3, [r7, #29]
 8000802:	2b41      	cmp	r3, #65	; 0x41
 8000804:	d003      	beq.n	800080e <setStringOnScreenWithShift+0x126>
 8000806:	7f7b      	ldrb	r3, [r7, #29]
 8000808:	2b4b      	cmp	r3, #75	; 0x4b
 800080a:	f040 80c4 	bne.w	8000996 <setStringOnScreenWithShift+0x2ae>
		{
			// Convert pattern
			uint8_t k = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	76fb      	strb	r3, [r7, #27]
			uint8_t l = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	76bb      	strb	r3, [r7, #26]
			bool t_buffer[15] = {0, };
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	f8c3 200b 	str.w	r2, [r3, #11]

			for(uint8_t i = 1; i <= 3; i++)
 8000826:	2301      	movs	r3, #1
 8000828:	767b      	strb	r3, [r7, #25]
 800082a:	e086      	b.n	800093a <setStringOnScreenWithShift+0x252>
			{
				t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 800082c:	7fba      	ldrb	r2, [r7, #30]
 800082e:	7efb      	ldrb	r3, [r7, #27]
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	76f9      	strb	r1, [r7, #27]
 8000834:	461c      	mov	r4, r3
 8000836:	7e79      	ldrb	r1, [r7, #25]
 8000838:	460b      	mov	r3, r1
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	440b      	add	r3, r1
 800083e:	1e59      	subs	r1, r3, #1
 8000840:	7ebb      	ldrb	r3, [r7, #26]
 8000842:	1c58      	adds	r0, r3, #1
 8000844:	76b8      	strb	r0, [r7, #26]
 8000846:	1ac9      	subs	r1, r1, r3
 8000848:	4855      	ldr	r0, [pc, #340]	; (80009a0 <setStringOnScreenWithShift+0x2b8>)
 800084a:	4613      	mov	r3, r2
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	4403      	add	r3, r0
 8000852:	4423      	add	r3, r4
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	f101 0320 	add.w	r3, r1, #32
 800085a:	443b      	add	r3, r7
 800085c:	f803 2c18 	strb.w	r2, [r3, #-24]
				t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 8000860:	7fba      	ldrb	r2, [r7, #30]
 8000862:	7efb      	ldrb	r3, [r7, #27]
 8000864:	1c59      	adds	r1, r3, #1
 8000866:	76f9      	strb	r1, [r7, #27]
 8000868:	461c      	mov	r4, r3
 800086a:	7e79      	ldrb	r1, [r7, #25]
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	1e59      	subs	r1, r3, #1
 8000874:	7ebb      	ldrb	r3, [r7, #26]
 8000876:	1c58      	adds	r0, r3, #1
 8000878:	76b8      	strb	r0, [r7, #26]
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	4848      	ldr	r0, [pc, #288]	; (80009a0 <setStringOnScreenWithShift+0x2b8>)
 800087e:	4613      	mov	r3, r2
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	4403      	add	r3, r0
 8000886:	4423      	add	r3, r4
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	f101 0320 	add.w	r3, r1, #32
 800088e:	443b      	add	r3, r7
 8000890:	f803 2c18 	strb.w	r2, [r3, #-24]
				t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 8000894:	7fba      	ldrb	r2, [r7, #30]
 8000896:	7efb      	ldrb	r3, [r7, #27]
 8000898:	1c59      	adds	r1, r3, #1
 800089a:	76f9      	strb	r1, [r7, #27]
 800089c:	461c      	mov	r4, r3
 800089e:	7e79      	ldrb	r1, [r7, #25]
 80008a0:	460b      	mov	r3, r1
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	1e59      	subs	r1, r3, #1
 80008a8:	7ebb      	ldrb	r3, [r7, #26]
 80008aa:	1c58      	adds	r0, r3, #1
 80008ac:	76b8      	strb	r0, [r7, #26]
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	483b      	ldr	r0, [pc, #236]	; (80009a0 <setStringOnScreenWithShift+0x2b8>)
 80008b2:	4613      	mov	r3, r2
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	4403      	add	r3, r0
 80008ba:	4423      	add	r3, r4
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	f101 0320 	add.w	r3, r1, #32
 80008c2:	443b      	add	r3, r7
 80008c4:	f803 2c18 	strb.w	r2, [r3, #-24]
				t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 80008c8:	7fba      	ldrb	r2, [r7, #30]
 80008ca:	7efb      	ldrb	r3, [r7, #27]
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	76f9      	strb	r1, [r7, #27]
 80008d0:	461c      	mov	r4, r3
 80008d2:	7e79      	ldrb	r1, [r7, #25]
 80008d4:	460b      	mov	r3, r1
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	1e59      	subs	r1, r3, #1
 80008dc:	7ebb      	ldrb	r3, [r7, #26]
 80008de:	1c58      	adds	r0, r3, #1
 80008e0:	76b8      	strb	r0, [r7, #26]
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	482e      	ldr	r0, [pc, #184]	; (80009a0 <setStringOnScreenWithShift+0x2b8>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	4403      	add	r3, r0
 80008ee:	4423      	add	r3, r4
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	f101 0320 	add.w	r3, r1, #32
 80008f6:	443b      	add	r3, r7
 80008f8:	f803 2c18 	strb.w	r2, [r3, #-24]
				t_buffer[((i * ROWS) - 1) - (l++)] = digits_paterns[simbol][k++];
 80008fc:	7fba      	ldrb	r2, [r7, #30]
 80008fe:	7efb      	ldrb	r3, [r7, #27]
 8000900:	1c59      	adds	r1, r3, #1
 8000902:	76f9      	strb	r1, [r7, #27]
 8000904:	461c      	mov	r4, r3
 8000906:	7e79      	ldrb	r1, [r7, #25]
 8000908:	460b      	mov	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	1e59      	subs	r1, r3, #1
 8000910:	7ebb      	ldrb	r3, [r7, #26]
 8000912:	1c58      	adds	r0, r3, #1
 8000914:	76b8      	strb	r0, [r7, #26]
 8000916:	1ac9      	subs	r1, r1, r3
 8000918:	4821      	ldr	r0, [pc, #132]	; (80009a0 <setStringOnScreenWithShift+0x2b8>)
 800091a:	4613      	mov	r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	4403      	add	r3, r0
 8000922:	4423      	add	r3, r4
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	f101 0320 	add.w	r3, r1, #32
 800092a:	443b      	add	r3, r7
 800092c:	f803 2c18 	strb.w	r2, [r3, #-24]
				l = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	76bb      	strb	r3, [r7, #26]
			for(uint8_t i = 1; i <= 3; i++)
 8000934:	7e7b      	ldrb	r3, [r7, #25]
 8000936:	3301      	adds	r3, #1
 8000938:	767b      	strb	r3, [r7, #25]
 800093a:	7e7b      	ldrb	r3, [r7, #25]
 800093c:	2b03      	cmp	r3, #3
 800093e:	f67f af75 	bls.w	800082c <setStringOnScreenWithShift+0x144>
			}

			for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 8000942:	2300      	movs	r3, #0
 8000944:	76fb      	strb	r3, [r7, #27]
 8000946:	e020      	b.n	800098a <setStringOnScreenWithShift+0x2a2>
			{
				if(t_buffer[k] == 1)											// compare with mask
 8000948:	7efb      	ldrb	r3, [r7, #27]
 800094a:	3320      	adds	r3, #32
 800094c:	443b      	add	r3, r7
 800094e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d013      	beq.n	800097e <setStringOnScreenWithShift+0x296>
				{
					LED_Data[startRow][1] = red;
 8000956:	7f7b      	ldrb	r3, [r7, #29]
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <setStringOnScreenWithShift+0x2bc>)
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	797a      	ldrb	r2, [r7, #5]
 8000960:	705a      	strb	r2, [r3, #1]
					LED_Data[startRow][2] = green;
 8000962:	7f7b      	ldrb	r3, [r7, #29]
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <setStringOnScreenWithShift+0x2bc>)
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800096e:	709a      	strb	r2, [r3, #2]
					LED_Data[startRow][3] = blue;
 8000970:	7f7b      	ldrb	r3, [r7, #29]
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <setStringOnScreenWithShift+0x2bc>)
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800097c:	70da      	strb	r2, [r3, #3]
				}
				startRow++;
 800097e:	7f7b      	ldrb	r3, [r7, #29]
 8000980:	3301      	adds	r3, #1
 8000982:	777b      	strb	r3, [r7, #29]
			for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 8000984:	7efb      	ldrb	r3, [r7, #27]
 8000986:	3301      	adds	r3, #1
 8000988:	76fb      	strb	r3, [r7, #27]
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <setStringOnScreenWithShift+0x2c0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	7efa      	ldrb	r2, [r7, #27]
 8000990:	429a      	cmp	r2, r3
 8000992:	d9d9      	bls.n	8000948 <setStringOnScreenWithShift+0x260>
		{
 8000994:	e034      	b.n	8000a00 <setStringOnScreenWithShift+0x318>
			}
		}
		else																	// Not pair column ( LEDs start from bottom)
		{
			for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 8000996:	2300      	movs	r3, #0
 8000998:	77fb      	strb	r3, [r7, #31]
 800099a:	e02c      	b.n	80009f6 <setStringOnScreenWithShift+0x30e>
 800099c:	0800abb8 	.word	0x0800abb8
 80009a0:	0800a828 	.word	0x0800a828
 80009a4:	20000094 	.word	0x20000094
 80009a8:	20000000 	.word	0x20000000
			{
				if(digits_paterns[simbol][k] == 1)								// compare with mask
 80009ac:	7fba      	ldrb	r2, [r7, #30]
 80009ae:	7ff9      	ldrb	r1, [r7, #31]
 80009b0:	4827      	ldr	r0, [pc, #156]	; (8000a50 <setStringOnScreenWithShift+0x368>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	4403      	add	r3, r0
 80009ba:	440b      	add	r3, r1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d013      	beq.n	80009ea <setStringOnScreenWithShift+0x302>
				{
					LED_Data[startRow][1] = red;
 80009c2:	7f7b      	ldrb	r3, [r7, #29]
 80009c4:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <setStringOnScreenWithShift+0x36c>)
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	797a      	ldrb	r2, [r7, #5]
 80009cc:	705a      	strb	r2, [r3, #1]
					LED_Data[startRow][2] = green;
 80009ce:	7f7b      	ldrb	r3, [r7, #29]
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <setStringOnScreenWithShift+0x36c>)
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009da:	709a      	strb	r2, [r3, #2]
					LED_Data[startRow][3] = blue;
 80009dc:	7f7b      	ldrb	r3, [r7, #29]
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <setStringOnScreenWithShift+0x36c>)
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80009e8:	70da      	strb	r2, [r3, #3]
				}
				startRow++;
 80009ea:	7f7b      	ldrb	r3, [r7, #29]
 80009ec:	3301      	adds	r3, #1
 80009ee:	777b      	strb	r3, [r7, #29]
			for(k = 0; k <= BYTESINPATTERN; k++)								// Read all pattern bytes
 80009f0:	7ffb      	ldrb	r3, [r7, #31]
 80009f2:	3301      	adds	r3, #1
 80009f4:	77fb      	strb	r3, [r7, #31]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <setStringOnScreenWithShift+0x370>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	7ffa      	ldrb	r2, [r7, #31]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d9d5      	bls.n	80009ac <setStringOnScreenWithShift+0x2c4>
	for(uint8_t q = 0; ((q <= string_size) && (isalnum(simbolstr[q])) || (simbolstr[q] == ':') || (simbolstr[q] == ' ')); q++)
 8000a00:	7f3b      	ldrb	r3, [r7, #28]
 8000a02:	3301      	adds	r3, #1
 8000a04:	773b      	strb	r3, [r7, #28]
 8000a06:	7f3a      	ldrb	r2, [r7, #28]
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d80c      	bhi.n	8000a28 <setStringOnScreenWithShift+0x340>
 8000a0e:	7f3b      	ldrb	r3, [r7, #28]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <setStringOnScreenWithShift+0x374>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f47f ae75 	bne.w	8000712 <setStringOnScreenWithShift+0x2a>
 8000a28:	7f3b      	ldrb	r3, [r7, #28]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b3a      	cmp	r3, #58	; 0x3a
 8000a32:	f43f ae6e 	beq.w	8000712 <setStringOnScreenWithShift+0x2a>
 8000a36:	7f3b      	ldrb	r3, [r7, #28]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b20      	cmp	r3, #32
 8000a40:	f43f ae67 	beq.w	8000712 <setStringOnScreenWithShift+0x2a>

			}
		}
	}
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc90      	pop	{r4, r7}
 8000a4e:	4770      	bx	lr
 8000a50:	0800a828 	.word	0x0800a828
 8000a54:	20000094 	.word	0x20000094
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	0800abb8 	.word	0x0800abb8

08000a60 <textAnimation>:
		}
	}
}
//// ----------------------------------------------------------------------------------------------
void textAnimation(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
	char testString[] = "HELLO";
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <textAnimation+0x5c>)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6e:	6018      	str	r0, [r3, #0]
 8000a70:	3304      	adds	r3, #4
 8000a72:	8019      	strh	r1, [r3, #0]
	int i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]

	for(i = 17; i > -20; i--)
 8000a78:	2311      	movs	r3, #17
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e014      	b.n	8000aa8 <textAnimation+0x48>
	{
		cleanAllScreenBuffer();
 8000a7e:	f7ff fc17 	bl	80002b0 <cleanAllScreenBuffer>
		setStringOnScreenWithShift(i, testString, 5, 250,  0, 0);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	b2d8      	uxtb	r0, r3
 8000a86:	1d39      	adds	r1, r7, #4
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	23fa      	movs	r3, #250	; 0xfa
 8000a92:	2205      	movs	r2, #5
 8000a94:	f7ff fe28 	bl	80006e8 <setStringOnScreenWithShift>
		WS2812_Send();
 8000a98:	f7ff fb86 	bl	80001a8 <WS2812_Send>
		osDelay(50);
 8000a9c:	2032      	movs	r0, #50	; 0x32
 8000a9e:	f005 ff4b 	bl	8006938 <osDelay>
	for(i = 17; i > -20; i--)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f113 0f13 	cmn.w	r3, #19
 8000aae:	dae6      	bge.n	8000a7e <textAnimation+0x1e>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	0800a750 	.word	0x0800a750

08000ac0 <colorAnimation>:
//// ----------------------------------------------------------------------------------------------
void colorAnimation(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af02      	add	r7, sp, #8
	fillInAllScreen(true, false, false, 0, 200, 15);
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	23c8      	movs	r3, #200	; 0xc8
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 f81b 	bl	8000b10 <fillInAllScreen>
	fillInAllScreen(false, true, false, 0, 200, 15);
 8000ada:	230f      	movs	r3, #15
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	23c8      	movs	r3, #200	; 0xc8
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f811 	bl	8000b10 <fillInAllScreen>
	fillInAllScreen(false, false, true, 0, 200, 15);
 8000aee:	230f      	movs	r3, #15
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	23c8      	movs	r3, #200	; 0xc8
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2300      	movs	r3, #0
 8000af8:	2201      	movs	r2, #1
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 f807 	bl	8000b10 <fillInAllScreen>

	osDelay(500);
 8000b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b06:	f005 ff17 	bl	8006938 <osDelay>
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <fillInAllScreen>:
//// ----------------------------------------------------------------------------------------------
static void fillInAllScreen(bool red, bool green, bool blue, uint8_t min_brightness, uint8_t max_brightness, int delay)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4604      	mov	r4, r0
 8000b18:	4608      	mov	r0, r1
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4623      	mov	r3, r4
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	4603      	mov	r3, r0
 8000b24:	71bb      	strb	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	717b      	strb	r3, [r7, #5]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	713b      	strb	r3, [r7, #4]
	int brightness =0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	int led = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]

	for(brightness = min_brightness; brightness <= max_brightness; brightness = brightness + 5)
 8000b36:	793b      	ldrb	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	e053      	b.n	8000be4 <fillInAllScreen+0xd4>
	{
		for(led =0; led <= 84; led++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	e012      	b.n	8000b68 <fillInAllScreen+0x58>
		{
			Set_LED (led, red*brightness, green*brightness, blue*brightness);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	fb02 f103 	mul.w	r1, r2, r3
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	fb02 f003 	mul.w	r0, r2, r3
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	fb02 f303 	mul.w	r3, r2, r3
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff faf7 	bl	8000150 <Set_LED>
		for(led =0; led <= 84; led++)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2b54      	cmp	r3, #84	; 0x54
 8000b6c:	dde9      	ble.n	8000b42 <fillInAllScreen+0x32>
		}
		WS2812_Send();
 8000b6e:	f7ff fb1b 	bl	80001a8 <WS2812_Send>
		osDelay(delay);
 8000b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b74:	f005 fee0 	bl	8006938 <osDelay>
		cleanAllScreenBuffer();
 8000b78:	f7ff fb9a 	bl	80002b0 <cleanAllScreenBuffer>

		if(brightness >= max_brightness)
 8000b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	db2b      	blt.n	8000bde <fillInAllScreen+0xce>
		{
			for(brightness = max_brightness; brightness >= min_brightness; brightness = brightness - 5)
 8000b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e022      	b.n	8000bd4 <fillInAllScreen+0xc4>
			{
				for(led = 0; led <= 84; led++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	e012      	b.n	8000bba <fillInAllScreen+0xaa>
				{
					Set_LED (led, red*brightness, green*brightness, blue*brightness);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	fb02 f103 	mul.w	r1, r2, r3
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	fb02 f003 	mul.w	r0, r2, r3
 8000ba4:	797b      	ldrb	r3, [r7, #5]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	4602      	mov	r2, r0
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f7ff face 	bl	8000150 <Set_LED>
				for(led = 0; led <= 84; led++)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b54      	cmp	r3, #84	; 0x54
 8000bbe:	dde9      	ble.n	8000b94 <fillInAllScreen+0x84>
				}
				WS2812_Send();
 8000bc0:	f7ff faf2 	bl	80001a8 <WS2812_Send>
				osDelay(delay);
 8000bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bc6:	f005 feb7 	bl	8006938 <osDelay>
				cleanAllScreenBuffer();
 8000bca:	f7ff fb71 	bl	80002b0 <cleanAllScreenBuffer>
			for(brightness = max_brightness; brightness >= min_brightness; brightness = brightness - 5)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3b05      	subs	r3, #5
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	793b      	ldrb	r3, [r7, #4]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dad8      	bge.n	8000b8e <fillInAllScreen+0x7e>
			}
			break;
 8000bdc:	e008      	b.n	8000bf0 <fillInAllScreen+0xe0>
	for(brightness = min_brightness; brightness <= max_brightness; brightness = brightness + 5)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3305      	adds	r3, #5
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dda6      	ble.n	8000b3c <fillInAllScreen+0x2c>
		}
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd90      	pop	{r4, r7, pc}

08000bf8 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	4603      	mov	r3, r0
 8000c00:	603a      	str	r2, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	460b      	mov	r3, r1
 8000c06:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c2, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	b299      	uxth	r1, r3
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2301      	movs	r3, #1
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <time_i2c_write_single+0x3c>)
 8000c26:	f002 ff4b 	bl	8003ac0 <HAL_I2C_Mem_Write>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20001298 	.word	0x20001298

08000c38 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	603a      	str	r2, [r7, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	b299      	uxth	r1, r3
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c62:	9002      	str	r0, [sp, #8]
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <time_i2c_write_multi+0x44>)
 8000c6e:	f002 ff27 	bl	8003ac0 <HAL_I2C_Mem_Write>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20001298 	.word	0x20001298

08000c80 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	4603      	mov	r3, r0
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c2, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	b299      	uxth	r1, r3
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <time_i2c_read_single+0x3c>)
 8000cae:	f003 f801 	bl	8003cb4 <HAL_I2C_Mem_Read>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20001298 	.word	0x20001298

08000cc0 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	603a      	str	r2, [r7, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	71bb      	strb	r3, [r7, #6]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c2, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b299      	uxth	r1, r3
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cea:	9002      	str	r0, [sp, #8]
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <time_i2c_read_multi+0x44>)
 8000cf6:	f002 ffdd 	bl	8003cb4 <HAL_I2C_Mem_Read>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20001298 	.word	0x20001298

08000d08 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b0e      	cmp	r3, #14
 8000d18:	f200 80ac 	bhi.w	8000e74 <ds3231_read+0x16c>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <ds3231_read+0x1c>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d61 	.word	0x08000d61
 8000d28:	08000d7d 	.word	0x08000d7d
 8000d2c:	08000d99 	.word	0x08000d99
 8000d30:	08000db5 	.word	0x08000db5
 8000d34:	08000dd1 	.word	0x08000dd1
 8000d38:	08000ded 	.word	0x08000ded
 8000d3c:	08000e09 	.word	0x08000e09
 8000d40:	08000e25 	.word	0x08000e25
 8000d44:	08000e39 	.word	0x08000e39
 8000d48:	08000e4d 	.word	0x08000e4d
 8000d4c:	08000e75 	.word	0x08000e75
 8000d50:	08000e75 	.word	0x08000e75
 8000d54:	08000e75 	.word	0x08000e75
 8000d58:	08000e75 	.word	0x08000e75
 8000d5c:	08000e5f 	.word	0x08000e5f
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8000d60:	4a48      	ldr	r2, [pc, #288]	; (8000e84 <ds3231_read+0x17c>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	2068      	movs	r0, #104	; 0x68
 8000d66:	f7ff ff8b 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000d6a:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <ds3231_read+0x17c>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000d72:	2101      	movs	r1, #1
 8000d74:	6838      	ldr	r0, [r7, #0]
 8000d76:	f000 f9cf 	bl	8001118 <BCD_to_HEX>
      break;
 8000d7a:	e07d      	b.n	8000e78 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 8000d7c:	4a41      	ldr	r2, [pc, #260]	; (8000e84 <ds3231_read+0x17c>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2068      	movs	r0, #104	; 0x68
 8000d82:	f7ff ff7d 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <ds3231_read+0x17c>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000d8e:	2101      	movs	r1, #1
 8000d90:	6838      	ldr	r0, [r7, #0]
 8000d92:	f000 f9c1 	bl	8001118 <BCD_to_HEX>
      break;
 8000d96:	e06f      	b.n	8000e78 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8000d98:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <ds3231_read+0x17c>)
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	2068      	movs	r0, #104	; 0x68
 8000d9e:	f7ff ff6f 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <ds3231_read+0x17c>)
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000daa:	2101      	movs	r1, #1
 8000dac:	6838      	ldr	r0, [r7, #0]
 8000dae:	f000 f9b3 	bl	8001118 <BCD_to_HEX>
      break;
 8000db2:	e061      	b.n	8000e78 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8000db4:	4a33      	ldr	r2, [pc, #204]	; (8000e84 <ds3231_read+0x17c>)
 8000db6:	2103      	movs	r1, #3
 8000db8:	2068      	movs	r0, #104	; 0x68
 8000dba:	f7ff ff61 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <ds3231_read+0x17c>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f000 f9a5 	bl	8001118 <BCD_to_HEX>
      break;
 8000dce:	e053      	b.n	8000e78 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <ds3231_read+0x17c>)
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	2068      	movs	r0, #104	; 0x68
 8000dd6:	f7ff ff53 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <ds3231_read+0x17c>)
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000de2:	2101      	movs	r1, #1
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f000 f997 	bl	8001118 <BCD_to_HEX>
      break;
 8000dea:	e045      	b.n	8000e78 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <ds3231_read+0x17c>)
 8000dee:	2105      	movs	r1, #5
 8000df0:	2068      	movs	r0, #104	; 0x68
 8000df2:	f7ff ff45 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <ds3231_read+0x17c>)
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000dfe:	2101      	movs	r1, #1
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f000 f989 	bl	8001118 <BCD_to_HEX>
      break;
 8000e06:	e037      	b.n	8000e78 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <ds3231_read+0x17c>)
 8000e0a:	2106      	movs	r1, #6
 8000e0c:	2068      	movs	r0, #104	; 0x68
 8000e0e:	f7ff ff37 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <ds3231_read+0x17c>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f000 f97b 	bl	8001118 <BCD_to_HEX>
      break;
 8000e22:	e029      	b.n	8000e78 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <ds3231_read+0x17c>)
 8000e26:	210e      	movs	r1, #14
 8000e28:	2068      	movs	r0, #104	; 0x68
 8000e2a:	f7ff ff29 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <ds3231_read+0x17c>)
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	701a      	strb	r2, [r3, #0]
      break;
 8000e36:	e01f      	b.n	8000e78 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <ds3231_read+0x17c>)
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	2068      	movs	r0, #104	; 0x68
 8000e3e:	f7ff ff1f 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <ds3231_read+0x17c>)
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
      break;
 8000e4a:	e015      	b.n	8000e78 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <ds3231_read+0x17c>)
 8000e4e:	2110      	movs	r1, #16
 8000e50:	2068      	movs	r0, #104	; 0x68
 8000e52:	f7ff ff15 	bl	8000c80 <time_i2c_read_single>
      *data_array = register_current_value;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <ds3231_read+0x17c>)
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 8000e5e:	2307      	movs	r3, #7
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	2100      	movs	r1, #0
 8000e64:	2068      	movs	r0, #104	; 0x68
 8000e66:	f7ff ff2b 	bl	8000cc0 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 8000e6a:	2107      	movs	r1, #7
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f000 f953 	bl	8001118 <BCD_to_HEX>
      break;
 8000e72:	e001      	b.n	8000e78 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000124c 	.word	0x2000124c

08000e88 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b0e      	cmp	r3, #14
 8000e98:	f200 80d5 	bhi.w	8001046 <ds3231_set+0x1be>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <ds3231_set+0x1c>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000ee1 	.word	0x08000ee1
 8000ea8:	08000efd 	.word	0x08000efd
 8000eac:	08000f19 	.word	0x08000f19
 8000eb0:	08000f35 	.word	0x08000f35
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f6d 	.word	0x08000f6d
 8000ebc:	08000f89 	.word	0x08000f89
 8000ec0:	08000fa5 	.word	0x08000fa5
 8000ec4:	08000fdd 	.word	0x08000fdd
 8000ec8:	08001033 	.word	0x08001033
 8000ecc:	08001047 	.word	0x08001047
 8000ed0:	08001047 	.word	0x08001047
 8000ed4:	08001047 	.word	0x08001047
 8000ed8:	08001047 	.word	0x08001047
 8000edc:	08001015 	.word	0x08001015
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <ds3231_set+0x1cc>)
 8000ee6:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	485a      	ldr	r0, [pc, #360]	; (8001054 <ds3231_set+0x1cc>)
 8000eec:	f000 f952 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 8000ef0:	4a58      	ldr	r2, [pc, #352]	; (8001054 <ds3231_set+0x1cc>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2068      	movs	r0, #104	; 0x68
 8000ef6:	f7ff fe7f 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000efa:	e0a6      	b.n	800104a <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	4b54      	ldr	r3, [pc, #336]	; (8001054 <ds3231_set+0x1cc>)
 8000f02:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 8000f04:	2101      	movs	r1, #1
 8000f06:	4854      	ldr	r0, [pc, #336]	; (8001058 <ds3231_set+0x1d0>)
 8000f08:	f000 f944 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <ds3231_set+0x1d0>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2068      	movs	r0, #104	; 0x68
 8000f12:	f7ff fe71 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000f16:	e098      	b.n	800104a <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <ds3231_set+0x1cc>)
 8000f1e:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 8000f20:	2101      	movs	r1, #1
 8000f22:	484e      	ldr	r0, [pc, #312]	; (800105c <ds3231_set+0x1d4>)
 8000f24:	f000 f936 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <ds3231_set+0x1d4>)
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	2068      	movs	r0, #104	; 0x68
 8000f2e:	f7ff fe63 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000f32:	e08a      	b.n	800104a <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	4b46      	ldr	r3, [pc, #280]	; (8001054 <ds3231_set+0x1cc>)
 8000f3a:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4848      	ldr	r0, [pc, #288]	; (8001060 <ds3231_set+0x1d8>)
 8000f40:	f000 f928 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 8000f44:	4a46      	ldr	r2, [pc, #280]	; (8001060 <ds3231_set+0x1d8>)
 8000f46:	2103      	movs	r1, #3
 8000f48:	2068      	movs	r0, #104	; 0x68
 8000f4a:	f7ff fe55 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000f4e:	e07c      	b.n	800104a <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <ds3231_set+0x1cc>)
 8000f56:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4842      	ldr	r0, [pc, #264]	; (8001064 <ds3231_set+0x1dc>)
 8000f5c:	f000 f91a 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8000f60:	4a40      	ldr	r2, [pc, #256]	; (8001064 <ds3231_set+0x1dc>)
 8000f62:	2104      	movs	r1, #4
 8000f64:	2068      	movs	r0, #104	; 0x68
 8000f66:	f7ff fe47 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000f6a:	e06e      	b.n	800104a <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <ds3231_set+0x1cc>)
 8000f72:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000f74:	2101      	movs	r1, #1
 8000f76:	483c      	ldr	r0, [pc, #240]	; (8001068 <ds3231_set+0x1e0>)
 8000f78:	f000 f90c 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 8000f7c:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <ds3231_set+0x1e0>)
 8000f7e:	2105      	movs	r1, #5
 8000f80:	2068      	movs	r0, #104	; 0x68
 8000f82:	f7ff fe39 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000f86:	e060      	b.n	800104a <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <ds3231_set+0x1cc>)
 8000f8e:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000f90:	2101      	movs	r1, #1
 8000f92:	4836      	ldr	r0, [pc, #216]	; (800106c <ds3231_set+0x1e4>)
 8000f94:	f000 f8fe 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000f98:	4a34      	ldr	r2, [pc, #208]	; (800106c <ds3231_set+0x1e4>)
 8000f9a:	2106      	movs	r1, #6
 8000f9c:	2068      	movs	r0, #104	; 0x68
 8000f9e:	f7ff fe2b 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000fa2:	e052      	b.n	800104a <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000fa4:	4a32      	ldr	r2, [pc, #200]	; (8001070 <ds3231_set+0x1e8>)
 8000fa6:	210e      	movs	r1, #14
 8000fa8:	2068      	movs	r0, #104	; 0x68
 8000faa:	f7ff fe69 	bl	8000c80 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <ds3231_set+0x1e8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <ds3231_set+0x1ec>)
 8000fce:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000fd0:	4a28      	ldr	r2, [pc, #160]	; (8001074 <ds3231_set+0x1ec>)
 8000fd2:	210e      	movs	r1, #14
 8000fd4:	2068      	movs	r0, #104	; 0x68
 8000fd6:	f7ff fe0f 	bl	8000bf8 <time_i2c_write_single>
      break;
 8000fda:	e036      	b.n	800104a <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <ds3231_set+0x1e8>)
 8000fde:	210f      	movs	r1, #15
 8000fe0:	2068      	movs	r0, #104	; 0x68
 8000fe2:	f7ff fe4d 	bl	8000c80 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <ds3231_set+0x1e8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b25b      	sxtb	r3, r3
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <ds3231_set+0x1ec>)
 8001006:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <ds3231_set+0x1ec>)
 800100a:	210f      	movs	r1, #15
 800100c:	2068      	movs	r0, #104	; 0x68
 800100e:	f7ff fdf3 	bl	8000bf8 <time_i2c_write_single>
      break;
 8001012:	e01a      	b.n	800104a <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	200e      	movs	r0, #14
 8001018:	f000 f82e 	bl	8001078 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 800101c:	2107      	movs	r1, #7
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <ds3231_set+0x1cc>)
 8001020:	f000 f8b8 	bl	8001194 <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 8001024:	2307      	movs	r3, #7
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <ds3231_set+0x1cc>)
 8001028:	2100      	movs	r1, #0
 800102a:	2068      	movs	r0, #104	; 0x68
 800102c:	f7ff fe04 	bl	8000c38 <time_i2c_write_multi>
      break;
 8001030:	e00b      	b.n	800104a <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <ds3231_set+0x1ec>)
 8001038:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <ds3231_set+0x1ec>)
 800103c:	2110      	movs	r1, #16
 800103e:	2068      	movs	r0, #104	; 0x68
 8001040:	f7ff fdda 	bl	8000bf8 <time_i2c_write_single>
      break;
 8001044:	e001      	b.n	800104a <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20001250 	.word	0x20001250
 8001058:	20001251 	.word	0x20001251
 800105c:	20001252 	.word	0x20001252
 8001060:	20001253 	.word	0x20001253
 8001064:	20001254 	.word	0x20001254
 8001068:	20001255 	.word	0x20001255
 800106c:	20001256 	.word	0x20001256
 8001070:	2000124c 	.word	0x2000124c
 8001074:	2000124d 	.word	0x2000124d

08001078 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b0e      	cmp	r3, #14
 8001088:	d006      	beq.n	8001098 <ds3231_data_clone+0x20>
 800108a:	2b0e      	cmp	r3, #14
 800108c:	dc37      	bgt.n	80010fe <ds3231_data_clone+0x86>
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d013      	beq.n	80010ba <ds3231_data_clone+0x42>
 8001092:	2b0b      	cmp	r3, #11
 8001094:	d022      	beq.n	80010dc <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8001096:	e032      	b.n	80010fe <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e009      	b.n	80010b2 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	441a      	add	r2, r3
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	7811      	ldrb	r1, [r2, #0]
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <ds3231_data_clone+0x94>)
 80010aa:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	d9f2      	bls.n	800109e <ds3231_data_clone+0x26>
      break;
 80010b8:	e022      	b.n	8001100 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	73bb      	strb	r3, [r7, #14]
 80010be:	e009      	b.n	80010d4 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	441a      	add	r2, r3
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	7811      	ldrb	r1, [r2, #0]
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <ds3231_data_clone+0x98>)
 80010cc:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d9f2      	bls.n	80010c0 <ds3231_data_clone+0x48>
      break;
 80010da:	e011      	b.n	8001100 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 80010dc:	2300      	movs	r3, #0
 80010de:	737b      	strb	r3, [r7, #13]
 80010e0:	e009      	b.n	80010f6 <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	441a      	add	r2, r3
 80010e8:	7b7b      	ldrb	r3, [r7, #13]
 80010ea:	7811      	ldrb	r1, [r2, #0]
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <ds3231_data_clone+0x9c>)
 80010ee:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	3301      	adds	r3, #1
 80010f4:	737b      	strb	r3, [r7, #13]
 80010f6:	7b7b      	ldrb	r3, [r7, #13]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d9f2      	bls.n	80010e2 <ds3231_data_clone+0x6a>
      break;
 80010fc:	e000      	b.n	8001100 <ds3231_data_clone+0x88>
      break;
 80010fe:	bf00      	nop
  }
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20001250 	.word	0x20001250
 8001110:	20001258 	.word	0x20001258
 8001114:	2000125c 	.word	0x2000125c

08001118 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	3b01      	subs	r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e028      	b.n	8001180 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	b2db      	uxtb	r3, r3
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	440b      	add	r3, r1
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	b2db      	uxtb	r3, r3
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4413      	add	r3, r2
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	b2da      	uxtb	r2, r3
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4403      	add	r3, r0
 800116e:	440a      	add	r2, r1
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dad2      	bge.n	800112e <BCD_to_HEX+0x16>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73bb      	strb	r3, [r7, #14]
 80011a8:	e02d      	b.n	8001206 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 80011ae:	e00e      	b.n	80011ce <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3310      	adds	r3, #16
 80011b4:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 80011b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	440b      	add	r3, r1
 80011c8:	3a0a      	subs	r2, #10
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 80011ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	2b09      	cmp	r3, #9
 80011dc:	dce8      	bgt.n	80011b0 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 80011de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	4413      	add	r3, r2
 80011ec:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 80011ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 80011fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73bb      	strb	r3, [r7, #14]
 8001206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800120a:	2b00      	cmp	r3, #0
 800120c:	dacd      	bge.n	80011aa <HEX_to_BCD+0x16>
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <HAL_GPIO_EXTI_Callback>:
// ------------------------------------------------------------------------------
// Callback from keys (buttons 1,2,3 and 4 and trom RTC INT input).
// Callback starts timer for make debounce buttons.
// Callback from RTS interrupt occurs every one second.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	static BaseType_t xHigherPriorityTaskWoken;

	if((GPIO_Pin == BUTTON_1_Pin) || (GPIO_Pin == BUTTON_2_Pin) || (GPIO_Pin == BUTTON_3_Pin) || (GPIO_Pin == BUTTON_4_Pin))
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800122c:	d008      	beq.n	8001240 <HAL_GPIO_EXTI_Callback+0x24>
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	2b10      	cmp	r3, #16
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_EXTI_Callback+0x24>
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d002      	beq.n	8001240 <HAL_GPIO_EXTI_Callback+0x24>
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d102      	bne.n	8001246 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <HAL_GPIO_EXTI_Callback+0x44>)
 8001242:	f004 f835 	bl	80052b0 <HAL_TIM_Base_Start_IT>
	}
	if(GPIO_Pin == INT_RTC_Pin)
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2b20      	cmp	r3, #32
 800124a:	d105      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		xSemaphoreGiveFromISR(RTCTrigSemHandle, &xHigherPriorityTaskWoken);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_GPIO_EXTI_Callback+0x48>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4905      	ldr	r1, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001252:	4618      	mov	r0, r3
 8001254:	f006 f8e2 	bl	800741c <xQueueGiveFromISR>
	}
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20001334 	.word	0x20001334
 8001264:	2000205c 	.word	0x2000205c
 8001268:	20002068 	.word	0x20002068

0800126c <selectColors>:
// ------------------------------------------------------------------------------
/*
@brief	Function chooses colors for time. Color depends on brightness and hour.
 */
void selectColors(uint8_t *r_result, uint8_t *g_result, uint8_t *b_result, uint16_t brightness, uint8_t hours)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	807b      	strh	r3, [r7, #2]
	bool r = false;
 800127a:	2300      	movs	r3, #0
 800127c:	77fb      	strb	r3, [r7, #31]
	bool g = false;
 800127e:	2300      	movs	r3, #0
 8001280:	77bb      	strb	r3, [r7, #30]
	bool b = false;
 8001282:	2300      	movs	r3, #0
 8001284:	777b      	strb	r3, [r7, #29]

	uint16_t total_channels = 3;
 8001286:	2303      	movs	r3, #3
 8001288:	837b      	strh	r3, [r7, #26]


	uint16_t share = brightness/total_channels;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	8b7b      	ldrh	r3, [r7, #26]
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	833b      	strh	r3, [r7, #24]
	uint16_t remainder = brightness % total_channels;
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	8b7a      	ldrh	r2, [r7, #26]
 8001298:	fbb3 f1f2 	udiv	r1, r3, r2
 800129c:	fb01 f202 	mul.w	r2, r1, r2
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	82fb      	strh	r3, [r7, #22]

	switch(hours){
 80012a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012a8:	3b06      	subs	r3, #6
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d847      	bhi.n	800133e <selectColors+0xd2>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <selectColors+0x48>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012f9 	.word	0x080012f9
 80012b8:	080012f9 	.word	0x080012f9
 80012bc:	080012f9 	.word	0x080012f9
 80012c0:	080012f9 	.word	0x080012f9
 80012c4:	08001307 	.word	0x08001307
 80012c8:	08001307 	.word	0x08001307
 80012cc:	08001307 	.word	0x08001307
 80012d0:	08001307 	.word	0x08001307
 80012d4:	08001315 	.word	0x08001315
 80012d8:	08001315 	.word	0x08001315
 80012dc:	08001315 	.word	0x08001315
 80012e0:	08001323 	.word	0x08001323
 80012e4:	08001323 	.word	0x08001323
 80012e8:	08001323 	.word	0x08001323
 80012ec:	08001331 	.word	0x08001331
 80012f0:	08001331 	.word	0x08001331
 80012f4:	08001331 	.word	0x08001331
		case 6 ... 9:
			r = false, g = true, b = false;
 80012f8:	2300      	movs	r3, #0
 80012fa:	77fb      	strb	r3, [r7, #31]
 80012fc:	2301      	movs	r3, #1
 80012fe:	77bb      	strb	r3, [r7, #30]
 8001300:	2300      	movs	r3, #0
 8001302:	777b      	strb	r3, [r7, #29]
			break;
 8001304:	e022      	b.n	800134c <selectColors+0xe0>

		case 10 ... 13:
			r = false, g = true, b = true;
 8001306:	2300      	movs	r3, #0
 8001308:	77fb      	strb	r3, [r7, #31]
 800130a:	2301      	movs	r3, #1
 800130c:	77bb      	strb	r3, [r7, #30]
 800130e:	2301      	movs	r3, #1
 8001310:	777b      	strb	r3, [r7, #29]
			break;
 8001312:	e01b      	b.n	800134c <selectColors+0xe0>

		case 14 ... 16:
			r = true, g = true, b = false;
 8001314:	2301      	movs	r3, #1
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	2301      	movs	r3, #1
 800131a:	77bb      	strb	r3, [r7, #30]
 800131c:	2300      	movs	r3, #0
 800131e:	777b      	strb	r3, [r7, #29]
			break;
 8001320:	e014      	b.n	800134c <selectColors+0xe0>

		case 17 ... 19:
			r = true, g = false, b = true;
 8001322:	2301      	movs	r3, #1
 8001324:	77fb      	strb	r3, [r7, #31]
 8001326:	2300      	movs	r3, #0
 8001328:	77bb      	strb	r3, [r7, #30]
 800132a:	2301      	movs	r3, #1
 800132c:	777b      	strb	r3, [r7, #29]
			break;
 800132e:	e00d      	b.n	800134c <selectColors+0xe0>

		case 20 ... 22:
			r = false, g = false, b = true;
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	2300      	movs	r3, #0
 8001336:	77bb      	strb	r3, [r7, #30]
 8001338:	2301      	movs	r3, #1
 800133a:	777b      	strb	r3, [r7, #29]
			break;
 800133c:	e006      	b.n	800134c <selectColors+0xe0>

		default:
			r = true, g = true, b = true;
 800133e:	2301      	movs	r3, #1
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	2301      	movs	r3, #1
 8001344:	77bb      	strb	r3, [r7, #30]
 8001346:	2301      	movs	r3, #1
 8001348:	777b      	strb	r3, [r7, #29]
			break;
 800134a:	bf00      	nop
	}

	*r_result = r ? share + remainder : 0;
 800134c:	7ffb      	ldrb	r3, [r7, #31]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <selectColors+0xf4>
 8001352:	8b3b      	ldrh	r3, [r7, #24]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	8afb      	ldrh	r3, [r7, #22]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4413      	add	r3, r2
 800135c:	b2da      	uxtb	r2, r3
 800135e:	e000      	b.n	8001362 <selectColors+0xf6>
 8001360:	2200      	movs	r2, #0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	701a      	strb	r2, [r3, #0]
	*g_result = g ? share + remainder : 0;
 8001366:	7fbb      	ldrb	r3, [r7, #30]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <selectColors+0x10e>
 800136c:	8b3b      	ldrh	r3, [r7, #24]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4413      	add	r3, r2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	e000      	b.n	800137c <selectColors+0x110>
 800137a:	2200      	movs	r2, #0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	701a      	strb	r2, [r3, #0]
	*b_result = b ? share + remainder : 0;
 8001380:	7f7b      	ldrb	r3, [r7, #29]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <selectColors+0x128>
 8001386:	8b3b      	ldrh	r3, [r7, #24]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	8afb      	ldrh	r3, [r7, #22]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	b2da      	uxtb	r2, r3
 8001392:	e000      	b.n	8001396 <selectColors+0x12a>
 8001394:	2200      	movs	r2, #0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f001 f9aa 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f8ae 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f000 fa68 	bl	8001884 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b4:	f000 fa48 	bl	8001848 <MX_DMA_Init>
  MX_TIM2_Init();
 80013b8:	f000 f984 	bl	80016c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013bc:	f000 f9f6 	bl	80017ac <MX_TIM3_Init>
  MX_CRC_Init();
 80013c0:	f000 f93e 	bl	8001640 <MX_CRC_Init>
  MX_I2C2_Init();
 80013c4:	f000 f950 	bl	8001668 <MX_I2C2_Init>
  MX_ADC1_Init();
 80013c8:	f000 f8fc 	bl	80015c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013cc:	f005 f93c 	bl	8006648 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of RTCTrigSem */
  RTCTrigSemHandle = osSemaphoreNew(1, 1, &RTCTrigSem_attributes);
 80013d0:	4a31      	ldr	r2, [pc, #196]	; (8001498 <main+0xf4>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2001      	movs	r0, #1
 80013d6:	f005 fadd 	bl	8006994 <osSemaphoreNew>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a2f      	ldr	r2, [pc, #188]	; (800149c <main+0xf8>)
 80013de:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of buttonPress */
  buttonPressHandle = osMessageQueueNew (3, sizeof(uint8_t), &buttonPress_attributes);
 80013e0:	4a2f      	ldr	r2, [pc, #188]	; (80014a0 <main+0xfc>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	2003      	movs	r0, #3
 80013e6:	f005 fb71 	bl	8006acc <osMessageQueueNew>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <main+0x100>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* creation of readRTCQueue */
  readRTCQueueHandle = osMessageQueueNew (1, sizeof(QUEUE_RTC), &readRTCQueue_attributes);
 80013f0:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <main+0x104>)
 80013f2:	2107      	movs	r1, #7
 80013f4:	2001      	movs	r0, #1
 80013f6:	f005 fb69 	bl	8006acc <osMessageQueueNew>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <main+0x108>)
 80013fe:	6013      	str	r3, [r2, #0]

  /* creation of newRTCTimeQueue */
  newRTCTimeQueueHandle = osMessageQueueNew (1, sizeof(QUEUE_RTC_NEW_TIME), &newRTCTimeQueue_attributes);
 8001400:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <main+0x10c>)
 8001402:	2107      	movs	r1, #7
 8001404:	2001      	movs	r0, #1
 8001406:	f005 fb61 	bl	8006acc <osMessageQueueNew>
 800140a:	4603      	mov	r3, r0
 800140c:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <main+0x110>)
 800140e:	6013      	str	r3, [r2, #0]

  /* creation of setValueQueue */
  setValueQueueHandle = osMessageQueueNew (1, sizeof(QUEUE_SET_VALUE), &setValueQueue_attributes);
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <main+0x114>)
 8001412:	2105      	movs	r1, #5
 8001414:	2001      	movs	r0, #1
 8001416:	f005 fb59 	bl	8006acc <osMessageQueueNew>
 800141a:	4603      	mov	r3, r0
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <main+0x118>)
 800141e:	6013      	str	r3, [r2, #0]

  /* creation of Light */
  LightHandle = osMessageQueueNew (1, sizeof(uint16_t), &Light_attributes);
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <main+0x11c>)
 8001422:	2102      	movs	r1, #2
 8001424:	2001      	movs	r0, #1
 8001426:	f005 fb51 	bl	8006acc <osMessageQueueNew>
 800142a:	4603      	mov	r3, r0
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <main+0x120>)
 800142e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LightSensorTask */
  LightSensorTaskHandle = osThreadNew(StartDefaultTask, NULL, &LightSensorTask_attributes);
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <main+0x124>)
 8001432:	2100      	movs	r1, #0
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <main+0x128>)
 8001436:	f005 f96d 	bl	8006714 <osThreadNew>
 800143a:	4603      	mov	r3, r0
 800143c:	4a24      	ldr	r2, [pc, #144]	; (80014d0 <main+0x12c>)
 800143e:	6013      	str	r3, [r2, #0]

  /* creation of DC2321Task */
  DC2321TaskHandle = osThreadNew(StartDC2321Task, NULL, &DC2321Task_attributes);
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <main+0x130>)
 8001442:	2100      	movs	r1, #0
 8001444:	4824      	ldr	r0, [pc, #144]	; (80014d8 <main+0x134>)
 8001446:	f005 f965 	bl	8006714 <osThreadNew>
 800144a:	4603      	mov	r3, r0
 800144c:	4a23      	ldr	r2, [pc, #140]	; (80014dc <main+0x138>)
 800144e:	6013      	str	r3, [r2, #0]

  /* creation of ButtonsTask */
  ButtonsTaskHandle = osThreadNew(StartButtons, NULL, &ButtonsTask_attributes);
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <main+0x13c>)
 8001452:	2100      	movs	r1, #0
 8001454:	4823      	ldr	r0, [pc, #140]	; (80014e4 <main+0x140>)
 8001456:	f005 f95d 	bl	8006714 <osThreadNew>
 800145a:	4603      	mov	r3, r0
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <main+0x144>)
 800145e:	6013      	str	r3, [r2, #0]

  /* creation of ws2812bTask */
  ws2812bTaskHandle = osThreadNew(Startws2812b, NULL, &ws2812bTask_attributes);
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <main+0x148>)
 8001462:	2100      	movs	r1, #0
 8001464:	4822      	ldr	r0, [pc, #136]	; (80014f0 <main+0x14c>)
 8001466:	f005 f955 	bl	8006714 <osThreadNew>
 800146a:	4603      	mov	r3, r0
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <main+0x150>)
 800146e:	6013      	str	r3, [r2, #0]

  /* creation of LightTask */
  LightTaskHandle = osThreadNew(StartLightTask, NULL, &LightTask_attributes);
 8001470:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <main+0x154>)
 8001472:	2100      	movs	r1, #0
 8001474:	4821      	ldr	r0, [pc, #132]	; (80014fc <main+0x158>)
 8001476:	f005 f94d 	bl	8006714 <osThreadNew>
 800147a:	4603      	mov	r3, r0
 800147c:	4a20      	ldr	r2, [pc, #128]	; (8001500 <main+0x15c>)
 800147e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001486:	481f      	ldr	r0, [pc, #124]	; (8001504 <main+0x160>)
 8001488:	f002 f98d 	bl	80037a6 <HAL_GPIO_WritePin>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  HAL_TIM_Base_Start_IT(&htim3);
 800148c:	481e      	ldr	r0, [pc, #120]	; (8001508 <main+0x164>)
 800148e:	f003 ff0f 	bl	80052b0 <HAL_TIM_Base_Start_IT>

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001492:	f005 f90b 	bl	80066ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0xf2>
 8001498:	0800ab90 	.word	0x0800ab90
 800149c:	2000205c 	.word	0x2000205c
 80014a0:	0800ab18 	.word	0x0800ab18
 80014a4:	20002048 	.word	0x20002048
 80014a8:	0800ab30 	.word	0x0800ab30
 80014ac:	2000204c 	.word	0x2000204c
 80014b0:	0800ab48 	.word	0x0800ab48
 80014b4:	20002050 	.word	0x20002050
 80014b8:	0800ab60 	.word	0x0800ab60
 80014bc:	20002054 	.word	0x20002054
 80014c0:	0800ab78 	.word	0x0800ab78
 80014c4:	20002058 	.word	0x20002058
 80014c8:	0800aa64 	.word	0x0800aa64
 80014cc:	080019e9 	.word	0x080019e9
 80014d0:	200013c0 	.word	0x200013c0
 80014d4:	0800aa88 	.word	0x0800aa88
 80014d8:	080019fd 	.word	0x080019fd
 80014dc:	200013c4 	.word	0x200013c4
 80014e0:	0800aaac 	.word	0x0800aaac
 80014e4:	08001ae1 	.word	0x08001ae1
 80014e8:	20001684 	.word	0x20001684
 80014ec:	0800aad0 	.word	0x0800aad0
 80014f0:	08001e09 	.word	0x08001e09
 80014f4:	20001944 	.word	0x20001944
 80014f8:	0800aaf4 	.word	0x0800aaf4
 80014fc:	08001fa5 	.word	0x08001fa5
 8001500:	20002044 	.word	0x20002044
 8001504:	40011000 	.word	0x40011000
 8001508:	20001334 	.word	0x20001334

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f008 fc18 	bl	8009d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f968 	bl	8004838 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800156e:	f000 fe0b 	bl	8002188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fbd4 	bl	8004d3c <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800159a:	f000 fdf5 	bl	8002188 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800159e:	2302      	movs	r3, #2
 80015a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fd7a 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015b6:	f000 fde7 	bl	8002188 <Error_Handler>
  }
}
 80015ba:	bf00      	nop
 80015bc:	3750      	adds	r7, #80	; 0x50
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_ADC1_Init+0x74>)
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <MX_ADC1_Init+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_ADC1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_ADC1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_ADC1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_ADC1_Init+0x74>)
 80015ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_ADC1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_ADC1_Init+0x74>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_ADC1_Init+0x74>)
 8001602:	f001 f8af 	bl	8002764 <HAL_ADC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800160c:	f000 fdbc 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001610:	2306      	movs	r3, #6
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001614:	2301      	movs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_ADC1_Init+0x74>)
 8001622:	f001 fa31 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800162c:	f000 fdac 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20001260 	.word	0x20001260
 800163c:	40012400 	.word	0x40012400

08001640 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_CRC_Init+0x20>)
 8001646:	4a07      	ldr	r2, [pc, #28]	; (8001664 <MX_CRC_Init+0x24>)
 8001648:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_CRC_Init+0x20>)
 800164c:	f001 fc8f 	bl	8002f6e <HAL_CRC_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001656:	f000 fd97 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20001290 	.word	0x20001290
 8001664:	40023000 	.word	0x40023000

08001668 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C2_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C2_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C2_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C2_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C2_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C2_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C2_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C2_Init+0x50>)
 80016a6:	f002 f8c7 	bl	8003838 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 fd6a 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20001298 	.word	0x20001298
 80016bc:	40005800 	.word	0x40005800
 80016c0:	000186a0 	.word	0x000186a0

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	; 0x38
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <MX_TIM2_Init+0xe4>)
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <MX_TIM2_Init+0xe4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <MX_TIM2_Init+0xe4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <MX_TIM2_Init+0xe4>)
 800170a:	2296      	movs	r2, #150	; 0x96
 800170c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_TIM2_Init+0xe4>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <MX_TIM2_Init+0xe4>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800171a:	4823      	ldr	r0, [pc, #140]	; (80017a8 <MX_TIM2_Init+0xe4>)
 800171c:	f003 fd78 	bl	8005210 <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001726:	f000 fd2f 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001734:	4619      	mov	r1, r3
 8001736:	481c      	ldr	r0, [pc, #112]	; (80017a8 <MX_TIM2_Init+0xe4>)
 8001738:	f004 fab0 	bl	8005c9c <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001742:	f000 fd21 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <MX_TIM2_Init+0xe4>)
 8001748:	f003 fe32 	bl	80053b0 <HAL_TIM_PWM_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001752:	f000 fd19 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	4619      	mov	r1, r3
 8001764:	4810      	ldr	r0, [pc, #64]	; (80017a8 <MX_TIM2_Init+0xe4>)
 8001766:	f004 feff 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001770:	f000 fd0a 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	220c      	movs	r2, #12
 8001788:	4619      	mov	r1, r3
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_TIM2_Init+0xe4>)
 800178c:	f004 f9c8 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001796:	f000 fcf7 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <MX_TIM2_Init+0xe4>)
 800179c:	f000 fe3e 	bl	800241c <HAL_TIM_MspPostInit>

}
 80017a0:	bf00      	nop
 80017a2:	3738      	adds	r7, #56	; 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200012ec 	.word	0x200012ec

080017ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_TIM3_Init+0x94>)
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <MX_TIM3_Init+0x98>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_TIM3_Init+0x94>)
 80017d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80017d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_TIM3_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_TIM3_Init+0x94>)
 80017de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_TIM3_Init+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_TIM3_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_TIM3_Init+0x94>)
 80017f2:	f003 fd0d 	bl	8005210 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017fc:	f000 fcc4 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_TIM3_Init+0x94>)
 800180e:	f004 fa45 	bl	8005c9c <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001818:	f000 fcb6 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_TIM3_Init+0x94>)
 800182a:	f004 fe9d 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001834:	f000 fca8 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20001334 	.word	0x20001334
 8001844:	40000400 	.word	0x40000400

08001848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_DMA_Init+0x38>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <MX_DMA_Init+0x38>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_DMA_Init+0x38>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	2011      	movs	r0, #17
 800186c:	f001 fb55 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001870:	2011      	movs	r0, #17
 8001872:	f001 fb6e 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <MX_GPIO_Init+0x150>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <MX_GPIO_Init+0x150>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a47      	ldr	r2, [pc, #284]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a3b      	ldr	r2, [pc, #236]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <MX_GPIO_Init+0x150>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED_Pin|USER_OUTPUT_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80018fe:	4836      	ldr	r0, [pc, #216]	; (80019d8 <MX_GPIO_Init+0x154>)
 8001900:	f001 ff51 	bl	80037a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_OUT_GPIO_Port, USER_OUT_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2104      	movs	r1, #4
 8001908:	4834      	ldr	r0, [pc, #208]	; (80019dc <MX_GPIO_Init+0x158>)
 800190a:	f001 ff4c 	bl	80037a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin USER_OUTPUT_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|USER_OUTPUT_Pin;
 800190e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	482c      	ldr	r0, [pc, #176]	; (80019d8 <MX_GPIO_Init+0x154>)
 8001928:	f001 fda2 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 800192c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_GPIO_Init+0x15c>)
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	4825      	ldr	r0, [pc, #148]	; (80019d8 <MX_GPIO_Init+0x154>)
 8001942:	f001 fd95 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin BUTTON_2_Pin INT_RTC_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin|BUTTON_2_Pin|INT_RTC_Pin;
 8001946:	2333      	movs	r3, #51	; 0x33
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <MX_GPIO_Init+0x160>)
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	4820      	ldr	r0, [pc, #128]	; (80019dc <MX_GPIO_Init+0x158>)
 800195a:	f001 fd89 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_OUT_Pin */
  GPIO_InitStruct.Pin = USER_OUT_Pin;
 800195e:	2304      	movs	r3, #4
 8001960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2302      	movs	r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_OUT_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	4819      	ldr	r0, [pc, #100]	; (80019dc <MX_GPIO_Init+0x158>)
 8001976:	f001 fd7b 	bl	8003470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	2006      	movs	r0, #6
 8001980:	f001 facb 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001984:	2006      	movs	r0, #6
 8001986:	f001 fae4 	bl	8002f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	2007      	movs	r0, #7
 8001990:	f001 fac3 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001994:	2007      	movs	r0, #7
 8001996:	f001 fadc 	bl	8002f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	200a      	movs	r0, #10
 80019a0:	f001 fabb 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019a4:	200a      	movs	r0, #10
 80019a6:	f001 fad4 	bl	8002f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2105      	movs	r1, #5
 80019ae:	2017      	movs	r0, #23
 80019b0:	f001 fab3 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b4:	2017      	movs	r0, #23
 80019b6:	f001 facc 	bl	8002f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	2028      	movs	r0, #40	; 0x28
 80019c0:	f001 faab 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c4:	2028      	movs	r0, #40	; 0x28
 80019c6:	f001 fac4 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40011000 	.word	0x40011000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10110000 	.word	0x10110000

080019e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f4:	f004 ffa0 	bl	8006938 <osDelay>
 80019f8:	e7fa      	b.n	80019f0 <StartDefaultTask+0x8>
	...

080019fc <StartDC2321Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDC2321Task */
void StartDC2321Task(void *argument)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDC2321Task */
  /* Infinite loop */

	QUEUE_RTC_NEW_TIME QUEUE_RTC_NEW_TIME_t;
	uint8_t set_intwrrupt = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]

	osDelay(4000);
 8001a08:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001a0c:	f004 ff94 	bl	8006938 <osDelay>

	time_i2c_write_single( DS3231_I2C_ADDRESS, 14, &set_intwrrupt);							// Make 1 Hz generation interrupt from RTC modu4le
 8001a10:	f107 0317 	add.w	r3, r7, #23
 8001a14:	461a      	mov	r2, r3
 8001a16:	210e      	movs	r1, #14
 8001a18:	2068      	movs	r0, #104	; 0x68
 8001a1a:	f7ff f8ed 	bl	8000bf8 <time_i2c_write_single>

	osDelay(100);
 8001a1e:	2064      	movs	r0, #100	; 0x64
 8001a20:	f004 ff8a 	bl	8006938 <osDelay>

	for(;;)
	{
		if(xSemaphoreTake(RTCTrigSemHandle, 0) == pdTRUE )									// If was interrupt from RTC read data from RTC
 8001a24:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <StartDC2321Task+0xd4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fe64 	bl	80076f8 <xQueueSemaphoreTake>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d12b      	bne.n	8001a8e <StartDC2321Task+0x92>
		{
			uint8_t buff= 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75bb      	strb	r3, [r7, #22]
			uint8_t time[10] = {0};
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	809a      	strh	r2, [r3, #4]

			for(uint8_t i = 0; i <= 8; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
 8001a4c:	e00f      	b.n	8001a6e <StartDC2321Task+0x72>
			{
				ds3231_read(i, &buff);														// Read data from RTC module
 8001a4e:	f107 0216 	add.w	r2, r7, #22
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f956 	bl	8000d08 <ds3231_read>
				time[i] = buff;
 8001a5c:	7ffb      	ldrb	r3, [r7, #31]
 8001a5e:	7dba      	ldrb	r2, [r7, #22]
 8001a60:	3320      	adds	r3, #32
 8001a62:	443b      	add	r3, r7
 8001a64:	f803 2c14 	strb.w	r2, [r3, #-20]
			for(uint8_t i = 0; i <= 8; i++)
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	77fb      	strb	r3, [r7, #31]
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d9ec      	bls.n	8001a4e <StartDC2321Task+0x52>
			}
			// Use only hours and minutes for show on screen
			QUEUE_RTC_t.Min = time[1];
 8001a74:	7b7a      	ldrb	r2, [r7, #13]
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <StartDC2321Task+0xd8>)
 8001a78:	705a      	strb	r2, [r3, #1]
			QUEUE_RTC_t.Hour = time[2];
 8001a7a:	7bba      	ldrb	r2, [r7, #14]
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <StartDC2321Task+0xd8>)
 8001a7e:	709a      	strb	r2, [r3, #2]
			xQueueSend(readRTCQueueHandle, &QUEUE_RTC_t, 0);								// нSend read data to ws2812b task
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <StartDC2321Task+0xdc>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	2300      	movs	r3, #0
 8001a86:	2200      	movs	r2, #0
 8001a88:	4912      	ldr	r1, [pc, #72]	; (8001ad4 <StartDC2321Task+0xd8>)
 8001a8a:	f005 fb31 	bl	80070f0 <xQueueGenericSend>
		}

		if(xQueueReceive(newRTCTimeQueueHandle, &QUEUE_RTC_NEW_TIME_t, 0) == pdTRUE )		// If was selected new time sabe it into RTC module.
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <StartDC2321Task+0xe0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f107 0118 	add.w	r1, r7, #24
 8001a96:	2200      	movs	r2, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fd4d 	bl	8007538 <xQueueReceive>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d1bf      	bne.n	8001a24 <StartDC2321Task+0x28>
		{
			ds3231_set(0, &QUEUE_RTC_NEW_TIME_t.Sec);
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff f9ec 	bl	8000e88 <ds3231_set>
			ds3231_set(1, &QUEUE_RTC_NEW_TIME_t.Min);
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff f9e5 	bl	8000e88 <ds3231_set>
			ds3231_set(2, &QUEUE_RTC_NEW_TIME_t.Hour);
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	2002      	movs	r0, #2
 8001ac8:	f7ff f9de 	bl	8000e88 <ds3231_set>
		if(xSemaphoreTake(RTCTrigSemHandle, 0) == pdTRUE )									// If was interrupt from RTC read data from RTC
 8001acc:	e7aa      	b.n	8001a24 <StartDC2321Task+0x28>
 8001ace:	bf00      	nop
 8001ad0:	2000205c 	.word	0x2000205c
 8001ad4:	20002060 	.word	0x20002060
 8001ad8:	2000204c 	.word	0x2000204c
 8001adc:	20002050 	.word	0x20002050

08001ae0 <StartButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtons */
void StartButtons(void *argument)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtons */
  /* Infinite loop */
	osDelay(4000);
 8001ae8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001aec:	f004 ff24 	bl	8006938 <osDelay>

	QUEUE_SET_VALUE QUEUE_SET_VALUE_t;
	QUEUE_RTC_NEW_TIME QUEUE_RTC_NEW_TIME_t;

	uint8_t pressed_key = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
	char name[3] = {0};
 8001af4:	4bb0      	ldr	r3, [pc, #704]	; (8001db8 <StartButtons+0x2d8>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	81bb      	strh	r3, [r7, #12]
 8001afa:	2300      	movs	r3, #0
 8001afc:	73bb      	strb	r3, [r7, #14]
		EXI_BUTTONT
	};

	for(;;)
	{
		if (xQueueReceive(buttonPressHandle , &pressed_key, 0 ) == pdTRUE)						// Read witch button was pressed (queue receiving from timer HAL_TIM_PeriodElapsedCallback)
 8001afe:	4baf      	ldr	r3, [pc, #700]	; (8001dbc <StartButtons+0x2dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f107 010f 	add.w	r1, r7, #15
 8001b06:	2200      	movs	r2, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 fd15 	bl	8007538 <xQueueReceive>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f040 814d 	bne.w	8001db0 <StartButtons+0x2d0>
		{
			if(pressed_key == ENTER_BUTTON)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <StartButtons+0x42>
			{
				mode = true;
 8001b1c:	4ba8      	ldr	r3, [pc, #672]	; (8001dc0 <StartButtons+0x2e0>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
			}

			if(mode == true )
 8001b22:	4ba7      	ldr	r3, [pc, #668]	; (8001dc0 <StartButtons+0x2e0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8162 	beq.w	8001df0 <StartButtons+0x310>
			{
				osThreadSuspend(DC2321TaskHandle);												// Stop receive new time from RTC module
 8001b2c:	4ba5      	ldr	r3, [pc, #660]	; (8001dc4 <StartButtons+0x2e4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fe99 	bl	8006868 <osThreadSuspend>

				switch(setet_type)
 8001b36:	4ba4      	ldr	r3, [pc, #656]	; (8001dc8 <StartButtons+0x2e8>)
 8001b38:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f000 80cc 	beq.w	8001cda <StartButtons+0x1fa>
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	f300 815b 	bgt.w	8001dfe <StartButtons+0x31e>
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d002      	beq.n	8001b52 <StartButtons+0x72>
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d062      	beq.n	8001c16 <StartButtons+0x136>
 8001b50:	e155      	b.n	8001dfe <StartButtons+0x31e>
				{
					case 1:				// Set hours
						if(pressed_key == PLUS_BUTTON)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d111      	bne.n	8001b7c <StartButtons+0x9c>
						{
							if(hour < 23)
 8001b58:	4b9c      	ldr	r3, [pc, #624]	; (8001dcc <StartButtons+0x2ec>)
 8001b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5e:	2b16      	cmp	r3, #22
 8001b60:	dc09      	bgt.n	8001b76 <StartButtons+0x96>
							{
								hour++;
 8001b62:	4b9a      	ldr	r3, [pc, #616]	; (8001dcc <StartButtons+0x2ec>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	b25a      	sxtb	r2, r3
 8001b70:	4b96      	ldr	r3, [pc, #600]	; (8001dcc <StartButtons+0x2ec>)
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e002      	b.n	8001b7c <StartButtons+0x9c>
							}
							else
							{
								hour = 0;
 8001b76:	4b95      	ldr	r3, [pc, #596]	; (8001dcc <StartButtons+0x2ec>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
							}

						}
						if(pressed_key == MINUS_BUTTON)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d111      	bne.n	8001ba6 <StartButtons+0xc6>
						{
							if(hour > 0)
 8001b82:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <StartButtons+0x2ec>)
 8001b84:	f993 3000 	ldrsb.w	r3, [r3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dd09      	ble.n	8001ba0 <StartButtons+0xc0>
							{
								hour--;
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <StartButtons+0x2ec>)
 8001b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	b25a      	sxtb	r2, r3
 8001b9a:	4b8c      	ldr	r3, [pc, #560]	; (8001dcc <StartButtons+0x2ec>)
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e002      	b.n	8001ba6 <StartButtons+0xc6>
							}
							else
							{
								hour = 23;
 8001ba0:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <StartButtons+0x2ec>)
 8001ba2:	2217      	movs	r2, #23
 8001ba4:	701a      	strb	r2, [r3, #0]
							}
						}

						memset(QUEUE_SET_VALUE_t.name, 0, sizeof(QUEUE_SET_VALUE_t.name));
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	3301      	adds	r3, #1
 8001bac:	2204      	movs	r2, #4
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 f8cd 	bl	8009d50 <memset>
						sprintf(name, "%s","H:");
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4a85      	ldr	r2, [pc, #532]	; (8001dd0 <StartButtons+0x2f0>)
 8001bbc:	4985      	ldr	r1, [pc, #532]	; (8001dd4 <StartButtons+0x2f4>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 f9dc 	bl	8009f7c <siprintf>

						QUEUE_SET_VALUE_t.setValue = hour;
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <StartButtons+0x2ec>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	763b      	strb	r3, [r7, #24]
						strcat(QUEUE_SET_VALUE_t.name, name);
 8001bce:	f107 020c 	add.w	r2, r7, #12
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f008 f9ee 	bl	8009fbc <strcat>

						xQueueSend(setValueQueueHandle, &QUEUE_SET_VALUE_t, 0);
 8001be0:	4b7d      	ldr	r3, [pc, #500]	; (8001dd8 <StartButtons+0x2f8>)
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	f107 0118 	add.w	r1, r7, #24
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	f005 fa80 	bl	80070f0 <xQueueGenericSend>

						if(pressed_key == EXI_BUTTONT)				// save data, and go to next settings
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	f040 80fe 	bne.w	8001df4 <StartButtons+0x314>
						{
							QUEUE_RTC_NEW_TIME_t.Hour = hour;
 8001bf8:	4b74      	ldr	r3, [pc, #464]	; (8001dcc <StartButtons+0x2ec>)
 8001bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	74bb      	strb	r3, [r7, #18]
							setet_type++;
 8001c02:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <StartButtons+0x2e8>)
 8001c04:	f993 3000 	ldrsb.w	r3, [r3]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	b25a      	sxtb	r2, r3
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <StartButtons+0x2e8>)
 8001c12:	701a      	strb	r2, [r3, #0]
						}

					break;
 8001c14:	e0ee      	b.n	8001df4 <StartButtons+0x314>

					case 2:				// Set minutes
						if(pressed_key == PLUS_BUTTON)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d111      	bne.n	8001c40 <StartButtons+0x160>
							{
								if(minute < 59)
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <StartButtons+0x2fc>)
 8001c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c22:	2b3a      	cmp	r3, #58	; 0x3a
 8001c24:	dc09      	bgt.n	8001c3a <StartButtons+0x15a>
								{
									minute++;
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <StartButtons+0x2fc>)
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <StartButtons+0x2fc>)
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e002      	b.n	8001c40 <StartButtons+0x160>
								}
								else
								{
									minute = 0;
 8001c3a:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <StartButtons+0x2fc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
								}

							}
							if(pressed_key == MINUS_BUTTON)
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d111      	bne.n	8001c6a <StartButtons+0x18a>
							{
								if(minute > 0)
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <StartButtons+0x2fc>)
 8001c48:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dd09      	ble.n	8001c64 <StartButtons+0x184>
								{
									minute--;
 8001c50:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <StartButtons+0x2fc>)
 8001c52:	f993 3000 	ldrsb.w	r3, [r3]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	b25a      	sxtb	r2, r3
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <StartButtons+0x2fc>)
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e002      	b.n	8001c6a <StartButtons+0x18a>
								}
								else
								{
									minute = 59;
 8001c64:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <StartButtons+0x2fc>)
 8001c66:	223b      	movs	r2, #59	; 0x3b
 8001c68:	701a      	strb	r2, [r3, #0]
								}

							}

							memset(QUEUE_SET_VALUE_t.name, 0, sizeof(QUEUE_SET_VALUE_t.name));
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	3301      	adds	r3, #1
 8001c70:	2204      	movs	r2, #4
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f008 f86b 	bl	8009d50 <memset>
							sprintf(name, "%s", "M:");
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <StartButtons+0x300>)
 8001c80:	4954      	ldr	r1, [pc, #336]	; (8001dd4 <StartButtons+0x2f4>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f008 f97a 	bl	8009f7c <siprintf>

							QUEUE_SET_VALUE_t.setValue = minute;
 8001c88:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <StartButtons+0x2fc>)
 8001c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	763b      	strb	r3, [r7, #24]
							strcat(QUEUE_SET_VALUE_t.name, name);
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f008 f98c 	bl	8009fbc <strcat>

							xQueueSend(setValueQueueHandle, &QUEUE_SET_VALUE_t, 0);
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <StartButtons+0x2f8>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	f107 0118 	add.w	r1, r7, #24
 8001cac:	2300      	movs	r3, #0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f005 fa1e 	bl	80070f0 <xQueueGenericSend>

							if(pressed_key == EXI_BUTTONT)		// save data, and go to next settings
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	f040 809e 	bne.w	8001df8 <StartButtons+0x318>
							{
								QUEUE_RTC_NEW_TIME_t.Min = minute;
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <StartButtons+0x2fc>)
 8001cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	747b      	strb	r3, [r7, #17]
								setet_type++;
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <StartButtons+0x2e8>)
 8001cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	b25a      	sxtb	r2, r3
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <StartButtons+0x2e8>)
 8001cd6:	701a      	strb	r2, [r3, #0]
							}
					break;
 8001cd8:	e08e      	b.n	8001df8 <StartButtons+0x318>

					case 3:				// Set seconds
						if(pressed_key == PLUS_BUTTON)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d111      	bne.n	8001d04 <StartButtons+0x224>
						{
							if(second < 59)
 8001ce0:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <StartButtons+0x304>)
 8001ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce6:	2b3a      	cmp	r3, #58	; 0x3a
 8001ce8:	dc09      	bgt.n	8001cfe <StartButtons+0x21e>
							{
								second++;
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <StartButtons+0x304>)
 8001cec:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <StartButtons+0x304>)
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	e002      	b.n	8001d04 <StartButtons+0x224>
							}
							else
							{
								second = 0;
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <StartButtons+0x304>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
							}

						}
						if(pressed_key == MINUS_BUTTON)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d111      	bne.n	8001d2e <StartButtons+0x24e>
						{
							if(second > 0)
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <StartButtons+0x304>)
 8001d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dd09      	ble.n	8001d28 <StartButtons+0x248>
							{
								second--;
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <StartButtons+0x304>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <StartButtons+0x304>)
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e002      	b.n	8001d2e <StartButtons+0x24e>
							}
							else
							{
								second = 59;
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <StartButtons+0x304>)
 8001d2a:	223b      	movs	r2, #59	; 0x3b
 8001d2c:	701a      	strb	r2, [r3, #0]
							}
						}

						memset(QUEUE_SET_VALUE_t.name, 0, sizeof(QUEUE_SET_VALUE_t.name));
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	3301      	adds	r3, #1
 8001d34:	2204      	movs	r2, #4
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f008 f809 	bl	8009d50 <memset>
						sprintf(name, "%s", "S:");
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <StartButtons+0x308>)
 8001d44:	4923      	ldr	r1, [pc, #140]	; (8001dd4 <StartButtons+0x2f4>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f008 f918 	bl	8009f7c <siprintf>

						QUEUE_SET_VALUE_t.setValue = second;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <StartButtons+0x304>)
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	763b      	strb	r3, [r7, #24]
						strcat(QUEUE_SET_VALUE_t.name, name);
 8001d56:	f107 020c 	add.w	r2, r7, #12
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f008 f92a 	bl	8009fbc <strcat>

						xQueueSend(setValueQueueHandle, &QUEUE_SET_VALUE_t, 0);
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <StartButtons+0x2f8>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f107 0118 	add.w	r1, r7, #24
 8001d70:	2300      	movs	r3, #0
 8001d72:	2200      	movs	r2, #0
 8001d74:	f005 f9bc 	bl	80070f0 <xQueueGenericSend>

						if(pressed_key == EXI_BUTTONT)		// save data, and go to next settings
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d13e      	bne.n	8001dfc <StartButtons+0x31c>
						{
							QUEUE_RTC_NEW_TIME_t.Sec = second;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <StartButtons+0x304>)
 8001d80:	f993 3000 	ldrsb.w	r3, [r3]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	743b      	strb	r3, [r7, #16]

							xQueueSend(newRTCTimeQueueHandle, &QUEUE_RTC_NEW_TIME_t, 0);
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <StartButtons+0x30c>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	f107 0110 	add.w	r1, r7, #16
 8001d90:	2300      	movs	r3, #0
 8001d92:	2200      	movs	r2, #0
 8001d94:	f005 f9ac 	bl	80070f0 <xQueueGenericSend>
							osThreadResume(DC2321TaskHandle);
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <StartButtons+0x2e4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 fd97 	bl	80068d0 <osThreadResume>

							mode = false;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <StartButtons+0x2e0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
							setet_type = 1;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <StartButtons+0x2e8>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
						}
					break;
 8001dae:	e025      	b.n	8001dfc <StartButtons+0x31c>

		}
		else
		{
			// If no data in the queue
			 osDelay(10);
 8001db0:	200a      	movs	r0, #10
 8001db2:	f004 fdc1 	bl	8006938 <osDelay>
 8001db6:	e022      	b.n	8001dfe <StartButtons+0x31e>
 8001db8:	0800a7f8 	.word	0x0800a7f8
 8001dbc:	20002048 	.word	0x20002048
 8001dc0:	2000206c 	.word	0x2000206c
 8001dc4:	200013c4 	.word	0x200013c4
 8001dc8:	20000002 	.word	0x20000002
 8001dcc:	2000206d 	.word	0x2000206d
 8001dd0:	0800a7e8 	.word	0x0800a7e8
 8001dd4:	0800a7ec 	.word	0x0800a7ec
 8001dd8:	20002054 	.word	0x20002054
 8001ddc:	2000206e 	.word	0x2000206e
 8001de0:	0800a7f0 	.word	0x0800a7f0
 8001de4:	2000206f 	.word	0x2000206f
 8001de8:	0800a7f4 	.word	0x0800a7f4
 8001dec:	20002050 	.word	0x20002050
			}
 8001df0:	bf00      	nop
 8001df2:	e004      	b.n	8001dfe <StartButtons+0x31e>
					break;
 8001df4:	bf00      	nop
 8001df6:	e002      	b.n	8001dfe <StartButtons+0x31e>
					break;
 8001df8:	bf00      	nop
 8001dfa:	e000      	b.n	8001dfe <StartButtons+0x31e>
					break;
 8001dfc:	bf00      	nop
		}
    osDelay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f004 fd9a 	bl	8006938 <osDelay>
		if (xQueueReceive(buttonPressHandle , &pressed_key, 0 ) == pdTRUE)						// Read witch button was pressed (queue receiving from timer HAL_TIM_PeriodElapsedCallback)
 8001e04:	e67b      	b.n	8001afe <StartButtons+0x1e>
 8001e06:	bf00      	nop

08001e08 <Startws2812b>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startws2812b */
void Startws2812b(void *argument)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b08f      	sub	sp, #60	; 0x3c
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	QUEUE_RTC QUEUE_RTC_tt;
	QUEUE_SET_VALUE QUEUE_SET_VALUE_t;

	uint8_t first_time = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	textAnimation();
 8001e16:	f7fe fe23 	bl	8000a60 <textAnimation>
	colorAnimation();
 8001e1a:	f7fe fe51 	bl	8000ac0 <colorAnimation>

	for(;;)
	{
		uint16_t brightness = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	83fb      	strh	r3, [r7, #30]

		uint8_t r_result = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	777b      	strb	r3, [r7, #29]
		uint8_t g_result = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	773b      	strb	r3, [r7, #28]
		uint8_t b_result = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	76fb      	strb	r3, [r7, #27]

		if(xQueueReceive(readRTCQueueHandle, &QUEUE_RTC_tt, 0) == pdTRUE)								// Show current time
 8001e2e:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <Startws2812b+0x188>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e36:	2200      	movs	r2, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f005 fb7d 	bl	8007538 <xQueueReceive>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d15d      	bne.n	8001f00 <Startws2812b+0xf8>
		{
			if(xQueueReceive(LightHandle, &brightness, 0)  == pdTRUE)									// Receive light data (from light sensor tssk)
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <Startws2812b+0x18c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f107 011e 	add.w	r1, r7, #30
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f005 fb72 	bl	8007538 <xQueueReceive>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d144      	bne.n	8001ee4 <Startws2812b+0xdc>
			{
				if((QUEUE_RTC_tt.Hour >= 7) && (QUEUE_RTC_tt.Hour <= 22 ))								// if is the day hours, than brightness can't be less than 60
 8001e5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d924      	bls.n	8001eac <Startws2812b+0xa4>
 8001e62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e66:	2b16      	cmp	r3, #22
 8001e68:	d820      	bhi.n	8001eac <Startws2812b+0xa4>
				{
					if(brightness <= 3 )							// If during day nature light is very low.
 8001e6a:	8bfb      	ldrh	r3, [r7, #30]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d80f      	bhi.n	8001e90 <Startws2812b+0x88>
					{
						brightness = 60;							// Minimum brightness pear day
 8001e70:	233c      	movs	r3, #60	; 0x3c
 8001e72:	83fb      	strh	r3, [r7, #30]
						selectColors(&r_result, &g_result, &b_result, brightness, QUEUE_RTC_tt.Hour);
 8001e74:	8bfc      	ldrh	r4, [r7, #30]
 8001e76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e7a:	f107 021b 	add.w	r2, r7, #27
 8001e7e:	f107 011c 	add.w	r1, r7, #28
 8001e82:	f107 001d 	add.w	r0, r7, #29
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4623      	mov	r3, r4
 8001e8a:	f7ff f9ef 	bl	800126c <selectColors>
					if(brightness <= 3 )							// If during day nature light is very low.
 8001e8e:	e01a      	b.n	8001ec6 <Startws2812b+0xbe>
					}
					else											// If light more than minimum light
					{
						selectColors(&r_result, &g_result, &b_result, brightness, QUEUE_RTC_tt.Hour);
 8001e90:	8bfc      	ldrh	r4, [r7, #30]
 8001e92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e96:	f107 021b 	add.w	r2, r7, #27
 8001e9a:	f107 011c 	add.w	r1, r7, #28
 8001e9e:	f107 001d 	add.w	r0, r7, #29
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	f7ff f9e1 	bl	800126c <selectColors>
					if(brightness <= 3 )							// If during day nature light is very low.
 8001eaa:	e00c      	b.n	8001ec6 <Startws2812b+0xbe>
					}
				}
				else																					// If is the night hours, then the brightness can be minimum
				{
					selectColors(&r_result, &g_result, &b_result, brightness, QUEUE_RTC_tt.Hour);
 8001eac:	8bfc      	ldrh	r4, [r7, #30]
 8001eae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001eb2:	f107 021b 	add.w	r2, r7, #27
 8001eb6:	f107 011c 	add.w	r1, r7, #28
 8001eba:	f107 001d 	add.w	r0, r7, #29
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	f7ff f9d3 	bl	800126c <selectColors>
				}
				printTime(QUEUE_RTC_tt.Min, QUEUE_RTC_tt.Hour, r_result, g_result, b_result);
 8001ec6:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8001eca:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8001ece:	7f7a      	ldrb	r2, [r7, #29]
 8001ed0:	7f3c      	ldrb	r4, [r7, #28]
 8001ed2:	7efb      	ldrb	r3, [r7, #27]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	f7fe fa02 	bl	80002e0 <printTime>
				first_time = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ee2:	e00d      	b.n	8001f00 <Startws2812b+0xf8>
			}
			else													// If no data in queue on the start
			{
				if(first_time == 0)
 8001ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <Startws2812b+0xf8>
				{
					printTime(QUEUE_RTC_tt.Min, QUEUE_RTC_tt.Hour, 0, 200, 0);
 8001eec:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8001ef0:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	23c8      	movs	r3, #200	; 0xc8
 8001efa:	2200      	movs	r2, #0
 8001efc:	f7fe f9f0 	bl	80002e0 <printTime>
				}
			}
		}

		if(xQueueReceive(setValueQueueHandle, &QUEUE_SET_VALUE_t, 0))            			// Show settings time
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <Startws2812b+0x190>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f107 0120 	add.w	r1, r7, #32
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 fb14 	bl	8007538 <xQueueReceive>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d083      	beq.n	8001e1e <Startws2812b+0x16>
		{
			char buf[5] = {0};
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	763b      	strb	r3, [r7, #24]
			char num[3] = {0};
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <Startws2812b+0x194>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	823b      	strh	r3, [r7, #16]
 8001f24:	2300      	movs	r3, #0
 8001f26:	74bb      	strb	r3, [r7, #18]
			char name[4] = {0};
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]

			strcat(name, QUEUE_SET_VALUE_t.name);
 8001f2c:	f107 0320 	add.w	r3, r7, #32
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f008 f83f 	bl	8009fbc <strcat>
			sprintf(num, "%d", QUEUE_SET_VALUE_t.setValue);
 8001f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4915      	ldr	r1, [pc, #84]	; (8001fa0 <Startws2812b+0x198>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f008 f816 	bl	8009f7c <siprintf>

			strcat(buf, name);
 8001f50:	f107 020c 	add.w	r2, r7, #12
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f008 f82e 	bl	8009fbc <strcat>
			strcat(buf, num);
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f008 f826 	bl	8009fbc <strcat>

			cleanAllScreenBuffer();
 8001f70:	f7fe f99e 	bl	80002b0 <cleanAllScreenBuffer>
			setStringOnScreenWithShift(0, buf, 4, 180, 180, 180);
 8001f74:	f107 0114 	add.w	r1, r7, #20
 8001f78:	23b4      	movs	r3, #180	; 0xb4
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	23b4      	movs	r3, #180	; 0xb4
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	23b4      	movs	r3, #180	; 0xb4
 8001f82:	2204      	movs	r2, #4
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fbaf 	bl	80006e8 <setStringOnScreenWithShift>
			WS2812_Send();
 8001f8a:	f7fe f90d 	bl	80001a8 <WS2812_Send>
	{
 8001f8e:	e746      	b.n	8001e1e <Startws2812b+0x16>
 8001f90:	2000204c 	.word	0x2000204c
 8001f94:	20002058 	.word	0x20002058
 8001f98:	20002054 	.word	0x20002054
 8001f9c:	0800a7f8 	.word	0x0800a7f8
 8001fa0:	0800a7fc 	.word	0x0800a7fc

08001fa4 <StartLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLightTask */
void StartLightTask(void *argument)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLightTask */
  /* Infinite loop */

	osDelay(5000);
 8001fac:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fb0:	f004 fcc2 	bl	8006938 <osDelay>

	uint8_t level_1 = 3;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	75fb      	strb	r3, [r7, #23]
	uint8_t level_2 = 60;
 8001fb8:	233c      	movs	r3, #60	; 0x3c
 8001fba:	75bb      	strb	r3, [r7, #22]
	uint8_t level_3 = 100;
 8001fbc:	2364      	movs	r3, #100	; 0x64
 8001fbe:	757b      	strb	r3, [r7, #21]
	uint8_t level_4 = 130;
 8001fc0:	2382      	movs	r3, #130	; 0x82
 8001fc2:	753b      	strb	r3, [r7, #20]
	uint8_t level_5 = 170;
 8001fc4:	23aa      	movs	r3, #170	; 0xaa
 8001fc6:	74fb      	strb	r3, [r7, #19]

	uint16_t brightnessLEDs = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	817b      	strh	r3, [r7, #10]
	int count = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
	int clobalLight = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]

	for(;;)
	{
		brightnessLEDs = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	817b      	strh	r3, [r7, #10]

		taskENTER_CRITICAL();
 8001fd8:	f007 fba8 	bl	800972c <vPortEnterCritical>
		HAL_ADC_Start(&hadc1);
 8001fdc:	4827      	ldr	r0, [pc, #156]	; (800207c <StartLightTask+0xd8>)
 8001fde:	f000 fc99 	bl	8002914 <HAL_ADC_Start>
		uint32_t light = HAL_ADC_GetValue(&hadc1);
 8001fe2:	4826      	ldr	r0, [pc, #152]	; (800207c <StartLightTask+0xd8>)
 8001fe4:	f000 fd44 	bl	8002a70 <HAL_ADC_GetValue>
 8001fe8:	60f8      	str	r0, [r7, #12]
		taskEXIT_CRITICAL();
 8001fea:	f007 fbcf 	bl	800978c <vPortExitCritical>

		if(count < 9)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	dc07      	bgt.n	8002004 <StartLightTask+0x60>
		{
			count++;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
			clobalLight = clobalLight + light;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e037      	b.n	8002074 <StartLightTask+0xd0>
		}
		else
		{
			light = clobalLight/10;
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <StartLightTask+0xdc>)
 8002008:	fb82 1203 	smull	r1, r2, r2, r3
 800200c:	1092      	asrs	r2, r2, #2
 800200e:	17db      	asrs	r3, r3, #31
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]

			clobalLight = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
			count = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]


			if(light < 270)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002022:	d202      	bcs.n	800202a <StartLightTask+0x86>
			{
				brightnessLEDs = level_1;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	b29b      	uxth	r3, r3
 8002028:	817b      	strh	r3, [r7, #10]
			}
			if((light >= 270) && (light < 350))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002030:	d306      	bcc.n	8002040 <StartLightTask+0x9c>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002038:	d202      	bcs.n	8002040 <StartLightTask+0x9c>
			{
				brightnessLEDs = level_2;
 800203a:	7dbb      	ldrb	r3, [r7, #22]
 800203c:	b29b      	uxth	r3, r3
 800203e:	817b      	strh	r3, [r7, #10]
			}
			if((light >= 350) && (light < 400))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002046:	d306      	bcc.n	8002056 <StartLightTask+0xb2>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800204e:	d202      	bcs.n	8002056 <StartLightTask+0xb2>
			{
				brightnessLEDs = level_3;
 8002050:	7d7b      	ldrb	r3, [r7, #21]
 8002052:	b29b      	uxth	r3, r3
 8002054:	817b      	strh	r3, [r7, #10]
			}
			if(light >= 400)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800205c:	d302      	bcc.n	8002064 <StartLightTask+0xc0>
			{
				brightnessLEDs = level_5;
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	b29b      	uxth	r3, r3
 8002062:	817b      	strh	r3, [r7, #10]
//			if(light >= 300)
//			{
//				brightnessLEDs = level_5;
//			}

			xQueueSend(LightHandle, &brightnessLEDs, 0);
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <StartLightTask+0xe0>)
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f107 010a 	add.w	r1, r7, #10
 800206c:	2300      	movs	r3, #0
 800206e:	2200      	movs	r2, #0
 8002070:	f005 f83e 	bl	80070f0 <xQueueGenericSend>
		}
      osDelay(100);
 8002074:	2064      	movs	r0, #100	; 0x64
 8002076:	f004 fc5f 	bl	8006938 <osDelay>
	{
 800207a:	e7ab      	b.n	8001fd4 <StartLightTask+0x30>
 800207c:	20001260 	.word	0x20001260
 8002080:	66666667 	.word	0x66666667
 8002084:	20002058 	.word	0x20002058

08002088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a37      	ldr	r2, [pc, #220]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800209a:	f000 fb47 	bl	800272c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d162      	bne.n	800216c <HAL_TIM_PeriodElapsedCallback+0xe4>
  {
	  BaseType_t xHigherPriorityTaskWoken;

  	uint8_t key_1 = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	72fb      	strb	r3, [r7, #11]
  	uint8_t key_2 = 2;
 80020aa:	2302      	movs	r3, #2
 80020ac:	72bb      	strb	r3, [r7, #10]
  	uint8_t key_3 = 3;
 80020ae:	2303      	movs	r3, #3
 80020b0:	727b      	strb	r3, [r7, #9]
  	uint8_t key_4 = 4;
 80020b2:	2304      	movs	r3, #4
 80020b4:	723b      	strb	r3, [r7, #8]

  	if(HAL_GPIO_ReadPin(GPIOC, BUTTON_1_Pin) == GPIO_PIN_SET)
 80020b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ba:	4830      	ldr	r0, [pc, #192]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80020bc:	f001 fb5c 	bl	8003778 <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x5c>
  	{
  		HAL_GPIO_TogglePin(GPIOC, USER_OUTPUT_Pin);
 80020c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ca:	482c      	ldr	r0, [pc, #176]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80020cc:	f001 fb83 	bl	80037d6 <HAL_GPIO_TogglePin>
  		if((xQueueSendFromISR( buttonPressHandle, &key_1, &xHigherPriorityTaskWoken )) != 1)
 80020d0:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f107 020c 	add.w	r2, r7, #12
 80020d8:	f107 010b 	add.w	r1, r7, #11
 80020dc:	2300      	movs	r3, #0
 80020de:	f005 f905 	bl	80072ec <xQueueGenericSendFromISR>
 80020e2:	e040      	b.n	8002166 <HAL_TIM_PeriodElapsedCallback+0xde>
  		{

  		}
  	}
  	else if(HAL_GPIO_ReadPin(GPIOA, BUTTON_2_Pin) == GPIO_PIN_SET)
 80020e4:	2110      	movs	r1, #16
 80020e6:	4827      	ldr	r0, [pc, #156]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80020e8:	f001 fb46 	bl	8003778 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x88>
  	{
  		HAL_GPIO_TogglePin(GPIOC, USER_OUTPUT_Pin);
 80020f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f6:	4821      	ldr	r0, [pc, #132]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80020f8:	f001 fb6d 	bl	80037d6 <HAL_GPIO_TogglePin>
  		if((xQueueSendFromISR( buttonPressHandle, &key_2, &xHigherPriorityTaskWoken )) != 1)
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	f107 020c 	add.w	r2, r7, #12
 8002104:	f107 010a 	add.w	r1, r7, #10
 8002108:	2300      	movs	r3, #0
 800210a:	f005 f8ef 	bl	80072ec <xQueueGenericSendFromISR>
 800210e:	e02a      	b.n	8002166 <HAL_TIM_PeriodElapsedCallback+0xde>
  		{

  		}
  	}
  	else if(HAL_GPIO_ReadPin(GPIOA, BUTTON_3_Pin) == GPIO_PIN_SET)
 8002110:	2102      	movs	r1, #2
 8002112:	481c      	ldr	r0, [pc, #112]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002114:	f001 fb30 	bl	8003778 <HAL_GPIO_ReadPin>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10e      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0xb4>
  	{
  		HAL_GPIO_TogglePin(GPIOC, USER_OUTPUT_Pin);
 800211e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002122:	4816      	ldr	r0, [pc, #88]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002124:	f001 fb57 	bl	80037d6 <HAL_GPIO_TogglePin>
  		if((xQueueSendFromISR( buttonPressHandle, &key_3, &xHigherPriorityTaskWoken )) != 1)
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	f107 020c 	add.w	r2, r7, #12
 8002130:	f107 0109 	add.w	r1, r7, #9
 8002134:	2300      	movs	r3, #0
 8002136:	f005 f8d9 	bl	80072ec <xQueueGenericSendFromISR>
 800213a:	e014      	b.n	8002166 <HAL_TIM_PeriodElapsedCallback+0xde>
  		{

  		}
  	}
  	else if(HAL_GPIO_ReadPin(GPIOA, BUTTON_4_Pin) == GPIO_PIN_SET)
 800213c:	2101      	movs	r1, #1
 800213e:	4811      	ldr	r0, [pc, #68]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002140:	f001 fb1a 	bl	8003778 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <HAL_TIM_PeriodElapsedCallback+0xde>
  	{
  		HAL_GPIO_TogglePin(GPIOC, USER_OUTPUT_Pin);
 800214a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002150:	f001 fb41 	bl	80037d6 <HAL_GPIO_TogglePin>
  		if((xQueueSendFromISR( buttonPressHandle, &key_4, &xHigherPriorityTaskWoken )) != 1)
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f107 020c 	add.w	r2, r7, #12
 800215c:	f107 0108 	add.w	r1, r7, #8
 8002160:	2300      	movs	r3, #0
 8002162:	f005 f8c3 	bl	80072ec <xQueueGenericSendFromISR>
  		{

  		}
  	}
  	HAL_TIM_Base_Stop_IT(&htim3);
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002168:	f003 f8f4 	bl	8005354 <HAL_TIM_Base_Stop_IT>
  	}
  /* USER CODE END Callback 1 */
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40000800 	.word	0x40000800
 8002178:	20001334 	.word	0x20001334
 800217c:	40011000 	.word	0x40011000
 8002180:	20002048 	.word	0x20002048
 8002184:	40010800 	.word	0x40010800

08002188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002190:	e7fe      	b.n	8002190 <Error_Handler+0x8>
	...

08002194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_MspInit+0x68>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_MspInit+0x68>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_MspInit+0x68>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_MspInit+0x68>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_MspInit+0x68>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_MspInit+0x68>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	210f      	movs	r1, #15
 80021ce:	f06f 0001 	mvn.w	r0, #1
 80021d2:	f000 fea2 	bl	8002f1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_MspInit+0x6c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_MspInit+0x6c>)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000

08002204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a14      	ldr	r2, [pc, #80]	; (8002270 <HAL_ADC_MspInit+0x6c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d121      	bne.n	8002268 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_ADC_MspInit+0x70>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a12      	ldr	r2, [pc, #72]	; (8002274 <HAL_ADC_MspInit+0x70>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_ADC_MspInit+0x70>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_ADC_MspInit+0x70>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_ADC_MspInit+0x70>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_ADC_MspInit+0x70>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002254:	2340      	movs	r3, #64	; 0x40
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002258:	2303      	movs	r3, #3
 800225a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_ADC_MspInit+0x74>)
 8002264:	f001 f904 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40012400 	.word	0x40012400
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800

0800227c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_CRC_MspInit+0x34>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10b      	bne.n	80022a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_CRC_MspInit+0x38>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_CRC_MspInit+0x38>)
 8002294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002298:	6153      	str	r3, [r2, #20]
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_CRC_MspInit+0x38>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	40023000 	.word	0x40023000
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_I2C_MspInit+0x74>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d124      	bne.n	8002322 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_I2C_MspInit+0x78>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <HAL_I2C_MspInit+0x78>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_I2C_MspInit+0x78>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f6:	2312      	movs	r3, #18
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	4619      	mov	r1, r3
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <HAL_I2C_MspInit+0x7c>)
 8002306:	f001 f8b3 	bl	8003470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_I2C_MspInit+0x78>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_I2C_MspInit+0x78>)
 8002310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_I2C_MspInit+0x78>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40005800 	.word	0x40005800
 8002330:	40021000 	.word	0x40021000
 8002334:	40010c00 	.word	0x40010c00

08002338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d143      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_TIM_Base_MspInit+0xd4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a2f      	ldr	r2, [pc, #188]	; (800240c <HAL_TIM_Base_MspInit+0xd4>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_TIM_Base_MspInit+0xd4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002362:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_TIM_Base_MspInit+0xdc>)
 8002366:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 800236a:	2210      	movs	r2, #16
 800236c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800237a:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 800237c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002380:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 8002384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002388:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 8002392:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002396:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002398:	481d      	ldr	r0, [pc, #116]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 800239a:	f000 fe05 	bl	8002fa8 <HAL_DMA_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80023a4:	f7ff fef0 	bl	8002188 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <HAL_TIM_Base_MspInit+0xd8>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2105      	movs	r1, #5
 80023c4:	201c      	movs	r0, #28
 80023c6:	f000 fda8 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023ca:	201c      	movs	r0, #28
 80023cc:	f000 fdc1 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023d0:	e018      	b.n	8002404 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_TIM_Base_MspInit+0xe0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d113      	bne.n	8002404 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_TIM_Base_MspInit+0xd4>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_TIM_Base_MspInit+0xd4>)
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_TIM_Base_MspInit+0xd4>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2105      	movs	r1, #5
 80023f8:	201d      	movs	r0, #29
 80023fa:	f000 fd8e 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023fe:	201d      	movs	r0, #29
 8002400:	f000 fda7 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	2000137c 	.word	0x2000137c
 8002414:	40020080 	.word	0x40020080
 8002418:	40000400 	.word	0x40000400

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d117      	bne.n	800246c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_TIM_MspPostInit+0x58>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_TIM_MspPostInit+0x58>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_TIM_MspPostInit+0x58>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002454:	2308      	movs	r3, #8
 8002456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4619      	mov	r1, r3
 8002466:	4804      	ldr	r0, [pc, #16]	; (8002478 <HAL_TIM_MspPostInit+0x5c>)
 8002468:	f001 f802 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	40010800 	.word	0x40010800

0800247c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002492:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_InitTick+0xe8>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_InitTick+0xe8>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	61d3      	str	r3, [r2, #28]
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_InitTick+0xe8>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024aa:	f107 0210 	add.w	r2, r7, #16
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fda7 	bl	8005008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024c4:	f002 fd8c 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 80024c8:	6378      	str	r0, [r7, #52]	; 0x34
 80024ca:	e004      	b.n	80024d6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024cc:	f002 fd88 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 80024d0:	4603      	mov	r3, r0
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	4a23      	ldr	r2, [pc, #140]	; (8002568 <HAL_InitTick+0xec>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9b      	lsrs	r3, r3, #18
 80024e0:	3b01      	subs	r3, #1
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_InitTick+0xf0>)
 80024e6:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_InitTick+0xf4>)
 80024e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_InitTick+0xf0>)
 80024ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024f0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_InitTick+0xf0>)
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_InitTick+0xf0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_InitTick+0xf0>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_InitTick+0xf0>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800250a:	4818      	ldr	r0, [pc, #96]	; (800256c <HAL_InitTick+0xf0>)
 800250c:	f002 fe80 	bl	8005210 <HAL_TIM_Base_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11b      	bne.n	8002556 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800251e:	4813      	ldr	r0, [pc, #76]	; (800256c <HAL_InitTick+0xf0>)
 8002520:	f002 fec6 	bl	80052b0 <HAL_TIM_Base_Start_IT>
 8002524:	4603      	mov	r3, r0
 8002526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800252a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800252e:	2b00      	cmp	r3, #0
 8002530:	d111      	bne.n	8002556 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002532:	201e      	movs	r0, #30
 8002534:	f000 fd0d 	bl	8002f52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	d808      	bhi.n	8002550 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800253e:	2200      	movs	r2, #0
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	201e      	movs	r0, #30
 8002544:	f000 fce9 	bl	8002f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_InitTick+0xf8>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e002      	b.n	8002556 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800255a:	4618      	mov	r0, r3
 800255c:	3738      	adds	r7, #56	; 0x38
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	431bde83 	.word	0x431bde83
 800256c:	20002070 	.word	0x20002070
 8002570:	40000800 	.word	0x40000800
 8002574:	20000008 	.word	0x20000008

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800257c:	e7fe      	b.n	800257c <NMI_Handler+0x4>

0800257e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002582:	e7fe      	b.n	8002582 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <MemManage_Handler+0x4>

0800258a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <BusFault_Handler+0x4>

08002590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <UsageFault_Handler+0x4>

08002596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 80025a6:	2001      	movs	r0, #1
 80025a8:	f001 f92e 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 80025b4:	2002      	movs	r0, #2
 80025b6:	f001 f927 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}

080025be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 80025c2:	2010      	movs	r0, #16
 80025c4:	f001 f920 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Channel7_IRQHandler+0x10>)
 80025d2:	f000 fe19 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000137c 	.word	0x2000137c

080025e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_RTC_Pin);
 80025e4:	2020      	movs	r0, #32
 80025e6:	f001 f90f 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM2_IRQHandler+0x10>)
 80025f6:	f003 f98b 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200012ec 	.word	0x200012ec

08002604 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM3_IRQHandler+0x10>)
 800260a:	f003 f981 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20001334 	.word	0x20001334

08002618 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM4_IRQHandler+0x10>)
 800261e:	f003 f977 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20002070 	.word	0x20002070

0800262c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8002630:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002634:	f001 f8e8 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <_sbrk+0x5c>)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_sbrk+0x60>)
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x64>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <_sbrk+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800266c:	f007 fb36 	bl	8009cdc <__errno>
 8002670:	4603      	mov	r3, r0
 8002672:	220c      	movs	r2, #12
 8002674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267a:	e009      	b.n	8002690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_sbrk+0x64>)
 800268c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20005000 	.word	0x20005000
 800269c:	00000400 	.word	0x00000400
 80026a0:	200020b8 	.word	0x200020b8
 80026a4:	20003a90 	.word	0x20003a90

080026a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	; (80026ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	; (80026f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026da:	f7ff ffe5 	bl	80026a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026de:	f007 fb03 	bl	8009ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026e2:	f7fe fe5f 	bl	80013a4 <main>
  bx lr
 80026e6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026f0:	0800ad58 	.word	0x0800ad58
  ldr r2, =_sbss
 80026f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80026f8:	20003a90 	.word	0x20003a90

080026fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_2_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_Init+0x28>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_Init+0x28>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 fbf7 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002716:	200f      	movs	r0, #15
 8002718:	f7ff feb0 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800271c:	f7ff fd3a 	bl	8002194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_IncTick+0x1c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_IncTick+0x20>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_IncTick+0x20>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	2000000c 	.word	0x2000000c
 800274c:	200020bc 	.word	0x200020bc

08002750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b02      	ldr	r3, [pc, #8]	; (8002760 <HAL_GetTick+0x10>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	200020bc 	.word	0x200020bc

08002764 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0be      	b.n	8002904 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fd2e 	bl	8002204 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fabf 	bl	8002d2c <ADC_ConversionStop_Disable>
 80027ae:	4603      	mov	r3, r0
 80027b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 8099 	bne.w	80028f2 <HAL_ADC_Init+0x18e>
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 8095 	bne.w	80028f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027d0:	f023 0302 	bic.w	r3, r3, #2
 80027d4:	f043 0202 	orr.w	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7b1b      	ldrb	r3, [r3, #12]
 80027ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fc:	d003      	beq.n	8002806 <HAL_ADC_Init+0xa2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_ADC_Init+0xa8>
 8002806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280a:	e000      	b.n	800280e <HAL_ADC_Init+0xaa>
 800280c:	2300      	movs	r3, #0
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7d1b      	ldrb	r3, [r3, #20]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d119      	bne.n	8002850 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	3b01      	subs	r3, #1
 800282a:	035a      	lsls	r2, r3, #13
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e00b      	b.n	8002850 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_ADC_Init+0x1a8>)
 800286c:	4013      	ands	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	430b      	orrs	r3, r1
 8002876:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002880:	d003      	beq.n	800288a <HAL_ADC_Init+0x126>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d104      	bne.n	8002894 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	3b01      	subs	r3, #1
 8002890:	051b      	lsls	r3, r3, #20
 8002892:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_ADC_Init+0x1ac>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10b      	bne.n	80028d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ce:	e018      	b.n	8002902 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f023 0312 	bic.w	r3, r3, #18
 80028d8:	f043 0210 	orr.w	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028f0:	e007      	b.n	8002902 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	ffe1f7fd 	.word	0xffe1f7fd
 8002910:	ff1f0efe 	.word	0xff1f0efe

08002914 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADC_Start+0x1a>
 800292a:	2302      	movs	r3, #2
 800292c:	e098      	b.n	8002a60 <HAL_ADC_Start+0x14c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f99e 	bl	8002c78 <ADC_Enable>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 8087 	bne.w	8002a56 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a41      	ldr	r2, [pc, #260]	; (8002a68 <HAL_ADC_Start+0x154>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d105      	bne.n	8002972 <HAL_ADC_Start+0x5e>
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_ADC_Start+0x158>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d026      	beq.n	80029da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002994:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299c:	e01d      	b.n	80029da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <HAL_ADC_Start+0x158>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_ADC_Start+0xaa>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_ADC_Start+0x154>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10d      	bne.n	80029da <HAL_ADC_Start+0xc6>
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_ADC_Start+0x158>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f023 0206 	bic.w	r2, r3, #6
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029f2:	e002      	b.n	80029fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0202 	mvn.w	r2, #2
 8002a0a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a1a:	d113      	bne.n	8002a44 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_ADC_Start+0x154>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d105      	bne.n	8002a32 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_ADC_Start+0x158>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	e00c      	b.n	8002a5e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	e003      	b.n	8002a5e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40012800 	.word	0x40012800
 8002a6c:	40012400 	.word	0x40012400

08002a70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x20>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0dc      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1da>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d81c      	bhi.n	8002af2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b05      	subs	r3, #5
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
 8002af0:	e03c      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d81c      	bhi.n	8002b34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b23      	subs	r3, #35	; 0x23
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4019      	ands	r1, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b23      	subs	r3, #35	; 0x23
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
 8002b32:	e01b      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b41      	subs	r3, #65	; 0x41
 8002b46:	221f      	movs	r2, #31
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b41      	subs	r3, #65	; 0x41
 8002b60:	fa00 f203 	lsl.w	r2, r0, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d91c      	bls.n	8002bae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	2207      	movs	r2, #7
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4019      	ands	r1, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6898      	ldr	r0, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b1e      	subs	r3, #30
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	e019      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6919      	ldr	r1, [r3, #16]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d003      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bee:	2b11      	cmp	r3, #17
 8002bf0:	d132      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_ADC_ConfigChannel+0x1e4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d125      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d126      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d11a      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9a      	lsrs	r2, r3, #18
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x1b2>
 8002c46:	e007      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40012400 	.word	0x40012400
 8002c70:	20000004 	.word	0x20000004
 8002c74:	431bde83 	.word	0x431bde83

08002c78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d040      	beq.n	8002d18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <ADC_Enable+0xac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <ADC_Enable+0xb0>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cb4:	e002      	b.n	8002cbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f9      	bne.n	8002cb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc2:	f7ff fd45 	bl	8002750 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cc8:	e01f      	b.n	8002d0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cca:	f7ff fd41 	bl	8002750 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d918      	bls.n	8002d0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d011      	beq.n	8002d0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d1d8      	bne.n	8002cca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000004 	.word	0x20000004
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d12e      	bne.n	8002da4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d56:	f7ff fcfb 	bl	8002750 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d5c:	e01b      	b.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5e:	f7ff fcf7 	bl	8002750 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d914      	bls.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e007      	b.n	8002da6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d0dc      	beq.n	8002d5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <__NVIC_EnableIRQ+0x34>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff4f 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff64 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ffb2 	bl	8002ea0 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff81 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff57 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e00e      	b.n	8002f9e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	795b      	ldrb	r3, [r3, #5]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff f973 	bl	800227c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e043      	b.n	8003046 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_DMA_Init+0xa8>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_DMA_Init+0xac>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	009a      	lsls	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_DMA_Init+0xb0>)
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ff2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	bffdfff8 	.word	0xbffdfff8
 8003054:	cccccccd 	.word	0xcccccccd
 8003058:	40020000 	.word	0x40020000

0800305c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_DMA_Start_IT+0x20>
 8003078:	2302      	movs	r3, #2
 800307a:	e04a      	b.n	8003112 <HAL_DMA_Start_IT+0xb6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800308a:	2b01      	cmp	r3, #1
 800308c:	d13a      	bne.n	8003104 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f9ae 	bl	8003414 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 020e 	orr.w	r2, r2, #14
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e00f      	b.n	80030f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 020a 	orr.w	r2, r2, #10
 80030f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e005      	b.n	8003110 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800312e:	2b02      	cmp	r3, #2
 8003130:	d005      	beq.n	800313e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e051      	b.n	80031e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020e 	bic.w	r2, r2, #14
 800314c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_DMA_Abort_IT+0xd0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d029      	beq.n	80031bc <HAL_DMA_Abort_IT+0xa0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <HAL_DMA_Abort_IT+0xd4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d022      	beq.n	80031b8 <HAL_DMA_Abort_IT+0x9c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_DMA_Abort_IT+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d01a      	beq.n	80031b2 <HAL_DMA_Abort_IT+0x96>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_DMA_Abort_IT+0xdc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d012      	beq.n	80031ac <HAL_DMA_Abort_IT+0x90>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_DMA_Abort_IT+0xe0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00a      	beq.n	80031a6 <HAL_DMA_Abort_IT+0x8a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_DMA_Abort_IT+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d102      	bne.n	80031a0 <HAL_DMA_Abort_IT+0x84>
 800319a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319e:	e00e      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	e00b      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031aa:	e008      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b0:	e005      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b6:	e002      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031b8:	2310      	movs	r3, #16
 80031ba:	e000      	b.n	80031be <HAL_DMA_Abort_IT+0xa2>
 80031bc:	2301      	movs	r3, #1
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_DMA_Abort_IT+0xe8>)
 80031c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
    } 
  }
  return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40020008 	.word	0x40020008
 80031f0:	4002001c 	.word	0x4002001c
 80031f4:	40020030 	.word	0x40020030
 80031f8:	40020044 	.word	0x40020044
 80031fc:	40020058 	.word	0x40020058
 8003200:	4002006c 	.word	0x4002006c
 8003204:	40020000 	.word	0x40020000

08003208 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2204      	movs	r2, #4
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d04f      	beq.n	80032d0 <HAL_DMA_IRQHandler+0xc8>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d04a      	beq.n	80032d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a66      	ldr	r2, [pc, #408]	; (80033f8 <HAL_DMA_IRQHandler+0x1f0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d029      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xae>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a65      	ldr	r2, [pc, #404]	; (80033fc <HAL_DMA_IRQHandler+0x1f4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xaa>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a63      	ldr	r2, [pc, #396]	; (8003400 <HAL_DMA_IRQHandler+0x1f8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01a      	beq.n	80032ac <HAL_DMA_IRQHandler+0xa4>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a62      	ldr	r2, [pc, #392]	; (8003404 <HAL_DMA_IRQHandler+0x1fc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d012      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x9e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a60      	ldr	r2, [pc, #384]	; (8003408 <HAL_DMA_IRQHandler+0x200>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x98>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5f      	ldr	r2, [pc, #380]	; (800340c <HAL_DMA_IRQHandler+0x204>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d102      	bne.n	800329a <HAL_DMA_IRQHandler+0x92>
 8003294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003298:	e00e      	b.n	80032b8 <HAL_DMA_IRQHandler+0xb0>
 800329a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800329e:	e00b      	b.n	80032b8 <HAL_DMA_IRQHandler+0xb0>
 80032a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032a4:	e008      	b.n	80032b8 <HAL_DMA_IRQHandler+0xb0>
 80032a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032aa:	e005      	b.n	80032b8 <HAL_DMA_IRQHandler+0xb0>
 80032ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b0:	e002      	b.n	80032b8 <HAL_DMA_IRQHandler+0xb0>
 80032b2:	2340      	movs	r3, #64	; 0x40
 80032b4:	e000      	b.n	80032b8 <HAL_DMA_IRQHandler+0xb0>
 80032b6:	2304      	movs	r3, #4
 80032b8:	4a55      	ldr	r2, [pc, #340]	; (8003410 <HAL_DMA_IRQHandler+0x208>)
 80032ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8094 	beq.w	80033ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032ce:	e08e      	b.n	80033ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2202      	movs	r2, #2
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d056      	beq.n	800338e <HAL_DMA_IRQHandler+0x186>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d051      	beq.n	800338e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 020a 	bic.w	r2, r2, #10
 8003306:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d029      	beq.n	800336e <HAL_DMA_IRQHandler+0x166>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_DMA_IRQHandler+0x1f4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0x162>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a35      	ldr	r2, [pc, #212]	; (8003400 <HAL_DMA_IRQHandler+0x1f8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01a      	beq.n	8003364 <HAL_DMA_IRQHandler+0x15c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <HAL_DMA_IRQHandler+0x1fc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d012      	beq.n	800335e <HAL_DMA_IRQHandler+0x156>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_DMA_IRQHandler+0x200>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x150>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a31      	ldr	r2, [pc, #196]	; (800340c <HAL_DMA_IRQHandler+0x204>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <HAL_DMA_IRQHandler+0x14a>
 800334c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003350:	e00e      	b.n	8003370 <HAL_DMA_IRQHandler+0x168>
 8003352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003356:	e00b      	b.n	8003370 <HAL_DMA_IRQHandler+0x168>
 8003358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335c:	e008      	b.n	8003370 <HAL_DMA_IRQHandler+0x168>
 800335e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003362:	e005      	b.n	8003370 <HAL_DMA_IRQHandler+0x168>
 8003364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003368:	e002      	b.n	8003370 <HAL_DMA_IRQHandler+0x168>
 800336a:	2320      	movs	r3, #32
 800336c:	e000      	b.n	8003370 <HAL_DMA_IRQHandler+0x168>
 800336e:	2302      	movs	r3, #2
 8003370:	4a27      	ldr	r2, [pc, #156]	; (8003410 <HAL_DMA_IRQHandler+0x208>)
 8003372:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d034      	beq.n	80033ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800338c:	e02f      	b.n	80033ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2208      	movs	r2, #8
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d028      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x1e8>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 020e 	bic.w	r2, r2, #14
 80033b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
    }
  }
  return;
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
}
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40020008 	.word	0x40020008
 80033fc:	4002001c 	.word	0x4002001c
 8003400:	40020030 	.word	0x40020030
 8003404:	40020044 	.word	0x40020044
 8003408:	40020058 	.word	0x40020058
 800340c:	4002006c 	.word	0x4002006c
 8003410:	40020000 	.word	0x40020000

08003414 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d108      	bne.n	8003454 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003452:	e007      	b.n	8003464 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b08b      	sub	sp, #44	; 0x2c
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003482:	e169      	b.n	8003758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003484:	2201      	movs	r2, #1
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	f040 8158 	bne.w	8003752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a9a      	ldr	r2, [pc, #616]	; (8003710 <HAL_GPIO_Init+0x2a0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d05e      	beq.n	800356a <HAL_GPIO_Init+0xfa>
 80034ac:	4a98      	ldr	r2, [pc, #608]	; (8003710 <HAL_GPIO_Init+0x2a0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d875      	bhi.n	800359e <HAL_GPIO_Init+0x12e>
 80034b2:	4a98      	ldr	r2, [pc, #608]	; (8003714 <HAL_GPIO_Init+0x2a4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d058      	beq.n	800356a <HAL_GPIO_Init+0xfa>
 80034b8:	4a96      	ldr	r2, [pc, #600]	; (8003714 <HAL_GPIO_Init+0x2a4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d86f      	bhi.n	800359e <HAL_GPIO_Init+0x12e>
 80034be:	4a96      	ldr	r2, [pc, #600]	; (8003718 <HAL_GPIO_Init+0x2a8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d052      	beq.n	800356a <HAL_GPIO_Init+0xfa>
 80034c4:	4a94      	ldr	r2, [pc, #592]	; (8003718 <HAL_GPIO_Init+0x2a8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d869      	bhi.n	800359e <HAL_GPIO_Init+0x12e>
 80034ca:	4a94      	ldr	r2, [pc, #592]	; (800371c <HAL_GPIO_Init+0x2ac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d04c      	beq.n	800356a <HAL_GPIO_Init+0xfa>
 80034d0:	4a92      	ldr	r2, [pc, #584]	; (800371c <HAL_GPIO_Init+0x2ac>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d863      	bhi.n	800359e <HAL_GPIO_Init+0x12e>
 80034d6:	4a92      	ldr	r2, [pc, #584]	; (8003720 <HAL_GPIO_Init+0x2b0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d046      	beq.n	800356a <HAL_GPIO_Init+0xfa>
 80034dc:	4a90      	ldr	r2, [pc, #576]	; (8003720 <HAL_GPIO_Init+0x2b0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d85d      	bhi.n	800359e <HAL_GPIO_Init+0x12e>
 80034e2:	2b12      	cmp	r3, #18
 80034e4:	d82a      	bhi.n	800353c <HAL_GPIO_Init+0xcc>
 80034e6:	2b12      	cmp	r3, #18
 80034e8:	d859      	bhi.n	800359e <HAL_GPIO_Init+0x12e>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <HAL_GPIO_Init+0x80>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	0800356b 	.word	0x0800356b
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003557 	.word	0x08003557
 80034fc:	08003599 	.word	0x08003599
 8003500:	0800359f 	.word	0x0800359f
 8003504:	0800359f 	.word	0x0800359f
 8003508:	0800359f 	.word	0x0800359f
 800350c:	0800359f 	.word	0x0800359f
 8003510:	0800359f 	.word	0x0800359f
 8003514:	0800359f 	.word	0x0800359f
 8003518:	0800359f 	.word	0x0800359f
 800351c:	0800359f 	.word	0x0800359f
 8003520:	0800359f 	.word	0x0800359f
 8003524:	0800359f 	.word	0x0800359f
 8003528:	0800359f 	.word	0x0800359f
 800352c:	0800359f 	.word	0x0800359f
 8003530:	0800359f 	.word	0x0800359f
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003561 	.word	0x08003561
 800353c:	4a79      	ldr	r2, [pc, #484]	; (8003724 <HAL_GPIO_Init+0x2b4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003542:	e02c      	b.n	800359e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	623b      	str	r3, [r7, #32]
          break;
 800354a:	e029      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	3304      	adds	r3, #4
 8003552:	623b      	str	r3, [r7, #32]
          break;
 8003554:	e024      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	3308      	adds	r3, #8
 800355c:	623b      	str	r3, [r7, #32]
          break;
 800355e:	e01f      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	330c      	adds	r3, #12
 8003566:	623b      	str	r3, [r7, #32]
          break;
 8003568:	e01a      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003572:	2304      	movs	r3, #4
 8003574:	623b      	str	r3, [r7, #32]
          break;
 8003576:	e013      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003580:	2308      	movs	r3, #8
 8003582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	611a      	str	r2, [r3, #16]
          break;
 800358a:	e009      	b.n	80035a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800358c:	2308      	movs	r3, #8
 800358e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	615a      	str	r2, [r3, #20]
          break;
 8003596:	e003      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003598:	2300      	movs	r3, #0
 800359a:	623b      	str	r3, [r7, #32]
          break;
 800359c:	e000      	b.n	80035a0 <HAL_GPIO_Init+0x130>
          break;
 800359e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2bff      	cmp	r3, #255	; 0xff
 80035a4:	d801      	bhi.n	80035aa <HAL_GPIO_Init+0x13a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	e001      	b.n	80035ae <HAL_GPIO_Init+0x13e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2bff      	cmp	r3, #255	; 0xff
 80035b4:	d802      	bhi.n	80035bc <HAL_GPIO_Init+0x14c>
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	e002      	b.n	80035c2 <HAL_GPIO_Init+0x152>
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	3b08      	subs	r3, #8
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	210f      	movs	r1, #15
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	401a      	ands	r2, r3
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	431a      	orrs	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80b1 	beq.w	8003752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a4c      	ldr	r2, [pc, #304]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003608:	4a48      	ldr	r2, [pc, #288]	; (800372c <HAL_GPIO_Init+0x2bc>)
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	3302      	adds	r3, #2
 8003610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a40      	ldr	r2, [pc, #256]	; (8003730 <HAL_GPIO_Init+0x2c0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_GPIO_Init+0x1ec>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3f      	ldr	r2, [pc, #252]	; (8003734 <HAL_GPIO_Init+0x2c4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00d      	beq.n	8003658 <HAL_GPIO_Init+0x1e8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <HAL_GPIO_Init+0x2c8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <HAL_GPIO_Init+0x1e4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3d      	ldr	r2, [pc, #244]	; (800373c <HAL_GPIO_Init+0x2cc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_GPIO_Init+0x1e0>
 800364c:	2303      	movs	r3, #3
 800364e:	e006      	b.n	800365e <HAL_GPIO_Init+0x1ee>
 8003650:	2304      	movs	r3, #4
 8003652:	e004      	b.n	800365e <HAL_GPIO_Init+0x1ee>
 8003654:	2302      	movs	r3, #2
 8003656:	e002      	b.n	800365e <HAL_GPIO_Init+0x1ee>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_GPIO_Init+0x1ee>
 800365c:	2300      	movs	r3, #0
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	f002 0203 	and.w	r2, r2, #3
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	4093      	lsls	r3, r2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800366e:	492f      	ldr	r1, [pc, #188]	; (800372c <HAL_GPIO_Init+0x2bc>)
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	3302      	adds	r3, #2
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	492c      	ldr	r1, [pc, #176]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e006      	b.n	80036a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	43db      	mvns	r3, r3
 800369e:	4928      	ldr	r1, [pc, #160]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4922      	ldr	r1, [pc, #136]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
 80036bc:	e006      	b.n	80036cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	491e      	ldr	r1, [pc, #120]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4918      	ldr	r1, [pc, #96]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]
 80036e4:	e006      	b.n	80036f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4914      	ldr	r1, [pc, #80]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d021      	beq.n	8003744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_GPIO_Init+0x2d0>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
 800370c:	e021      	b.n	8003752 <HAL_GPIO_Init+0x2e2>
 800370e:	bf00      	nop
 8003710:	10320000 	.word	0x10320000
 8003714:	10310000 	.word	0x10310000
 8003718:	10220000 	.word	0x10220000
 800371c:	10210000 	.word	0x10210000
 8003720:	10120000 	.word	0x10120000
 8003724:	10110000 	.word	0x10110000
 8003728:	40021000 	.word	0x40021000
 800372c:	40010000 	.word	0x40010000
 8003730:	40010800 	.word	0x40010800
 8003734:	40010c00 	.word	0x40010c00
 8003738:	40011000 	.word	0x40011000
 800373c:	40011400 	.word	0x40011400
 8003740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_GPIO_Init+0x304>)
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	43db      	mvns	r3, r3
 800374c:	4909      	ldr	r1, [pc, #36]	; (8003774 <HAL_GPIO_Init+0x304>)
 800374e:	4013      	ands	r3, r2
 8003750:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	3301      	adds	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	f47f ae8e 	bne.w	8003484 <HAL_GPIO_Init+0x14>
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	372c      	adds	r7, #44	; 0x2c
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	e001      	b.n	800379a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	807b      	strh	r3, [r7, #2]
 80037b2:	4613      	mov	r3, r2
 80037b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b6:	787b      	ldrb	r3, [r7, #1]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037c2:	e003      	b.n	80037cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	041a      	lsls	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	611a      	str	r2, [r3, #16]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4013      	ands	r3, r2
 80037ee:	041a      	lsls	r2, r3, #16
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	400b      	ands	r3, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fcf8 	bl	800121c <HAL_GPIO_EXTI_Callback>
  }
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40010400 	.word	0x40010400

08003838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e12b      	b.n	8003aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe fd2a 	bl	80022b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800389a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800389c:	f001 fba0 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 80038a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4a81      	ldr	r2, [pc, #516]	; (8003aac <HAL_I2C_Init+0x274>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d807      	bhi.n	80038bc <HAL_I2C_Init+0x84>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a80      	ldr	r2, [pc, #512]	; (8003ab0 <HAL_I2C_Init+0x278>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bf94      	ite	ls
 80038b4:	2301      	movls	r3, #1
 80038b6:	2300      	movhi	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e006      	b.n	80038ca <HAL_I2C_Init+0x92>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a7d      	ldr	r2, [pc, #500]	; (8003ab4 <HAL_I2C_Init+0x27c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	bf94      	ite	ls
 80038c4:	2301      	movls	r3, #1
 80038c6:	2300      	movhi	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0e7      	b.n	8003aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a78      	ldr	r2, [pc, #480]	; (8003ab8 <HAL_I2C_Init+0x280>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	0c9b      	lsrs	r3, r3, #18
 80038dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a6a      	ldr	r2, [pc, #424]	; (8003aac <HAL_I2C_Init+0x274>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d802      	bhi.n	800390c <HAL_I2C_Init+0xd4>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3301      	adds	r3, #1
 800390a:	e009      	b.n	8003920 <HAL_I2C_Init+0xe8>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	4a69      	ldr	r2, [pc, #420]	; (8003abc <HAL_I2C_Init+0x284>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	3301      	adds	r3, #1
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	430b      	orrs	r3, r1
 8003926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	495c      	ldr	r1, [pc, #368]	; (8003aac <HAL_I2C_Init+0x274>)
 800393c:	428b      	cmp	r3, r1
 800393e:	d819      	bhi.n	8003974 <HAL_I2C_Init+0x13c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e59      	subs	r1, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fbb1 f3f3 	udiv	r3, r1, r3
 800394e:	1c59      	adds	r1, r3, #1
 8003950:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003954:	400b      	ands	r3, r1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_I2C_Init+0x138>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1e59      	subs	r1, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fbb1 f3f3 	udiv	r3, r1, r3
 8003968:	3301      	adds	r3, #1
 800396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396e:	e051      	b.n	8003a14 <HAL_I2C_Init+0x1dc>
 8003970:	2304      	movs	r3, #4
 8003972:	e04f      	b.n	8003a14 <HAL_I2C_Init+0x1dc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d111      	bne.n	80039a0 <HAL_I2C_Init+0x168>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e012      	b.n	80039c6 <HAL_I2C_Init+0x18e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	0099      	lsls	r1, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Init+0x196>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e022      	b.n	8003a14 <HAL_I2C_Init+0x1dc>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10e      	bne.n	80039f4 <HAL_I2C_Init+0x1bc>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1e58      	subs	r0, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	440b      	add	r3, r1
 80039e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f2:	e00f      	b.n	8003a14 <HAL_I2C_Init+0x1dc>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1e58      	subs	r0, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	0099      	lsls	r1, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	6809      	ldr	r1, [r1, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6911      	ldr	r1, [r2, #16]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68d2      	ldr	r2, [r2, #12]
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	000186a0 	.word	0x000186a0
 8003ab0:	001e847f 	.word	0x001e847f
 8003ab4:	003d08ff 	.word	0x003d08ff
 8003ab8:	431bde83 	.word	0x431bde83
 8003abc:	10624dd3 	.word	0x10624dd3

08003ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ada:	f7fe fe39 	bl	8002750 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	f040 80d9 	bne.w	8003ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2319      	movs	r3, #25
 8003af4:	2201      	movs	r2, #1
 8003af6:	496d      	ldr	r1, [pc, #436]	; (8003cac <HAL_I2C_Mem_Write+0x1ec>)
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fcc1 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0cc      	b.n	8003ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Mem_Write+0x56>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0c5      	b.n	8003ca2 <HAL_I2C_Mem_Write+0x1e2>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d007      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2221      	movs	r2, #33	; 0x21
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a4d      	ldr	r2, [pc, #308]	; (8003cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b7e:	88f8      	ldrh	r0, [r7, #6]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	8979      	ldrh	r1, [r7, #10]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 faf8 	bl	8004184 <I2C_RequestMemoryWrite>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d052      	beq.n	8003c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e081      	b.n	8003ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fd42 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d107      	bne.n	8003bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d11b      	bne.n	8003c40 <HAL_I2C_Mem_Write+0x180>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1aa      	bne.n	8003b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fd2e 	bl	80046ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d107      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e016      	b.n	8003ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	00100002 	.word	0x00100002
 8003cb0:	ffff0000 	.word	0xffff0000

08003cb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	; 0x30
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	813b      	strh	r3, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cd2:	f7fe fd3d 	bl	8002750 <HAL_GetTick>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	f040 8244 	bne.w	800416e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2319      	movs	r3, #25
 8003cec:	2201      	movs	r2, #1
 8003cee:	4982      	ldr	r1, [pc, #520]	; (8003ef8 <HAL_I2C_Mem_Read+0x244>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fbc5 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e237      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x5a>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e230      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d007      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2222      	movs	r2, #34	; 0x22
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a62      	ldr	r2, [pc, #392]	; (8003efc <HAL_I2C_Mem_Read+0x248>)
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d76:	88f8      	ldrh	r0, [r7, #6]
 8003d78:	893a      	ldrh	r2, [r7, #8]
 8003d7a:	8979      	ldrh	r1, [r7, #10]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fa92 	bl	80042b0 <I2C_RequestMemoryRead>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1ec      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e1c0      	b.n	8004148 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11e      	bne.n	8003e0c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dde:	b672      	cpsid	i
}
 8003de0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e08:	b662      	cpsie	i
}
 8003e0a:	e035      	b.n	8003e78 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11e      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e24:	b672      	cpsid	i
}
 8003e26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e4e:	b662      	cpsie	i
}
 8003e50:	e012      	b.n	8003e78 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e78:	e166      	b.n	8004148 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	f200 811f 	bhi.w	80040c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d123      	bne.n	8003ed4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fc4d 	bl	8004730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e167      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ed2:	e139      	b.n	8004148 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d152      	bne.n	8003f82 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4906      	ldr	r1, [pc, #24]	; (8003f00 <HAL_I2C_Mem_Read+0x24c>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 faca 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e13c      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
 8003ef6:	bf00      	nop
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000
 8003f00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f04:	b672      	cpsid	i
}
 8003f06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f4a:	b662      	cpsie	i
}
 8003f4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f80:	e0e2      	b.n	8004148 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	497b      	ldr	r1, [pc, #492]	; (8004178 <HAL_I2C_Mem_Read+0x4c4>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa77 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0e9      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fac:	b672      	cpsid	i
}
 8003fae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fe2:	4b66      	ldr	r3, [pc, #408]	; (800417c <HAL_I2C_Mem_Read+0x4c8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	08db      	lsrs	r3, r3, #3
 8003fe8:	4a65      	ldr	r2, [pc, #404]	; (8004180 <HAL_I2C_Mem_Read+0x4cc>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0a1a      	lsrs	r2, r3, #8
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00da      	lsls	r2, r3, #3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d118      	bne.n	800403a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800402a:	b662      	cpsie	i
}
 800402c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e09a      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d1d9      	bne.n	8003ffc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800408a:	b662      	cpsie	i
}
 800408c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c0:	e042      	b.n	8004148 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fb32 	bl	8004730 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e04c      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d118      	bne.n	8004148 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	f47f ae94 	bne.w	8003e7a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	00010004 	.word	0x00010004
 800417c:	20000004 	.word	0x20000004
 8004180:	14f8b589 	.word	0x14f8b589

08004184 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	4608      	mov	r0, r1
 800418e:	4611      	mov	r1, r2
 8004190:	461a      	mov	r2, r3
 8004192:	4603      	mov	r3, r0
 8004194:	817b      	strh	r3, [r7, #10]
 8004196:	460b      	mov	r3, r1
 8004198:	813b      	strh	r3, [r7, #8]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f960 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d103      	bne.n	80041de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e05f      	b.n	80042a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	492d      	ldr	r1, [pc, #180]	; (80042ac <I2C_RequestMemoryWrite+0x128>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f998 	bl	800452e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e04c      	b.n	80042a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	6a39      	ldr	r1, [r7, #32]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa02 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b04      	cmp	r3, #4
 8004234:	d107      	bne.n	8004246 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e02b      	b.n	80042a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004250:	893b      	ldrh	r3, [r7, #8]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	611a      	str	r2, [r3, #16]
 800425a:	e021      	b.n	80042a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800425c:	893b      	ldrh	r3, [r7, #8]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	b29b      	uxth	r3, r3
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f9dc 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b04      	cmp	r3, #4
 8004280:	d107      	bne.n	8004292 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e005      	b.n	80042a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004296:	893b      	ldrh	r3, [r7, #8]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	00010002 	.word	0x00010002

080042b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f8c2 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d103      	bne.n	800431a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0aa      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800432c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	4952      	ldr	r1, [pc, #328]	; (800447c <I2C_RequestMemoryRead+0x1cc>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f8fa 	bl	800452e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e097      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	6a39      	ldr	r1, [r7, #32]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f964 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b04      	cmp	r3, #4
 8004370:	d107      	bne.n	8004382 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e076      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	e021      	b.n	80043dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004398:	893b      	ldrh	r3, [r7, #8]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	b29b      	uxth	r3, r3
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	6a39      	ldr	r1, [r7, #32]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f93e 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d107      	bne.n	80043ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e050      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043d2:	893b      	ldrh	r3, [r7, #8]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043de:	6a39      	ldr	r1, [r7, #32]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f923 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d107      	bne.n	8004404 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e035      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004416:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2200      	movs	r2, #0
 8004420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f82b 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443e:	d103      	bne.n	8004448 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e013      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	4906      	ldr	r1, [pc, #24]	; (800447c <I2C_RequestMemoryRead+0x1cc>)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f863 	bl	800452e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	00010002 	.word	0x00010002

08004480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004490:	e025      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004498:	d021      	beq.n	80044de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fe f959 	bl	8002750 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e023      	b.n	8004526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10d      	bne.n	8004504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	e00c      	b.n	800451e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d0b6      	beq.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800453c:	e051      	b.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454c:	d123      	bne.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e046      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459c:	d021      	beq.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fe f8d7 	bl	8002750 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d116      	bne.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e020      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e00b      	b.n	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	43da      	mvns	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d18d      	bne.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	e02d      	b.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f8ce 	bl	80047dc <I2C_IsAcknowledgeFailed>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e02d      	b.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004650:	d021      	beq.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe f87d 	bl	8002750 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d116      	bne.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e007      	b.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d1ca      	bne.n	800463a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ba:	e02d      	b.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f88d 	bl	80047dc <I2C_IsAcknowledgeFailed>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e02d      	b.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d2:	d021      	beq.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fe f83c 	bl	8002750 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e007      	b.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b04      	cmp	r3, #4
 8004724:	d1ca      	bne.n	80046bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800473c:	e042      	b.n	80047c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b10      	cmp	r3, #16
 800474a:	d119      	bne.n	8004780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0210 	mvn.w	r2, #16
 8004754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e029      	b.n	80047d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004780:	f7fd ffe6 	bl	8002750 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d116      	bne.n	80047c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e007      	b.n	80047d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d1b5      	bne.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d11b      	bne.n	800482c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e272      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8087 	beq.w	8004966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004858:	4b92      	ldr	r3, [pc, #584]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b04      	cmp	r3, #4
 8004862:	d00c      	beq.n	800487e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004864:	4b8f      	ldr	r3, [pc, #572]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b08      	cmp	r3, #8
 800486e:	d112      	bne.n	8004896 <HAL_RCC_OscConfig+0x5e>
 8004870:	4b8c      	ldr	r3, [pc, #560]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d10b      	bne.n	8004896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487e:	4b89      	ldr	r3, [pc, #548]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d06c      	beq.n	8004964 <HAL_RCC_OscConfig+0x12c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d168      	bne.n	8004964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e24c      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x76>
 80048a0:	4b80      	ldr	r3, [pc, #512]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a7f      	ldr	r2, [pc, #508]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e02e      	b.n	800490c <HAL_RCC_OscConfig+0xd4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x98>
 80048b6:	4b7b      	ldr	r3, [pc, #492]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7a      	ldr	r2, [pc, #488]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b78      	ldr	r3, [pc, #480]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a77      	ldr	r2, [pc, #476]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xd4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0xbc>
 80048da:	4b72      	ldr	r3, [pc, #456]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a71      	ldr	r2, [pc, #452]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xd4>
 80048f4:	4b6b      	ldr	r3, [pc, #428]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6a      	ldr	r2, [pc, #424]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b68      	ldr	r3, [pc, #416]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fd ff1c 	bl	8002750 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fd ff18 	bl	8002750 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e200      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xe4>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fd ff08 	bl	8002750 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004944:	f7fd ff04 	bl	8002750 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	; 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1ec      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	4b53      	ldr	r3, [pc, #332]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x10c>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d063      	beq.n	8004a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004972:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800497e:	4b49      	ldr	r3, [pc, #292]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b08      	cmp	r3, #8
 8004988:	d11c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x18c>
 800498a:	4b46      	ldr	r3, [pc, #280]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d116      	bne.n	80049c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCC_OscConfig+0x176>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e1c0      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4939      	ldr	r1, [pc, #228]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c2:	e03a      	b.n	8004a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049cc:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d2:	f7fd febd 	bl	8002750 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049da:	f7fd feb9 	bl	8002750 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e1a1      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4927      	ldr	r1, [pc, #156]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
 8004a0c:	e015      	b.n	8004a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0e:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fd fe9c 	bl	8002750 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7fd fe98 	bl	8002750 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e180      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d03a      	beq.n	8004abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d019      	beq.n	8004a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_RCC_OscConfig+0x274>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a54:	f7fd fe7c 	bl	8002750 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fe78 	bl	8002750 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e160      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f000 faf4 	bl	8005068 <RCC_Delay>
 8004a80:	e01c      	b.n	8004abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCC_OscConfig+0x274>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a88:	f7fd fe62 	bl	8002750 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8e:	e00f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a90:	f7fd fe5e 	bl	8002750 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d908      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e146      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	42420000 	.word	0x42420000
 8004aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b92      	ldr	r3, [pc, #584]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e9      	bne.n	8004a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a6 	beq.w	8004c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b8b      	ldr	r3, [pc, #556]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	4b88      	ldr	r3, [pc, #544]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4a87      	ldr	r2, [pc, #540]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	61d3      	str	r3, [r2, #28]
 8004ae6:	4b85      	ldr	r3, [pc, #532]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b82      	ldr	r3, [pc, #520]	; (8004d00 <HAL_RCC_OscConfig+0x4c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d118      	bne.n	8004b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b02:	4b7f      	ldr	r3, [pc, #508]	; (8004d00 <HAL_RCC_OscConfig+0x4c8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a7e      	ldr	r2, [pc, #504]	; (8004d00 <HAL_RCC_OscConfig+0x4c8>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0e:	f7fd fe1f 	bl	8002750 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fd fe1b 	bl	8002750 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b64      	cmp	r3, #100	; 0x64
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e103      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <HAL_RCC_OscConfig+0x4c8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x312>
 8004b3c:	4b6f      	ldr	r3, [pc, #444]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a6e      	ldr	r2, [pc, #440]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6213      	str	r3, [r2, #32]
 8004b48:	e02d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x36e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x334>
 8004b52:	4b6a      	ldr	r3, [pc, #424]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4a69      	ldr	r2, [pc, #420]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	6213      	str	r3, [r2, #32]
 8004b5e:	4b67      	ldr	r3, [pc, #412]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4a66      	ldr	r2, [pc, #408]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	6213      	str	r3, [r2, #32]
 8004b6a:	e01c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x36e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d10c      	bne.n	8004b8e <HAL_RCC_OscConfig+0x356>
 8004b74:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4a60      	ldr	r2, [pc, #384]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	f043 0304 	orr.w	r3, r3, #4
 8004b7e:	6213      	str	r3, [r2, #32]
 8004b80:	4b5e      	ldr	r3, [pc, #376]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4a5d      	ldr	r2, [pc, #372]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	e00b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x36e>
 8004b8e:	4b5b      	ldr	r3, [pc, #364]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4a5a      	ldr	r2, [pc, #360]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	6213      	str	r3, [r2, #32]
 8004b9a:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4a57      	ldr	r2, [pc, #348]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004ba0:	f023 0304 	bic.w	r3, r3, #4
 8004ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d015      	beq.n	8004bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bae:	f7fd fdcf 	bl	8002750 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fd fdcb 	bl	8002750 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0b1      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	4b4b      	ldr	r3, [pc, #300]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ee      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x37e>
 8004bd8:	e014      	b.n	8004c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fd fdb9 	bl	8002750 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fd fdb5 	bl	8002750 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e09b      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf8:	4b40      	ldr	r3, [pc, #256]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ee      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0a:	4b3c      	ldr	r3, [pc, #240]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4a3b      	ldr	r2, [pc, #236]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8087 	beq.w	8004d2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c20:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d061      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d146      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c34:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <HAL_RCC_OscConfig+0x4cc>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fd89 	bl	8002750 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd fd85 	bl	8002750 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e06d      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c54:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4921      	ldr	r1, [pc, #132]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7c:	4b1f      	ldr	r3, [pc, #124]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a19      	ldr	r1, [r3, #32]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	491b      	ldr	r1, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCC_OscConfig+0x4cc>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fd fd59 	bl	8002750 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fd fd55 	bl	8002750 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e03d      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x46a>
 8004cc0:	e035      	b.n	8004d2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <HAL_RCC_OscConfig+0x4cc>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fd42 	bl	8002750 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd fd3e 	bl	8002750 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e026      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_OscConfig+0x4c4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x498>
 8004cee:	e01e      	b.n	8004d2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e019      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_OscConfig+0x500>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d106      	bne.n	8004d2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000

08004d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0d0      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d50:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d910      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b67      	ldr	r3, [pc, #412]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	4965      	ldr	r1, [pc, #404]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b63      	ldr	r3, [pc, #396]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0b8      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d98:	4b59      	ldr	r3, [pc, #356]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a58      	ldr	r2, [pc, #352]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db0:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a52      	ldr	r2, [pc, #328]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	494d      	ldr	r1, [pc, #308]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d040      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d107      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d115      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfa:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e073      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0a:	4b3d      	ldr	r3, [pc, #244]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e06b      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f023 0203 	bic.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4936      	ldr	r1, [pc, #216]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e2c:	f7fd fc90 	bl	8002750 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f7fd fc8c 	bl	8002750 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e053      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	4b2d      	ldr	r3, [pc, #180]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 020c 	and.w	r2, r3, #12
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d1eb      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b27      	ldr	r3, [pc, #156]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d210      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 0207 	bic.w	r2, r3, #7
 8004e72:	4922      	ldr	r1, [pc, #136]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e032      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e98:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4916      	ldr	r1, [pc, #88]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	490e      	ldr	r1, [pc, #56]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004eca:	f000 f821 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	490a      	ldr	r1, [pc, #40]	; (8004f04 <HAL_RCC_ClockConfig+0x1c8>)
 8004edc:	5ccb      	ldrb	r3, [r1, r3]
 8004ede:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1cc>)
 8004ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_ClockConfig+0x1d0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fd fac6 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40022000 	.word	0x40022000
 8004f00:	40021000 	.word	0x40021000
 8004f04:	0800aba0 	.word	0x0800aba0
 8004f08:	20000004 	.word	0x20000004
 8004f0c:	20000008 	.word	0x20000008

08004f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f10:	b490      	push	{r4, r7}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f16:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xac>)
 8004f18:	1d3c      	adds	r4, r7, #4
 8004f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f20:	f240 2301 	movw	r3, #513	; 0x201
 8004f24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d002      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x40>
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0x46>
 8004f4e:	e02b      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f50:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f52:	623b      	str	r3, [r7, #32]
      break;
 8004f54:	e02b      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	0c9b      	lsrs	r3, r3, #18
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	3328      	adds	r3, #40	; 0x28
 8004f60:	443b      	add	r3, r7
 8004f62:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f66:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d012      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f72:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	0c5b      	lsrs	r3, r3, #17
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	3328      	adds	r3, #40	; 0x28
 8004f7e:	443b      	add	r3, r7
 8004f80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4a0e      	ldr	r2, [pc, #56]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f8a:	fb03 f202 	mul.w	r2, r3, r2
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
 8004f96:	e004      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	623b      	str	r3, [r7, #32]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004faa:	623b      	str	r3, [r7, #32]
      break;
 8004fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fae:	6a3b      	ldr	r3, [r7, #32]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc90      	pop	{r4, r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	0800a800 	.word	0x0800a800
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	007a1200 	.word	0x007a1200
 8004fc8:	003d0900 	.word	0x003d0900

08004fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd0:	4b02      	ldr	r3, [pc, #8]	; (8004fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	20000004 	.word	0x20000004

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fe4:	f7ff fff2 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	0800abb0 	.word	0x0800abb0

08005008 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	220f      	movs	r2, #15
 8005016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_RCC_GetClockConfig+0x58>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0203 	and.w	r2, r3, #3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <HAL_RCC_GetClockConfig+0x58>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_GetClockConfig+0x58>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <HAL_RCC_GetClockConfig+0x58>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0207 	and.w	r2, r3, #7
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	40021000 	.word	0x40021000
 8005064:	40022000 	.word	0x40022000

08005068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <RCC_Delay+0x34>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <RCC_Delay+0x38>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a5b      	lsrs	r3, r3, #9
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005084:	bf00      	nop
  }
  while (Delay --);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1e5a      	subs	r2, r3, #1
 800508a:	60fa      	str	r2, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f9      	bne.n	8005084 <RCC_Delay+0x1c>
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	20000004 	.word	0x20000004
 80050a0:	10624dd3 	.word	0x10624dd3

080050a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d07d      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050c0:	2300      	movs	r3, #0
 80050c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c4:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10d      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d0:	4b4c      	ldr	r3, [pc, #304]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4a4b      	ldr	r2, [pc, #300]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050da:	61d3      	str	r3, [r2, #28]
 80050dc:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ec:	4b46      	ldr	r3, [pc, #280]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d118      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f8:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a42      	ldr	r2, [pc, #264]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005104:	f7fd fb24 	bl	8002750 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510a:	e008      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510c:	f7fd fb20 	bl	8002750 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e06d      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511e:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800512a:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d02e      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	429a      	cmp	r2, r3
 8005146:	d027      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005148:	4b2e      	ldr	r3, [pc, #184]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005152:	4b2e      	ldr	r3, [pc, #184]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005158:	4b2c      	ldr	r3, [pc, #176]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d014      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fd faef 	bl	8002750 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fd faeb 	bl	8002750 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e036      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ee      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4917      	ldr	r1, [pc, #92]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d105      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	490b      	ldr	r1, [pc, #44]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4904      	ldr	r1, [pc, #16]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	40007000 	.word	0x40007000
 800520c:	42420440 	.word	0x42420440

08005210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e041      	b.n	80052a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fd f87e 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 fee6 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d001      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e03a      	b.n	800533e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a18      	ldr	r2, [pc, #96]	; (8005348 <HAL_TIM_Base_Start_IT+0x98>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x58>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x58>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <HAL_TIM_Base_Start_IT+0x9c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x58>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <HAL_TIM_Base_Start_IT+0xa0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d111      	bne.n	800532c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b06      	cmp	r3, #6
 8005318:	d010      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	e007      	b.n	800533c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800

08005354 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	f241 1311 	movw	r3, #4369	; 0x1111
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10f      	bne.n	800539c <HAL_TIM_Base_Stop_IT+0x48>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a1a      	ldr	r2, [r3, #32]
 8005382:	f240 4344 	movw	r3, #1092	; 0x444
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <HAL_TIM_Base_Stop_IT+0x48>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e041      	b.n	8005446 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f839 	bl	800544e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fe16 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_TIM_PWM_Start_DMA+0x28>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e022      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x6e>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d109      	bne.n	80054a2 <HAL_TIM_PWM_Start_DMA+0x42>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e015      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x6e>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d109      	bne.n	80054bc <HAL_TIM_PWM_Start_DMA+0x5c>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e008      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x6e>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	e14e      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_TIM_PWM_Start_DMA+0x90>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e022      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0xd6>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d109      	bne.n	800550a <HAL_TIM_PWM_Start_DMA+0xaa>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e015      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0xd6>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start_DMA+0xc4>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e008      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0xd6>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d024      	beq.n	8005584 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start_DMA+0xea>
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e114      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start_DMA+0xfa>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	e016      	b.n	8005588 <HAL_TIM_PWM_Start_DMA+0x128>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start_DMA+0x10a>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	e00e      	b.n	8005588 <HAL_TIM_PWM_Start_DMA+0x128>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start_DMA+0x11a>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	e006      	b.n	8005588 <HAL_TIM_PWM_Start_DMA+0x128>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005582:	e001      	b.n	8005588 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0f5      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	f200 80ae 	bhi.w	80056ec <HAL_TIM_PWM_Start_DMA+0x28c>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <HAL_TIM_PWM_Start_DMA+0x138>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080056ed 	.word	0x080056ed
 80055a0:	080056ed 	.word	0x080056ed
 80055a4:	080056ed 	.word	0x080056ed
 80055a8:	08005615 	.word	0x08005615
 80055ac:	080056ed 	.word	0x080056ed
 80055b0:	080056ed 	.word	0x080056ed
 80055b4:	080056ed 	.word	0x080056ed
 80055b8:	0800565d 	.word	0x0800565d
 80055bc:	080056ed 	.word	0x080056ed
 80055c0:	080056ed 	.word	0x080056ed
 80055c4:	080056ed 	.word	0x080056ed
 80055c8:	080056a5 	.word	0x080056a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	4a6a      	ldr	r2, [pc, #424]	; (800577c <HAL_TIM_PWM_Start_DMA+0x31c>)
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	4a69      	ldr	r2, [pc, #420]	; (8005780 <HAL_TIM_PWM_Start_DMA+0x320>)
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	4a68      	ldr	r2, [pc, #416]	; (8005784 <HAL_TIM_PWM_Start_DMA+0x324>)
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3334      	adds	r3, #52	; 0x34
 80055f0:	461a      	mov	r2, r3
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	f7fd fd32 	bl	800305c <HAL_DMA_Start_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e0b8      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005610:	60da      	str	r2, [r3, #12]
      break;
 8005612:	e06c      	b.n	80056ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_TIM_PWM_Start_DMA+0x31c>)
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	4a57      	ldr	r2, [pc, #348]	; (8005780 <HAL_TIM_PWM_Start_DMA+0x320>)
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	4a56      	ldr	r2, [pc, #344]	; (8005784 <HAL_TIM_PWM_Start_DMA+0x324>)
 800562a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3338      	adds	r3, #56	; 0x38
 8005638:	461a      	mov	r2, r3
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	f7fd fd0e 	bl	800305c <HAL_DMA_Start_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e094      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005658:	60da      	str	r2, [r3, #12]
      break;
 800565a:	e048      	b.n	80056ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	4a46      	ldr	r2, [pc, #280]	; (800577c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a45      	ldr	r2, [pc, #276]	; (8005780 <HAL_TIM_PWM_Start_DMA+0x320>)
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a44      	ldr	r2, [pc, #272]	; (8005784 <HAL_TIM_PWM_Start_DMA+0x324>)
 8005672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	333c      	adds	r3, #60	; 0x3c
 8005680:	461a      	mov	r2, r3
 8005682:	887b      	ldrh	r3, [r7, #2]
 8005684:	f7fd fcea 	bl	800305c <HAL_DMA_Start_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e070      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a0:	60da      	str	r2, [r3, #12]
      break;
 80056a2:	e024      	b.n	80056ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	4a34      	ldr	r2, [pc, #208]	; (800577c <HAL_TIM_PWM_Start_DMA+0x31c>)
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	4a33      	ldr	r2, [pc, #204]	; (8005780 <HAL_TIM_PWM_Start_DMA+0x320>)
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	4a32      	ldr	r2, [pc, #200]	; (8005784 <HAL_TIM_PWM_Start_DMA+0x324>)
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3340      	adds	r3, #64	; 0x40
 80056c8:	461a      	mov	r2, r3
 80056ca:	887b      	ldrh	r3, [r7, #2]
 80056cc:	f7fd fcc6 	bl	800305c <HAL_DMA_Start_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e04c      	b.n	8005774 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056e8:	60da      	str	r2, [r3, #12]
      break;
 80056ea:	e000      	b.n	80056ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80056ec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2201      	movs	r2, #1
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ff12 	bl	8006520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <HAL_TIM_PWM_Start_DMA+0x328>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d107      	bne.n	8005716 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_TIM_PWM_Start_DMA+0x328>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_TIM_PWM_Start_DMA+0x2de>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005728:	d009      	beq.n	800573e <HAL_TIM_PWM_Start_DMA+0x2de>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIM_PWM_Start_DMA+0x2de>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <HAL_TIM_PWM_Start_DMA+0x330>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d111      	bne.n	8005762 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d010      	beq.n	8005772 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005760:	e007      	b.n	8005772 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	08005f11 	.word	0x08005f11
 8005780:	08005fb9 	.word	0x08005fb9
 8005784:	08005e7f 	.word	0x08005e7f
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800

08005794 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d855      	bhi.n	8005850 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_TIM_PWM_Stop_DMA+0x18>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	08005851 	.word	0x08005851
 80057b4:	08005851 	.word	0x08005851
 80057b8:	08005851 	.word	0x08005851
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	08005851 	.word	0x08005851
 80057c4:	08005851 	.word	0x08005851
 80057c8:	08005851 	.word	0x08005851
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005851 	.word	0x08005851
 80057d4:	08005851 	.word	0x08005851
 80057d8:	08005851 	.word	0x08005851
 80057dc:	08005835 	.word	0x08005835
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd fc91 	bl	800311c <HAL_DMA_Abort_IT>
      break;
 80057fa:	e02a      	b.n	8005852 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd fc83 	bl	800311c <HAL_DMA_Abort_IT>
      break;
 8005816:	e01c      	b.n	8005852 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005826:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4618      	mov	r0, r3
 800582e:	f7fd fc75 	bl	800311c <HAL_DMA_Abort_IT>
      break;
 8005832:	e00e      	b.n	8005852 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005842:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	4618      	mov	r0, r3
 800584a:	f7fd fc67 	bl	800311c <HAL_DMA_Abort_IT>
      break;
 800584e:	e000      	b.n	8005852 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8005850:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fe60 	bl	8006520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a29      	ldr	r2, [pc, #164]	; (800590c <HAL_TIM_PWM_Stop_DMA+0x178>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d117      	bne.n	800589a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f241 1311 	movw	r3, #4369	; 0x1111
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_TIM_PWM_Stop_DMA+0x106>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f240 4344 	movw	r3, #1092	; 0x444
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <HAL_TIM_PWM_Stop_DMA+0x106>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <HAL_TIM_PWM_Stop_DMA+0x136>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f240 4344 	movw	r3, #1092	; 0x444
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_PWM_Stop_DMA+0x136>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Stop_DMA+0x146>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d8:	e013      	b.n	8005902 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Stop_DMA+0x156>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e8:	e00b      	b.n	8005902 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Stop_DMA+0x166>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	e003      	b.n	8005902 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40012c00 	.word	0x40012c00

08005910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0202 	mvn.w	r2, #2
 800593c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa6f 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa62 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fa fc91 	bl	8000288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b04      	cmp	r3, #4
 8005978:	d122      	bne.n	80059c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d11b      	bne.n	80059c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0204 	mvn.w	r2, #4
 8005990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fa45 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 80059ac:	e005      	b.n	80059ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa38 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fa fc67 	bl	8000288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0208 	mvn.w	r2, #8
 80059e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2204      	movs	r2, #4
 80059ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fa1b 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa0e 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fa fc3d 	bl	8000288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0210 	mvn.w	r2, #16
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f9f1 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f9e4 	bl	8005e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fa fc13 	bl	8000288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0201 	mvn.w	r2, #1
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc fafa 	bl	8002088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b80      	cmp	r3, #128	; 0x80
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fdbb 	bl	8006636 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f9b7 	bl	8005e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0220 	mvn.w	r2, #32
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fd86 	bl	8006624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e0ac      	b.n	8005c94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	f200 809f 	bhi.w	8005c88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b85 	.word	0x08005b85
 8005b54:	08005c89 	.word	0x08005c89
 8005b58:	08005c89 	.word	0x08005c89
 8005b5c:	08005c89 	.word	0x08005c89
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005c89 	.word	0x08005c89
 8005b68:	08005c89 	.word	0x08005c89
 8005b6c:	08005c89 	.word	0x08005c89
 8005b70:	08005c07 	.word	0x08005c07
 8005b74:	08005c89 	.word	0x08005c89
 8005b78:	08005c89 	.word	0x08005c89
 8005b7c:	08005c89 	.word	0x08005c89
 8005b80:	08005c47 	.word	0x08005c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 faaa 	bl	80060e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0204 	bic.w	r2, r2, #4
 8005bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	619a      	str	r2, [r3, #24]
      break;
 8005bc2:	e062      	b.n	8005c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 faf0 	bl	80061b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6999      	ldr	r1, [r3, #24]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	021a      	lsls	r2, r3, #8
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	619a      	str	r2, [r3, #24]
      break;
 8005c04:	e041      	b.n	8005c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fb39 	bl	8006284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0208 	orr.w	r2, r2, #8
 8005c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0204 	bic.w	r2, r2, #4
 8005c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	61da      	str	r2, [r3, #28]
      break;
 8005c44:	e021      	b.n	8005c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fb83 	bl	8006358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69d9      	ldr	r1, [r3, #28]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	021a      	lsls	r2, r3, #8
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	61da      	str	r2, [r3, #28]
      break;
 8005c86:	e000      	b.n	8005c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIM_ConfigClockSource+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e0b3      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x180>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cec:	d03e      	beq.n	8005d6c <HAL_TIM_ConfigClockSource+0xd0>
 8005cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf2:	f200 8087 	bhi.w	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfa:	f000 8085 	beq.w	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d87f      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d04:	2b70      	cmp	r3, #112	; 0x70
 8005d06:	d01a      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0xa2>
 8005d08:	2b70      	cmp	r3, #112	; 0x70
 8005d0a:	d87b      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d0c:	2b60      	cmp	r3, #96	; 0x60
 8005d0e:	d050      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x116>
 8005d10:	2b60      	cmp	r3, #96	; 0x60
 8005d12:	d877      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d14:	2b50      	cmp	r3, #80	; 0x50
 8005d16:	d03c      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0xf6>
 8005d18:	2b50      	cmp	r3, #80	; 0x50
 8005d1a:	d873      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d058      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x136>
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d86f      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d064      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x156>
 8005d28:	2b30      	cmp	r3, #48	; 0x30
 8005d2a:	d86b      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d060      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x156>
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d867      	bhi.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d05c      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x156>
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d05a      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d3c:	e062      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6899      	ldr	r1, [r3, #8]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f000 fbc8 	bl	80064e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
      break;
 8005d6a:	e04e      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6899      	ldr	r1, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f000 fbb1 	bl	80064e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d8e:	609a      	str	r2, [r3, #8]
      break;
 8005d90:	e03b      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 fb28 	bl	80063f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2150      	movs	r1, #80	; 0x50
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fb7f 	bl	80064ae <TIM_ITRx_SetConfig>
      break;
 8005db0:	e02b      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 fb46 	bl	8006450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2160      	movs	r1, #96	; 0x60
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fb6f 	bl	80064ae <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e01b      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6859      	ldr	r1, [r3, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f000 fb08 	bl	80063f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2140      	movs	r1, #64	; 0x40
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fb5f 	bl	80064ae <TIM_ITRx_SetConfig>
      break;
 8005df0:	e00b      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f000 fb56 	bl	80064ae <TIM_ITRx_SetConfig>
        break;
 8005e02:	e002      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e04:	bf00      	nop
 8005e06:	e000      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d107      	bne.n	8005ea6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea4:	e02a      	b.n	8005efc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d107      	bne.n	8005ec0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebe:	e01d      	b.n	8005efc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d107      	bne.n	8005eda <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed8:	e010      	b.n	8005efc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d107      	bne.n	8005ef4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef2:	e003      	b.n	8005efc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff ffb5 	bl	8005e6c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d10b      	bne.n	8005f40 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d136      	bne.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3e:	e031      	b.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d10b      	bne.n	8005f62 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d125      	bne.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f60:	e020      	b.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d10b      	bne.n	8005f84 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2204      	movs	r2, #4
 8005f70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d114      	bne.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f82:	e00f      	b.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d10a      	bne.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2208      	movs	r2, #8
 8005f92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7fa f96f 	bl	8000288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d103      	bne.n	8005fd8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	771a      	strb	r2, [r3, #28]
 8005fd6:	e019      	b.n	800600c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d103      	bne.n	8005fea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	771a      	strb	r2, [r3, #28]
 8005fe8:	e010      	b.n	800600c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d103      	bne.n	8005ffc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	771a      	strb	r2, [r3, #28]
 8005ffa:	e007      	b.n	800600c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d102      	bne.n	800600c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2208      	movs	r2, #8
 800600a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff ff1b 	bl	8005e48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a29      	ldr	r2, [pc, #164]	; (80060d8 <TIM_Base_SetConfig+0xb8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0x30>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0x30>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a26      	ldr	r2, [pc, #152]	; (80060dc <TIM_Base_SetConfig+0xbc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0x30>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <TIM_Base_SetConfig+0xc0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d108      	bne.n	8006062 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <TIM_Base_SetConfig+0xb8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0x62>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0x62>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <TIM_Base_SetConfig+0xbc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0x62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <TIM_Base_SetConfig+0xc0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a07      	ldr	r2, [pc, #28]	; (80060d8 <TIM_Base_SetConfig+0xb8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d103      	bne.n	80060c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	615a      	str	r2, [r3, #20]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800

080060e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a1c      	ldr	r2, [pc, #112]	; (80061ac <TIM_OC1_SetConfig+0xc8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10c      	bne.n	800615a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0308 	bic.w	r3, r3, #8
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a13      	ldr	r2, [pc, #76]	; (80061ac <TIM_OC1_SetConfig+0xc8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d111      	bne.n	8006186 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	621a      	str	r2, [r3, #32]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40012c00 	.word	0x40012c00

080061b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0210 	bic.w	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0320 	bic.w	r3, r3, #32
 80061fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <TIM_OC2_SetConfig+0xd0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10d      	bne.n	800622c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a14      	ldr	r2, [pc, #80]	; (8006280 <TIM_OC2_SetConfig+0xd0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d113      	bne.n	800625c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800623a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00

08006284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <TIM_OC3_SetConfig+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10d      	bne.n	80062fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a14      	ldr	r2, [pc, #80]	; (8006354 <TIM_OC3_SetConfig+0xd0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d113      	bne.n	800632e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800630c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	621a      	str	r2, [r3, #32]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00

08006358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	031b      	lsls	r3, r3, #12
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a0f      	ldr	r2, [pc, #60]	; (80063f0 <TIM_OC4_SetConfig+0x98>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d109      	bne.n	80063cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	019b      	lsls	r3, r3, #6
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bc80      	pop	{r7}
 80063ee:	4770      	bx	lr
 80063f0:	40012c00 	.word	0x40012c00

080063f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f023 0201 	bic.w	r2, r3, #1
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800641e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 030a 	bic.w	r3, r3, #10
 8006430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr

08006450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f023 0210 	bic.w	r2, r3, #16
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800647a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	031b      	lsls	r3, r3, #12
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800648c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	621a      	str	r2, [r3, #32]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f043 0307 	orr.w	r3, r3, #7
 80064d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	609a      	str	r2, [r3, #8]
}
 80064d8:	bf00      	nop
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b087      	sub	sp, #28
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	021a      	lsls	r2, r3, #8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	431a      	orrs	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4313      	orrs	r3, r2
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	609a      	str	r2, [r3, #8]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2201      	movs	r2, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e046      	b.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a16      	ldr	r2, [pc, #88]	; (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d009      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a10      	ldr	r2, [pc, #64]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10c      	bne.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800

08006624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800664e:	f3ef 8305 	mrs	r3, IPSR
 8006652:	60bb      	str	r3, [r7, #8]
  return(result);
 8006654:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10f      	bne.n	800667a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665a:	f3ef 8310 	mrs	r3, PRIMASK
 800665e:	607b      	str	r3, [r7, #4]
  return(result);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <osKernelInitialize+0x32>
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <osKernelInitialize+0x60>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d109      	bne.n	8006682 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800666e:	f3ef 8311 	mrs	r3, BASEPRI
 8006672:	603b      	str	r3, [r7, #0]
  return(result);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800667a:	f06f 0305 	mvn.w	r3, #5
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e00c      	b.n	800669c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <osKernelInitialize+0x60>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <osKernelInitialize+0x60>)
 800668c:	2201      	movs	r2, #1
 800668e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e002      	b.n	800669c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800669a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800669c:	68fb      	ldr	r3, [r7, #12]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	200020c0 	.word	0x200020c0

080066ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b2:	f3ef 8305 	mrs	r3, IPSR
 80066b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80066b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10f      	bne.n	80066de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066be:	f3ef 8310 	mrs	r3, PRIMASK
 80066c2:	607b      	str	r3, [r7, #4]
  return(result);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <osKernelStart+0x32>
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <osKernelStart+0x64>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d109      	bne.n	80066e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066d2:	f3ef 8311 	mrs	r3, BASEPRI
 80066d6:	603b      	str	r3, [r7, #0]
  return(result);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80066de:	f06f 0305 	mvn.w	r3, #5
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e00e      	b.n	8006704 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <osKernelStart+0x64>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d107      	bne.n	80066fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <osKernelStart+0x64>)
 80066f0:	2202      	movs	r2, #2
 80066f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80066f4:	f001 fdce 	bl	8008294 <vTaskStartScheduler>
      stat = osOK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e002      	b.n	8006704 <osKernelStart+0x58>
    } else {
      stat = osError;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006702:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006704:	68fb      	ldr	r3, [r7, #12]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	200020c0 	.word	0x200020c0

08006714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b092      	sub	sp, #72	; 0x48
 8006718:	af04      	add	r7, sp, #16
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006724:	f3ef 8305 	mrs	r3, IPSR
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 8094 	bne.w	800685a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006732:	f3ef 8310 	mrs	r3, PRIMASK
 8006736:	623b      	str	r3, [r7, #32]
  return(result);
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 808d 	bne.w	800685a <osThreadNew+0x146>
 8006740:	4b48      	ldr	r3, [pc, #288]	; (8006864 <osThreadNew+0x150>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d106      	bne.n	8006756 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006748:	f3ef 8311 	mrs	r3, BASEPRI
 800674c:	61fb      	str	r3, [r7, #28]
  return(result);
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 8082 	bne.w	800685a <osThreadNew+0x146>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d07e      	beq.n	800685a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006760:	2318      	movs	r3, #24
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006764:	2300      	movs	r3, #0
 8006766:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006768:	f107 031b 	add.w	r3, r7, #27
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d045      	beq.n	8006806 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <osThreadNew+0x74>
        name = attr->name;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <osThreadNew+0x9a>
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	2b38      	cmp	r3, #56	; 0x38
 80067a0:	d805      	bhi.n	80067ae <osThreadNew+0x9a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <osThreadNew+0x9e>
        return (NULL);
 80067ae:	2300      	movs	r3, #0
 80067b0:	e054      	b.n	800685c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <osThreadNew+0xd4>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2bbb      	cmp	r3, #187	; 0xbb
 80067d0:	d90a      	bls.n	80067e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d006      	beq.n	80067e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <osThreadNew+0xd4>
        mem = 1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	e010      	b.n	800680a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10c      	bne.n	800680a <osThreadNew+0xf6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <osThreadNew+0xf6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <osThreadNew+0xf6>
          mem = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	e001      	b.n	800680a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	2b01      	cmp	r3, #1
 800680e:	d110      	bne.n	8006832 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006818:	9202      	str	r2, [sp, #8]
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 fa42 	bl	8007cb0 <xTaskCreateStatic>
 800682c:	4603      	mov	r3, r0
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e013      	b.n	800685a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d110      	bne.n	800685a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	b29a      	uxth	r2, r3
 800683c:	f107 0314 	add.w	r3, r7, #20
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 fa8c 	bl	8007d68 <xTaskCreate>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d001      	beq.n	800685a <osThreadNew+0x146>
          hTask = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800685a:	697b      	ldr	r3, [r7, #20]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3738      	adds	r7, #56	; 0x38
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	200020c0 	.word	0x200020c0

08006868 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006874:	f3ef 8305 	mrs	r3, IPSR
 8006878:	617b      	str	r3, [r7, #20]
  return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10f      	bne.n	80068a0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006880:	f3ef 8310 	mrs	r3, PRIMASK
 8006884:	613b      	str	r3, [r7, #16]
  return(result);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <osThreadSuspend+0x38>
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <osThreadSuspend+0x64>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d109      	bne.n	80068a8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006894:	f3ef 8311 	mrs	r3, BASEPRI
 8006898:	60fb      	str	r3, [r7, #12]
  return(result);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80068a0:	f06f 0305 	mvn.w	r3, #5
 80068a4:	61fb      	str	r3, [r7, #28]
 80068a6:	e00b      	b.n	80068c0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80068ae:	f06f 0303 	mvn.w	r3, #3
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e004      	b.n	80068c0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80068ba:	69b8      	ldr	r0, [r7, #24]
 80068bc:	f001 fbdc 	bl	8008078 <vTaskSuspend>
  }

  return (stat);
 80068c0:	69fb      	ldr	r3, [r7, #28]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200020c0 	.word	0x200020c0

080068d0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068dc:	f3ef 8305 	mrs	r3, IPSR
 80068e0:	617b      	str	r3, [r7, #20]
  return(result);
 80068e2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ec:	613b      	str	r3, [r7, #16]
  return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d109      	bne.n	8006908 <osThreadResume+0x38>
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <osThreadResume+0x64>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d109      	bne.n	8006910 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006900:	60fb      	str	r3, [r7, #12]
  return(result);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <osThreadResume+0x40>
    stat = osErrorISR;
 8006908:	f06f 0305 	mvn.w	r3, #5
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	e00b      	b.n	8006928 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8006916:	f06f 0303 	mvn.w	r3, #3
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	e004      	b.n	8006928 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8006922:	69b8      	ldr	r0, [r7, #24]
 8006924:	f001 fc58 	bl	80081d8 <vTaskResume>
  }

  return (stat);
 8006928:	69fb      	ldr	r3, [r7, #28]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200020c0 	.word	0x200020c0

08006938 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006940:	f3ef 8305 	mrs	r3, IPSR
 8006944:	613b      	str	r3, [r7, #16]
  return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10f      	bne.n	800696c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800694c:	f3ef 8310 	mrs	r3, PRIMASK
 8006950:	60fb      	str	r3, [r7, #12]
  return(result);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d109      	bne.n	800696c <osDelay+0x34>
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <osDelay+0x58>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d109      	bne.n	8006974 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006960:	f3ef 8311 	mrs	r3, BASEPRI
 8006964:	60bb      	str	r3, [r7, #8]
  return(result);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <osDelay+0x3c>
    stat = osErrorISR;
 800696c:	f06f 0305 	mvn.w	r3, #5
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e007      	b.n	8006984 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <osDelay+0x4c>
      vTaskDelay(ticks);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fb46 	bl	8008010 <vTaskDelay>
    }
  }

  return (stat);
 8006984:	697b      	ldr	r3, [r7, #20]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200020c0 	.word	0x200020c0

08006994 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	; 0x30
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a4:	f3ef 8305 	mrs	r3, IPSR
 80069a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80069aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8086 	bne.w	8006abe <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b2:	f3ef 8310 	mrs	r3, PRIMASK
 80069b6:	617b      	str	r3, [r7, #20]
  return(result);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d17f      	bne.n	8006abe <osSemaphoreNew+0x12a>
 80069be:	4b42      	ldr	r3, [pc, #264]	; (8006ac8 <osSemaphoreNew+0x134>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d105      	bne.n	80069d2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069c6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ca:	613b      	str	r3, [r7, #16]
  return(result);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d175      	bne.n	8006abe <osSemaphoreNew+0x12a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d072      	beq.n	8006abe <osSemaphoreNew+0x12a>
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d86e      	bhi.n	8006abe <osSemaphoreNew+0x12a>
    mem = -1;
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <osSemaphoreNew+0x6e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b4f      	cmp	r3, #79	; 0x4f
 80069fa:	d902      	bls.n	8006a02 <osSemaphoreNew+0x6e>
        mem = 1;
 80069fc:	2301      	movs	r3, #1
 80069fe:	623b      	str	r3, [r7, #32]
 8006a00:	e00c      	b.n	8006a1c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <osSemaphoreNew+0x88>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <osSemaphoreNew+0x88>
          mem = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	e001      	b.n	8006a1c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a22:	d04c      	beq.n	8006abe <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d128      	bne.n	8006a7c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10a      	bne.n	8006a46 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2203      	movs	r2, #3
 8006a36:	9200      	str	r2, [sp, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f000 fa15 	bl	8006e6c <xQueueGenericCreateStatic>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24
 8006a44:	e005      	b.n	8006a52 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006a46:	2203      	movs	r2, #3
 8006a48:	2100      	movs	r1, #0
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f000 fa85 	bl	8006f5a <xQueueGenericCreate>
 8006a50:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d022      	beq.n	8006a9e <osSemaphoreNew+0x10a>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01f      	beq.n	8006a9e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a66:	f000 fb43 	bl	80070f0 <xQueueGenericSend>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d016      	beq.n	8006a9e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a72:	f000 ff4d 	bl	8007910 <vQueueDelete>
            hSemaphore = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	e010      	b.n	8006a9e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fac6 	bl	800701c <xQueueCreateCountingSemaphoreStatic>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24
 8006a92:	e004      	b.n	8006a9e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 faf7 	bl	800708a <xQueueCreateCountingSemaphore>
 8006a9c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00c      	beq.n	8006abe <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e001      	b.n	8006ab6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006ab6:	69f9      	ldr	r1, [r7, #28]
 8006ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aba:	f001 f873 	bl	8007ba4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	; 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	200020c0 	.word	0x200020c0

08006acc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006adc:	f3ef 8305 	mrs	r3, IPSR
 8006ae0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ae2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d16f      	bne.n	8006bc8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8006aec:	617b      	str	r3, [r7, #20]
  return(result);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d169      	bne.n	8006bc8 <osMessageQueueNew+0xfc>
 8006af4:	4b37      	ldr	r3, [pc, #220]	; (8006bd4 <osMessageQueueNew+0x108>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d105      	bne.n	8006b08 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006afc:	f3ef 8311 	mrs	r3, BASEPRI
 8006b00:	613b      	str	r3, [r7, #16]
  return(result);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d15f      	bne.n	8006bc8 <osMessageQueueNew+0xfc>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d05c      	beq.n	8006bc8 <osMessageQueueNew+0xfc>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d059      	beq.n	8006bc8 <osMessageQueueNew+0xfc>
    mem = -1;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d029      	beq.n	8006b74 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d012      	beq.n	8006b4e <osMessageQueueNew+0x82>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b4f      	cmp	r3, #79	; 0x4f
 8006b2e:	d90e      	bls.n	8006b4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <osMessageQueueNew+0x82>
        mem = 1;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	623b      	str	r3, [r7, #32]
 8006b4c:	e014      	b.n	8006b78 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d110      	bne.n	8006b78 <osMessageQueueNew+0xac>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10c      	bne.n	8006b78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <osMessageQueueNew+0xac>
          mem = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	e001      	b.n	8006b78 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d10b      	bne.n	8006b96 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2100      	movs	r1, #0
 8006b88:	9100      	str	r1, [sp, #0]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f96d 	bl	8006e6c <xQueueGenericCreateStatic>
 8006b92:	6278      	str	r0, [r7, #36]	; 0x24
 8006b94:	e008      	b.n	8006ba8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f9da 	bl	8006f5a <xQueueGenericCreate>
 8006ba6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <osMessageQueueNew+0xf0>
        name = attr->name;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	e001      	b.n	8006bc0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bc4:	f000 ffee 	bl	8007ba4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200020c0 	.word	0x200020c0

08006bd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a06      	ldr	r2, [pc, #24]	; (8006c00 <vApplicationGetIdleTaskMemory+0x28>)
 8006be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4a05      	ldr	r2, [pc, #20]	; (8006c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8006bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2280      	movs	r2, #128	; 0x80
 8006bf4:	601a      	str	r2, [r3, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr
 8006c00:	200020c4 	.word	0x200020c4
 8006c04:	20002180 	.word	0x20002180

08006c08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4a06      	ldr	r2, [pc, #24]	; (8006c38 <vApplicationGetTimerTaskMemory+0x30>)
 8006c1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c26:	601a      	str	r2, [r3, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20002380 	.word	0x20002380
 8006c38:	2000243c 	.word	0x2000243c

08006c3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f103 0208 	add.w	r2, r3, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f103 0208 	add.w	r2, r3, #8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f103 0208 	add.w	r2, r3, #8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr

08006c92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	601a      	str	r2, [r3, #0]
}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cee:	d103      	bne.n	8006cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	e00c      	b.n	8006d12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e002      	b.n	8006d06 <vListInsert+0x2e>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d2f6      	bcs.n	8006d00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6892      	ldr	r2, [r2, #8]
 8006d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6852      	ldr	r2, [r2, #4]
 8006d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d103      	bne.n	8006d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1e5a      	subs	r2, r3, #1
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
	...

08006d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006dc6:	f002 fcb1 	bl	800972c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	68f9      	ldr	r1, [r7, #12]
 8006dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dd6:	fb01 f303 	mul.w	r3, r1, r3
 8006dda:	441a      	add	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	3b01      	subs	r3, #1
 8006df8:	68f9      	ldr	r1, [r7, #12]
 8006dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dfc:	fb01 f303 	mul.w	r3, r1, r3
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d114      	bne.n	8006e46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01a      	beq.n	8006e5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3310      	adds	r3, #16
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 fccf 	bl	80087cc <xTaskRemoveFromEventList>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d012      	beq.n	8006e5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <xQueueGenericReset+0xcc>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	e009      	b.n	8006e5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3310      	adds	r3, #16
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fef6 	bl	8006c3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fef1 	bl	8006c3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e5a:	f002 fc97 	bl	800978c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e5e:	2301      	movs	r3, #1
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08e      	sub	sp, #56	; 0x38
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <xQueueGenericCreateStatic+0x52>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <xQueueGenericCreateStatic+0x56>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <xQueueGenericCreateStatic+0x58>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	623b      	str	r3, [r7, #32]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <xQueueGenericCreateStatic+0x7e>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <xQueueGenericCreateStatic+0x82>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <xQueueGenericCreateStatic+0x84>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	61fb      	str	r3, [r7, #28]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f0a:	2350      	movs	r3, #80	; 0x50
 8006f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b50      	cmp	r3, #80	; 0x50
 8006f12:	d00a      	beq.n	8006f2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	61bb      	str	r3, [r7, #24]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00d      	beq.n	8006f50 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f843 	bl	8006fd6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3730      	adds	r7, #48	; 0x30
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b08a      	sub	sp, #40	; 0x28
 8006f5e:	af02      	add	r7, sp, #8
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	4613      	mov	r3, r2
 8006f66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	613b      	str	r3, [r7, #16]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	e004      	b.n	8006f9a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3350      	adds	r3, #80	; 0x50
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f002 fcc4 	bl	800992c <pvPortMalloc>
 8006fa4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00f      	beq.n	8006fcc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	3350      	adds	r3, #80	; 0x50
 8006fb0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fba:	79fa      	ldrb	r2, [r7, #7]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 f805 	bl	8006fd6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
	}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e002      	b.n	8006ff8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007004:	2101      	movs	r1, #1
 8007006:	69b8      	ldr	r0, [r7, #24]
 8007008:	f7ff fec8 	bl	8006d9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	61bb      	str	r3, [r7, #24]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d90a      	bls.n	8007062 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	617b      	str	r3, [r7, #20]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007062:	2302      	movs	r3, #2
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	2100      	movs	r1, #0
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff fefd 	bl	8006e6c <xQueueGenericCreateStatic>
 8007072:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007080:	69fb      	ldr	r3, [r7, #28]
	}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	613b      	str	r3, [r7, #16]
}
 80070ac:	bf00      	nop
 80070ae:	e7fe      	b.n	80070ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d90a      	bls.n	80070ce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	60fb      	str	r3, [r7, #12]
}
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070ce:	2202      	movs	r2, #2
 80070d0:	2100      	movs	r1, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff ff41 	bl	8006f5a <xQueueGenericCreate>
 80070d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070e6:	697b      	ldr	r3, [r7, #20]
	}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08e      	sub	sp, #56	; 0x38
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070fe:	2300      	movs	r3, #0
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xQueueGenericSend+0x32>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <xQueueGenericSend+0x40>
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <xQueueGenericSend+0x44>
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <xQueueGenericSend+0x46>
 8007134:	2300      	movs	r3, #0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <xQueueGenericSend+0x60>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b02      	cmp	r3, #2
 8007154:	d103      	bne.n	800715e <xQueueGenericSend+0x6e>
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <xQueueGenericSend+0x72>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <xQueueGenericSend+0x74>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <xQueueGenericSend+0x8e>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	623b      	str	r3, [r7, #32]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800717e:	f001 fceb 	bl	8008b58 <xTaskGetSchedulerState>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <xQueueGenericSend+0x9e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <xQueueGenericSend+0xa2>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <xQueueGenericSend+0xa4>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xQueueGenericSend+0xbe>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	61fb      	str	r3, [r7, #28]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071ae:	f002 fabd 	bl	800972c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d302      	bcc.n	80071c4 <xQueueGenericSend+0xd4>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d129      	bne.n	8007218 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ca:	f000 fbdb 	bl	8007984 <prvCopyDataToQueue>
 80071ce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d010      	beq.n	80071fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	3324      	adds	r3, #36	; 0x24
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 faf5 	bl	80087cc <xTaskRemoveFromEventList>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d013      	beq.n	8007210 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071e8:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <xQueueGenericSend+0x1f8>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	e00a      	b.n	8007210 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007200:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <xQueueGenericSend+0x1f8>)
 8007202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007210:	f002 fabc 	bl	800978c <vPortExitCritical>
				return pdPASS;
 8007214:	2301      	movs	r3, #1
 8007216:	e063      	b.n	80072e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800721e:	f002 fab5 	bl	800978c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007222:	2300      	movs	r3, #0
 8007224:	e05c      	b.n	80072e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fb2f 	bl	8008894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800723a:	f002 faa7 	bl	800978c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800723e:	f001 f899 	bl	8008374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007242:	f002 fa73 	bl	800972c <vPortEnterCritical>
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800724c:	b25b      	sxtb	r3, r3
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007252:	d103      	bne.n	800725c <xQueueGenericSend+0x16c>
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007262:	b25b      	sxtb	r3, r3
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007268:	d103      	bne.n	8007272 <xQueueGenericSend+0x182>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007272:	f002 fa8b 	bl	800978c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007276:	1d3a      	adds	r2, r7, #4
 8007278:	f107 0314 	add.w	r3, r7, #20
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f001 fb1e 	bl	80088c0 <xTaskCheckForTimeOut>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d124      	bne.n	80072d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800728a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728c:	f000 fc72 	bl	8007b74 <prvIsQueueFull>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d018      	beq.n	80072c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	3310      	adds	r3, #16
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4611      	mov	r1, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fa44 	bl	800872c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a6:	f000 fbfd 	bl	8007aa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072aa:	f001 f871 	bl	8008390 <xTaskResumeAll>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f47f af7c 	bne.w	80071ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <xQueueGenericSend+0x1f8>)
 80072b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	e772      	b.n	80071ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ca:	f000 fbeb 	bl	8007aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ce:	f001 f85f 	bl	8008390 <xTaskResumeAll>
 80072d2:	e76c      	b.n	80071ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d6:	f000 fbe5 	bl	8007aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072da:	f001 f859 	bl	8008390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072de:	2300      	movs	r3, #0
		}
	}
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3738      	adds	r7, #56	; 0x38
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08e      	sub	sp, #56	; 0x38
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <xQueueGenericSendFromISR+0x3c>
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <xQueueGenericSendFromISR+0x40>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <xQueueGenericSendFromISR+0x42>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	623b      	str	r3, [r7, #32]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d103      	bne.n	8007356 <xQueueGenericSendFromISR+0x6a>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <xQueueGenericSendFromISR+0x6e>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueGenericSendFromISR+0x70>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61fb      	str	r3, [r7, #28]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007376:	f002 fa9b 	bl	80098b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800737a:	f3ef 8211 	mrs	r2, BASEPRI
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	61ba      	str	r2, [r7, #24]
 8007390:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007392:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <xQueueGenericSendFromISR+0xbc>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d12c      	bne.n	8007402 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073b8:	f000 fae4 	bl	8007984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c4:	d112      	bne.n	80073ec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	3324      	adds	r3, #36	; 0x24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f9fa 	bl	80087cc <xTaskRemoveFromEventList>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00e      	beq.n	80073fc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00b      	beq.n	80073fc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e007      	b.n	80073fc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073f0:	3301      	adds	r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	b25a      	sxtb	r2, r3
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073fc:	2301      	movs	r3, #1
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007400:	e001      	b.n	8007406 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007402:	2300      	movs	r3, #0
 8007404:	637b      	str	r3, [r7, #52]	; 0x34
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007414:	4618      	mov	r0, r3
 8007416:	3738      	adds	r7, #56	; 0x38
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	; 0x38
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	623b      	str	r3, [r7, #32]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <xQueueGiveFromISR+0x48>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	61fb      	str	r3, [r7, #28]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <xQueueGiveFromISR+0x58>
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueGiveFromISR+0x5c>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueGiveFromISR+0x5e>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <xQueueGiveFromISR+0x78>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61bb      	str	r3, [r7, #24]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007494:	f002 fa0c 	bl	80098b0 <vPortValidateInterruptPriority>
	__asm volatile
 8007498:	f3ef 8211 	mrs	r2, BASEPRI
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	617a      	str	r2, [r7, #20]
 80074ae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80074b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d22b      	bcs.n	800751c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074de:	d112      	bne.n	8007506 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d016      	beq.n	8007516 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 f96d 	bl	80087cc <xTaskRemoveFromEventList>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00b      	beq.n	8007516 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	e007      	b.n	8007516 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800750a:	3301      	adds	r3, #1
 800750c:	b2db      	uxtb	r3, r3
 800750e:	b25a      	sxtb	r2, r3
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007516:	2301      	movs	r3, #1
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
 800751a:	e001      	b.n	8007520 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800751c:	2300      	movs	r3, #0
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f383 8811 	msr	BASEPRI, r3
}
 800752a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800752e:	4618      	mov	r0, r3
 8007530:	3738      	adds	r7, #56	; 0x38
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08c      	sub	sp, #48	; 0x30
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <xQueueReceive+0x30>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	623b      	str	r3, [r7, #32]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <xQueueReceive+0x3e>
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <xQueueReceive+0x42>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <xQueueReceive+0x44>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xQueueReceive+0x5e>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	61fb      	str	r3, [r7, #28]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007596:	f001 fadf 	bl	8008b58 <xTaskGetSchedulerState>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d102      	bne.n	80075a6 <xQueueReceive+0x6e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <xQueueReceive+0x72>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <xQueueReceive+0x74>
 80075aa:	2300      	movs	r3, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xQueueReceive+0x8e>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	61bb      	str	r3, [r7, #24]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80075c6:	f002 f8b1 	bl	800972c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01f      	beq.n	8007616 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075da:	f000 fa3d 	bl	8007a58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00f      	beq.n	800760e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	3310      	adds	r3, #16
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 f8ea 	bl	80087cc <xTaskRemoveFromEventList>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075fe:	4b3d      	ldr	r3, [pc, #244]	; (80076f4 <xQueueReceive+0x1bc>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800760e:	f002 f8bd 	bl	800978c <vPortExitCritical>
				return pdPASS;
 8007612:	2301      	movs	r3, #1
 8007614:	e069      	b.n	80076ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800761c:	f002 f8b6 	bl	800978c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007620:	2300      	movs	r3, #0
 8007622:	e062      	b.n	80076ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800762a:	f107 0310 	add.w	r3, r7, #16
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f930 	bl	8008894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007634:	2301      	movs	r3, #1
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007638:	f002 f8a8 	bl	800978c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800763c:	f000 fe9a 	bl	8008374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007640:	f002 f874 	bl	800972c <vPortEnterCritical>
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800764a:	b25b      	sxtb	r3, r3
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007650:	d103      	bne.n	800765a <xQueueReceive+0x122>
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007660:	b25b      	sxtb	r3, r3
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007666:	d103      	bne.n	8007670 <xQueueReceive+0x138>
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007670:	f002 f88c 	bl	800978c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007674:	1d3a      	adds	r2, r7, #4
 8007676:	f107 0310 	add.w	r3, r7, #16
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f001 f91f 	bl	80088c0 <xTaskCheckForTimeOut>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d123      	bne.n	80076d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768a:	f000 fa5d 	bl	8007b48 <prvIsQueueEmpty>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d017      	beq.n	80076c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	3324      	adds	r3, #36	; 0x24
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f845 	bl	800872c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a4:	f000 f9fe 	bl	8007aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076a8:	f000 fe72 	bl	8008390 <xTaskResumeAll>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d189      	bne.n	80075c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <xQueueReceive+0x1bc>)
 80076b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	e780      	b.n	80075c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c6:	f000 f9ed 	bl	8007aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ca:	f000 fe61 	bl	8008390 <xTaskResumeAll>
 80076ce:	e77a      	b.n	80075c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076d2:	f000 f9e7 	bl	8007aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076d6:	f000 fe5b 	bl	8008390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076dc:	f000 fa34 	bl	8007b48 <prvIsQueueEmpty>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f43f af6f 	beq.w	80075c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3730      	adds	r7, #48	; 0x30
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08e      	sub	sp, #56	; 0x38
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	623b      	str	r3, [r7, #32]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61fb      	str	r3, [r7, #28]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007748:	f001 fa06 	bl	8008b58 <xTaskGetSchedulerState>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <xQueueSemaphoreTake+0x60>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <xQueueSemaphoreTake+0x64>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <xQueueSemaphoreTake+0x66>
 800775c:	2300      	movs	r3, #0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	61bb      	str	r3, [r7, #24]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007778:	f001 ffd8 	bl	800972c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	d024      	beq.n	80077d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	1e5a      	subs	r2, r3, #1
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d104      	bne.n	80077a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007798:	f001 fb5e 	bl	8008e58 <pvTaskIncrementMutexHeldCount>
 800779c:	4602      	mov	r2, r0
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00f      	beq.n	80077ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	3310      	adds	r3, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 f80c 	bl	80087cc <xTaskRemoveFromEventList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ba:	4b54      	ldr	r3, [pc, #336]	; (800790c <xQueueSemaphoreTake+0x214>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077ca:	f001 ffdf 	bl	800978c <vPortExitCritical>
				return pdPASS;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e097      	b.n	8007902 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d111      	bne.n	80077fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077f4:	f001 ffca 	bl	800978c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e082      	b.n	8007902 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007802:	f107 030c 	add.w	r3, r7, #12
 8007806:	4618      	mov	r0, r3
 8007808:	f001 f844 	bl	8008894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007810:	f001 ffbc 	bl	800978c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007814:	f000 fdae 	bl	8008374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007818:	f001 ff88 	bl	800972c <vPortEnterCritical>
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007822:	b25b      	sxtb	r3, r3
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007828:	d103      	bne.n	8007832 <xQueueSemaphoreTake+0x13a>
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007838:	b25b      	sxtb	r3, r3
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783e:	d103      	bne.n	8007848 <xQueueSemaphoreTake+0x150>
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007848:	f001 ffa0 	bl	800978c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800784c:	463a      	mov	r2, r7
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f833 	bl	80088c0 <xTaskCheckForTimeOut>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d132      	bne.n	80078c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007862:	f000 f971 	bl	8007b48 <prvIsQueueEmpty>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d026      	beq.n	80078ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007874:	f001 ff5a 	bl	800972c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4618      	mov	r0, r3
 800787e:	f001 f989 	bl	8008b94 <xTaskPriorityInherit>
 8007882:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007884:	f001 ff82 	bl	800978c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f000 ff4b 	bl	800872c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007898:	f000 f904 	bl	8007aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800789c:	f000 fd78 	bl	8008390 <xTaskResumeAll>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f47f af68 	bne.w	8007778 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <xQueueSemaphoreTake+0x214>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	e75e      	b.n	8007778 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078bc:	f000 f8f2 	bl	8007aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078c0:	f000 fd66 	bl	8008390 <xTaskResumeAll>
 80078c4:	e758      	b.n	8007778 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078c8:	f000 f8ec 	bl	8007aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078cc:	f000 fd60 	bl	8008390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078d2:	f000 f939 	bl	8007b48 <prvIsQueueEmpty>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f43f af4d 	beq.w	8007778 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80078e4:	f001 ff22 	bl	800972c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ea:	f000 f834 	bl	8007956 <prvGetDisinheritPriorityAfterTimeout>
 80078ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 fa28 	bl	8008d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078fc:	f001 ff46 	bl	800978c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007902:	4618      	mov	r0, r3
 8007904:	3738      	adds	r7, #56	; 0x38
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <vQueueDelete+0x28>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60bb      	str	r3, [r7, #8]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f95b 	bl	8007bf4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f002 f8b3 	bl	8009ab4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d006      	beq.n	8007974 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	e001      	b.n	8007978 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007978:	68fb      	ldr	r3, [r7, #12]
	}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10d      	bne.n	80079be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d14d      	bne.n	8007a46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 f95e 	bl	8008c70 <xTaskPriorityDisinherit>
 80079b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	605a      	str	r2, [r3, #4]
 80079bc:	e043      	b.n	8007a46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d119      	bne.n	80079f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6898      	ldr	r0, [r3, #8]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	461a      	mov	r2, r3
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	f002 f9b0 	bl	8009d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	441a      	add	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d32b      	bcc.n	8007a46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	609a      	str	r2, [r3, #8]
 80079f6:	e026      	b.n	8007a46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68d8      	ldr	r0, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	461a      	mov	r2, r3
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	f002 f996 	bl	8009d34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	425b      	negs	r3, r3
 8007a12:	441a      	add	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d207      	bcs.n	8007a34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	441a      	add	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d105      	bne.n	8007a46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a4e:	697b      	ldr	r3, [r7, #20]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d018      	beq.n	8007a9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	441a      	add	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d303      	bcc.n	8007a8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68d9      	ldr	r1, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	461a      	mov	r2, r3
 8007a96:	6838      	ldr	r0, [r7, #0]
 8007a98:	f002 f94c 	bl	8009d34 <memcpy>
	}
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007aac:	f001 fe3e 	bl	800972c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ab8:	e011      	b.n	8007ade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d012      	beq.n	8007ae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3324      	adds	r3, #36	; 0x24
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fe80 	bl	80087cc <xTaskRemoveFromEventList>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ad2:	f000 ff57 	bl	8008984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dce9      	bgt.n	8007aba <prvUnlockQueue+0x16>
 8007ae6:	e000      	b.n	8007aea <prvUnlockQueue+0x46>
					break;
 8007ae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	22ff      	movs	r2, #255	; 0xff
 8007aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007af2:	f001 fe4b 	bl	800978c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007af6:	f001 fe19 	bl	800972c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b02:	e011      	b.n	8007b28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d012      	beq.n	8007b32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3310      	adds	r3, #16
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fe5b 	bl	80087cc <xTaskRemoveFromEventList>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b1c:	f000 ff32 	bl	8008984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dce9      	bgt.n	8007b04 <prvUnlockQueue+0x60>
 8007b30:	e000      	b.n	8007b34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	22ff      	movs	r2, #255	; 0xff
 8007b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b3c:	f001 fe26 	bl	800978c <vPortExitCritical>
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b50:	f001 fdec 	bl	800972c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e001      	b.n	8007b66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b66:	f001 fe11 	bl	800978c <vPortExitCritical>

	return xReturn;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b7c:	f001 fdd6 	bl	800972c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d102      	bne.n	8007b92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e001      	b.n	8007b96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b96:	f001 fdf9 	bl	800978c <vPortExitCritical>

	return xReturn;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e014      	b.n	8007bde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bb4:	4a0e      	ldr	r2, [pc, #56]	; (8007bf0 <vQueueAddToRegistry+0x4c>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bc0:	490b      	ldr	r1, [pc, #44]	; (8007bf0 <vQueueAddToRegistry+0x4c>)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bca:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <vQueueAddToRegistry+0x4c>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bd6:	e006      	b.n	8007be6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b07      	cmp	r3, #7
 8007be2:	d9e7      	bls.n	8007bb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr
 8007bf0:	2000283c 	.word	0x2000283c

08007bf4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e016      	b.n	8007c30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007c02:	4a10      	ldr	r2, [pc, #64]	; (8007c44 <vQueueUnregisterQueue+0x50>)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4413      	add	r3, r2
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d10b      	bne.n	8007c2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007c12:	4a0c      	ldr	r2, [pc, #48]	; (8007c44 <vQueueUnregisterQueue+0x50>)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2100      	movs	r1, #0
 8007c18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007c1c:	4a09      	ldr	r2, [pc, #36]	; (8007c44 <vQueueUnregisterQueue+0x50>)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	4413      	add	r3, r2
 8007c24:	2200      	movs	r2, #0
 8007c26:	605a      	str	r2, [r3, #4]
				break;
 8007c28:	e006      	b.n	8007c38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b07      	cmp	r3, #7
 8007c34:	d9e5      	bls.n	8007c02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	2000283c 	.word	0x2000283c

08007c48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c58:	f001 fd68 	bl	800972c <vPortEnterCritical>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c62:	b25b      	sxtb	r3, r3
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c68:	d103      	bne.n	8007c72 <vQueueWaitForMessageRestricted+0x2a>
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c7e:	d103      	bne.n	8007c88 <vQueueWaitForMessageRestricted+0x40>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c88:	f001 fd80 	bl	800978c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d106      	bne.n	8007ca2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	3324      	adds	r3, #36	; 0x24
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fd69 	bl	8008774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f7ff fefe 	bl	8007aa4 <prvUnlockQueue>
	}
 8007ca8:	bf00      	nop
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08e      	sub	sp, #56	; 0x38
 8007cb4:	af04      	add	r7, sp, #16
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xTaskCreateStatic+0x2a>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	623b      	str	r3, [r7, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	61fb      	str	r3, [r7, #28]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cf6:	23bc      	movs	r3, #188	; 0xbc
 8007cf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2bbc      	cmp	r3, #188	; 0xbc
 8007cfe:	d00a      	beq.n	8007d16 <xTaskCreateStatic+0x66>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	61bb      	str	r3, [r7, #24]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01e      	beq.n	8007d5a <xTaskCreateStatic+0xaa>
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01b      	beq.n	8007d5a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d34:	2300      	movs	r3, #0
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	9302      	str	r3, [sp, #8]
 8007d3c:	f107 0314 	add.w	r3, r7, #20
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f851 	bl	8007df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d54:	f000 f8ec 	bl	8007f30 <prvAddNewTaskToReadyList>
 8007d58:	e001      	b.n	8007d5e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d5e:	697b      	ldr	r3, [r7, #20]
	}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3728      	adds	r7, #40	; 0x28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08c      	sub	sp, #48	; 0x30
 8007d6c:	af04      	add	r7, sp, #16
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fdd5 	bl	800992c <pvPortMalloc>
 8007d82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007d8a:	20bc      	movs	r0, #188	; 0xbc
 8007d8c:	f001 fdce 	bl	800992c <pvPortMalloc>
 8007d90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007d9e:	e005      	b.n	8007dac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007da0:	6978      	ldr	r0, [r7, #20]
 8007da2:	f001 fe87 	bl	8009ab4 <vPortFree>
 8007da6:	e001      	b.n	8007dac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d017      	beq.n	8007de2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9303      	str	r3, [sp, #12]
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	9302      	str	r3, [sp, #8]
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f80f 	bl	8007df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dd6:	69f8      	ldr	r0, [r7, #28]
 8007dd8:	f000 f8aa 	bl	8007f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e002      	b.n	8007de8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007de6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007de8:	69bb      	ldr	r3, [r7, #24]
	}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	21a5      	movs	r1, #165	; 0xa5
 8007e0e:	f001 ff9f 	bl	8009d50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	617b      	str	r3, [r7, #20]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	e012      	b.n	8007e78 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	7819      	ldrb	r1, [r3, #0]
 8007e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	4413      	add	r3, r2
 8007e60:	3334      	adds	r3, #52	; 0x34
 8007e62:	460a      	mov	r2, r1
 8007e64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d006      	beq.n	8007e80 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	3301      	adds	r3, #1
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d9e9      	bls.n	8007e52 <prvInitialiseNewTask+0x5e>
 8007e7e:	e000      	b.n	8007e82 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007e80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	2b37      	cmp	r3, #55	; 0x37
 8007e8e:	d901      	bls.n	8007e94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e90:	2337      	movs	r3, #55	; 0x37
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fee5 	bl	8006c7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe fee0 	bl	8006c7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	3354      	adds	r3, #84	; 0x54
 8007ee4:	2260      	movs	r2, #96	; 0x60
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 ff31 	bl	8009d50 <memset>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	4a0c      	ldr	r2, [pc, #48]	; (8007f24 <prvInitialiseNewTask+0x130>)
 8007ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	; (8007f28 <prvInitialiseNewTask+0x134>)
 8007ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	4a0b      	ldr	r2, [pc, #44]	; (8007f2c <prvInitialiseNewTask+0x138>)
 8007efe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	69b8      	ldr	r0, [r7, #24]
 8007f06:	f001 fb21 	bl	800954c <pxPortInitialiseStack>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f1c:	bf00      	nop
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	0800acdc 	.word	0x0800acdc
 8007f28:	0800acfc 	.word	0x0800acfc
 8007f2c:	0800acbc 	.word	0x0800acbc

08007f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f38:	f001 fbf8 	bl	800972c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ff4 <prvAddNewTaskToReadyList+0xc4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <prvAddNewTaskToReadyList+0xc4>)
 8007f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f46:	4b2c      	ldr	r3, [pc, #176]	; (8007ff8 <prvAddNewTaskToReadyList+0xc8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f4e:	4a2a      	ldr	r2, [pc, #168]	; (8007ff8 <prvAddNewTaskToReadyList+0xc8>)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f54:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <prvAddNewTaskToReadyList+0xc4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d110      	bne.n	8007f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f5c:	f000 fd36 	bl	80089cc <prvInitialiseTaskLists>
 8007f60:	e00d      	b.n	8007f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f62:	4b26      	ldr	r3, [pc, #152]	; (8007ffc <prvAddNewTaskToReadyList+0xcc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f6a:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <prvAddNewTaskToReadyList+0xc8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d802      	bhi.n	8007f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f78:	4a1f      	ldr	r2, [pc, #124]	; (8007ff8 <prvAddNewTaskToReadyList+0xc8>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f7e:	4b20      	ldr	r3, [pc, #128]	; (8008000 <prvAddNewTaskToReadyList+0xd0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <prvAddNewTaskToReadyList+0xd0>)
 8007f86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <prvAddNewTaskToReadyList+0xd0>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <prvAddNewTaskToReadyList+0xd4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d903      	bls.n	8007fa4 <prvAddNewTaskToReadyList+0x74>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	4a18      	ldr	r2, [pc, #96]	; (8008004 <prvAddNewTaskToReadyList+0xd4>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4a15      	ldr	r2, [pc, #84]	; (8008008 <prvAddNewTaskToReadyList+0xd8>)
 8007fb2:	441a      	add	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fe fe69 	bl	8006c92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fc0:	f001 fbe4 	bl	800978c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fc4:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <prvAddNewTaskToReadyList+0xcc>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00e      	beq.n	8007fea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <prvAddNewTaskToReadyList+0xc8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d207      	bcs.n	8007fea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <prvAddNewTaskToReadyList+0xdc>)
 8007fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20002d50 	.word	0x20002d50
 8007ff8:	2000287c 	.word	0x2000287c
 8007ffc:	20002d5c 	.word	0x20002d5c
 8008000:	20002d6c 	.word	0x20002d6c
 8008004:	20002d58 	.word	0x20002d58
 8008008:	20002880 	.word	0x20002880
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <vTaskDelay+0x60>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <vTaskDelay+0x30>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	60bb      	str	r3, [r7, #8]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008040:	f000 f998 	bl	8008374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008044:	2100      	movs	r1, #0
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 ff1a 	bl	8008e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800804c:	f000 f9a0 	bl	8008390 <xTaskResumeAll>
 8008050:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d107      	bne.n	8008068 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <vTaskDelay+0x64>)
 800805a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20002d78 	.word	0x20002d78
 8008074:	e000ed04 	.word	0xe000ed04

08008078 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008080:	f001 fb54 	bl	800972c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <vTaskSuspend+0x18>
 800808a:	4b30      	ldr	r3, [pc, #192]	; (800814c <vTaskSuspend+0xd4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	e000      	b.n	8008092 <vTaskSuspend+0x1a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3304      	adds	r3, #4
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fe55 	bl	8006d48 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d004      	beq.n	80080b0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3318      	adds	r3, #24
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe fe4c 	bl	8006d48 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4826      	ldr	r0, [pc, #152]	; (8008150 <vTaskSuspend+0xd8>)
 80080b8:	f7fe fdeb 	bl	8006c92 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d103      	bne.n	80080d0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80080d0:	f001 fb5c 	bl	800978c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80080d4:	4b1f      	ldr	r3, [pc, #124]	; (8008154 <vTaskSuspend+0xdc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80080dc:	f001 fb26 	bl	800972c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80080e0:	f000 fd16 	bl	8008b10 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80080e4:	f001 fb52 	bl	800978c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80080e8:	4b18      	ldr	r3, [pc, #96]	; (800814c <vTaskSuspend+0xd4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d127      	bne.n	8008142 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80080f2:	4b18      	ldr	r3, [pc, #96]	; (8008154 <vTaskSuspend+0xdc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d017      	beq.n	800812a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80080fa:	4b17      	ldr	r3, [pc, #92]	; (8008158 <vTaskSuspend+0xe0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <vTaskSuspend+0xa0>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	60bb      	str	r3, [r7, #8]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008118:	4b10      	ldr	r3, [pc, #64]	; (800815c <vTaskSuspend+0xe4>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008128:	e00b      	b.n	8008142 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <vTaskSuspend+0xd8>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <vTaskSuspend+0xe8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d103      	bne.n	800813e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8008136:	4b05      	ldr	r3, [pc, #20]	; (800814c <vTaskSuspend+0xd4>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
	}
 800813c:	e001      	b.n	8008142 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800813e:	f000 fa91 	bl	8008664 <vTaskSwitchContext>
	}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	2000287c 	.word	0x2000287c
 8008150:	20002d3c 	.word	0x20002d3c
 8008154:	20002d5c 	.word	0x20002d5c
 8008158:	20002d78 	.word	0x20002d78
 800815c:	e000ed04 	.word	0xe000ed04
 8008160:	20002d50 	.word	0x20002d50

08008164 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	60fb      	str	r3, [r7, #12]
}
 800818c:	bf00      	nop
 800818e:	e7fe      	b.n	800818e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	4a0e      	ldr	r2, [pc, #56]	; (80081d0 <prvTaskIsTaskSuspended+0x6c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d101      	bne.n	800819e <prvTaskIsTaskSuspended+0x3a>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <prvTaskIsTaskSuspended+0x3c>
 800819e:	2300      	movs	r3, #0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00f      	beq.n	80081c4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	4a0a      	ldr	r2, [pc, #40]	; (80081d4 <prvTaskIsTaskSuspended+0x70>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00a      	beq.n	80081c4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <prvTaskIsTaskSuspended+0x56>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <prvTaskIsTaskSuspended+0x58>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081c4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80081c6:	4618      	mov	r0, r3
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr
 80081d0:	20002d3c 	.word	0x20002d3c
 80081d4:	20002d10 	.word	0x20002d10

080081d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <vTaskResume+0x28>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60bb      	str	r3, [r7, #8]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d03a      	beq.n	800827c <vTaskResume+0xa4>
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <vTaskResume+0xac>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d035      	beq.n	800827c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008210:	f001 fa8c 	bl	800972c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff ffa5 	bl	8008164 <prvTaskIsTaskSuspended>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02b      	beq.n	8008278 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3304      	adds	r3, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fd8f 	bl	8006d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	4b16      	ldr	r3, [pc, #88]	; (8008288 <vTaskResume+0xb0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d903      	bls.n	800823e <vTaskResume+0x66>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	4a13      	ldr	r2, [pc, #76]	; (8008288 <vTaskResume+0xb0>)
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4a10      	ldr	r2, [pc, #64]	; (800828c <vTaskResume+0xb4>)
 800824c:	441a      	add	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7fe fd1c 	bl	8006c92 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	4b09      	ldr	r3, [pc, #36]	; (8008284 <vTaskResume+0xac>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	429a      	cmp	r2, r3
 8008266:	d307      	bcc.n	8008278 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008268:	4b09      	ldr	r3, [pc, #36]	; (8008290 <vTaskResume+0xb8>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008278:	f001 fa88 	bl	800978c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	2000287c 	.word	0x2000287c
 8008288:	20002d58 	.word	0x20002d58
 800828c:	20002880 	.word	0x20002880
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08a      	sub	sp, #40	; 0x28
 8008298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082a2:	463a      	mov	r2, r7
 80082a4:	1d39      	adds	r1, r7, #4
 80082a6:	f107 0308 	add.w	r3, r7, #8
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fc94 	bl	8006bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	9202      	str	r2, [sp, #8]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	460a      	mov	r2, r1
 80082c2:	4924      	ldr	r1, [pc, #144]	; (8008354 <vTaskStartScheduler+0xc0>)
 80082c4:	4824      	ldr	r0, [pc, #144]	; (8008358 <vTaskStartScheduler+0xc4>)
 80082c6:	f7ff fcf3 	bl	8007cb0 <xTaskCreateStatic>
 80082ca:	4603      	mov	r3, r0
 80082cc:	4a23      	ldr	r2, [pc, #140]	; (800835c <vTaskStartScheduler+0xc8>)
 80082ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082d0:	4b22      	ldr	r3, [pc, #136]	; (800835c <vTaskStartScheduler+0xc8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082d8:	2301      	movs	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e001      	b.n	80082e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d102      	bne.n	80082ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082e8:	f000 fe1e 	bl	8008f28 <xTimerCreateTimerTask>
 80082ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11b      	bne.n	800832c <vTaskStartScheduler+0x98>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	613b      	str	r3, [r7, #16]
}
 8008306:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <vTaskStartScheduler+0xcc>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3354      	adds	r3, #84	; 0x54
 800830e:	4a15      	ldr	r2, [pc, #84]	; (8008364 <vTaskStartScheduler+0xd0>)
 8008310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008312:	4b15      	ldr	r3, [pc, #84]	; (8008368 <vTaskStartScheduler+0xd4>)
 8008314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <vTaskStartScheduler+0xd8>)
 800831c:	2201      	movs	r2, #1
 800831e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008320:	4b13      	ldr	r3, [pc, #76]	; (8008370 <vTaskStartScheduler+0xdc>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008326:	f001 f98f 	bl	8009648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800832a:	e00e      	b.n	800834a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008332:	d10a      	bne.n	800834a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60fb      	str	r3, [r7, #12]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <vTaskStartScheduler+0xb4>
}
 800834a:	bf00      	nop
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	0800a810 	.word	0x0800a810
 8008358:	0800899d 	.word	0x0800899d
 800835c:	20002d74 	.word	0x20002d74
 8008360:	2000287c 	.word	0x2000287c
 8008364:	20000014 	.word	0x20000014
 8008368:	20002d70 	.word	0x20002d70
 800836c:	20002d5c 	.word	0x20002d5c
 8008370:	20002d54 	.word	0x20002d54

08008374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <vTaskSuspendAll+0x18>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	4a03      	ldr	r2, [pc, #12]	; (800838c <vTaskSuspendAll+0x18>)
 8008380:	6013      	str	r3, [r2, #0]
}
 8008382:	bf00      	nop
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20002d78 	.word	0x20002d78

08008390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800839e:	4b42      	ldr	r3, [pc, #264]	; (80084a8 <xTaskResumeAll+0x118>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <xTaskResumeAll+0x2c>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	603b      	str	r3, [r7, #0]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083bc:	f001 f9b6 	bl	800972c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083c0:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <xTaskResumeAll+0x118>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4a38      	ldr	r2, [pc, #224]	; (80084a8 <xTaskResumeAll+0x118>)
 80083c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ca:	4b37      	ldr	r3, [pc, #220]	; (80084a8 <xTaskResumeAll+0x118>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d162      	bne.n	8008498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083d2:	4b36      	ldr	r3, [pc, #216]	; (80084ac <xTaskResumeAll+0x11c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d05e      	beq.n	8008498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083da:	e02f      	b.n	800843c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80083dc:	4b34      	ldr	r3, [pc, #208]	; (80084b0 <xTaskResumeAll+0x120>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3318      	adds	r3, #24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fcad 	bl	8006d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fca8 	bl	8006d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fc:	4b2d      	ldr	r3, [pc, #180]	; (80084b4 <xTaskResumeAll+0x124>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d903      	bls.n	800840c <xTaskResumeAll+0x7c>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <xTaskResumeAll+0x124>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <xTaskResumeAll+0x128>)
 800841a:	441a      	add	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe fc35 	bl	8006c92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842c:	4b23      	ldr	r3, [pc, #140]	; (80084bc <xTaskResumeAll+0x12c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <xTaskResumeAll+0x130>)
 8008438:	2201      	movs	r2, #1
 800843a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <xTaskResumeAll+0x120>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1cb      	bne.n	80083dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800844a:	f000 fb61 	bl	8008b10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800844e:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <xTaskResumeAll+0x134>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800845a:	f000 f845 	bl	80084e8 <xTaskIncrementTick>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008464:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <xTaskResumeAll+0x130>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3b01      	subs	r3, #1
 800846e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f1      	bne.n	800845a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <xTaskResumeAll+0x134>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <xTaskResumeAll+0x130>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xTaskResumeAll+0x138>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008498:	f001 f978 	bl	800978c <vPortExitCritical>

	return xAlreadyYielded;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20002d78 	.word	0x20002d78
 80084ac:	20002d50 	.word	0x20002d50
 80084b0:	20002d10 	.word	0x20002d10
 80084b4:	20002d58 	.word	0x20002d58
 80084b8:	20002880 	.word	0x20002880
 80084bc:	2000287c 	.word	0x2000287c
 80084c0:	20002d64 	.word	0x20002d64
 80084c4:	20002d60 	.word	0x20002d60
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <xTaskGetTickCount+0x18>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084d8:	687b      	ldr	r3, [r7, #4]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	20002d54 	.word	0x20002d54

080084e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f2:	4b51      	ldr	r3, [pc, #324]	; (8008638 <xTaskIncrementTick+0x150>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f040 808e 	bne.w	8008618 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084fc:	4b4f      	ldr	r3, [pc, #316]	; (800863c <xTaskIncrementTick+0x154>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008504:	4a4d      	ldr	r2, [pc, #308]	; (800863c <xTaskIncrementTick+0x154>)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d120      	bne.n	8008552 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008510:	4b4b      	ldr	r3, [pc, #300]	; (8008640 <xTaskIncrementTick+0x158>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <xTaskIncrementTick+0x48>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	603b      	str	r3, [r7, #0]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <xTaskIncrementTick+0x46>
 8008530:	4b43      	ldr	r3, [pc, #268]	; (8008640 <xTaskIncrementTick+0x158>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	4b43      	ldr	r3, [pc, #268]	; (8008644 <xTaskIncrementTick+0x15c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a41      	ldr	r2, [pc, #260]	; (8008640 <xTaskIncrementTick+0x158>)
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	4a41      	ldr	r2, [pc, #260]	; (8008644 <xTaskIncrementTick+0x15c>)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	4b40      	ldr	r3, [pc, #256]	; (8008648 <xTaskIncrementTick+0x160>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	4a3f      	ldr	r2, [pc, #252]	; (8008648 <xTaskIncrementTick+0x160>)
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	f000 fadf 	bl	8008b10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008552:	4b3e      	ldr	r3, [pc, #248]	; (800864c <xTaskIncrementTick+0x164>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	429a      	cmp	r2, r3
 800855a:	d34e      	bcc.n	80085fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800855c:	4b38      	ldr	r3, [pc, #224]	; (8008640 <xTaskIncrementTick+0x158>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <xTaskIncrementTick+0x82>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xTaskIncrementTick+0x84>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008570:	4b36      	ldr	r3, [pc, #216]	; (800864c <xTaskIncrementTick+0x164>)
 8008572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008576:	601a      	str	r2, [r3, #0]
					break;
 8008578:	e03f      	b.n	80085fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800857a:	4b31      	ldr	r3, [pc, #196]	; (8008640 <xTaskIncrementTick+0x158>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	429a      	cmp	r2, r3
 8008590:	d203      	bcs.n	800859a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008592:	4a2e      	ldr	r2, [pc, #184]	; (800864c <xTaskIncrementTick+0x164>)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6013      	str	r3, [r2, #0]
						break;
 8008598:	e02f      	b.n	80085fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3304      	adds	r3, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fbd2 	bl	8006d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	3318      	adds	r3, #24
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe fbc9 	bl	8006d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ba:	4b25      	ldr	r3, [pc, #148]	; (8008650 <xTaskIncrementTick+0x168>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d903      	bls.n	80085ca <xTaskIncrementTick+0xe2>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	4a22      	ldr	r2, [pc, #136]	; (8008650 <xTaskIncrementTick+0x168>)
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4a1f      	ldr	r2, [pc, #124]	; (8008654 <xTaskIncrementTick+0x16c>)
 80085d8:	441a      	add	r2, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fe fb56 	bl	8006c92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <xTaskIncrementTick+0x170>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3b3      	bcc.n	800855c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f8:	e7b0      	b.n	800855c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <xTaskIncrementTick+0x170>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4914      	ldr	r1, [pc, #80]	; (8008654 <xTaskIncrementTick+0x16c>)
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d907      	bls.n	8008622 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
 8008616:	e004      	b.n	8008622 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <xTaskIncrementTick+0x174>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	4a0f      	ldr	r2, [pc, #60]	; (800865c <xTaskIncrementTick+0x174>)
 8008620:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008622:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <xTaskIncrementTick+0x178>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800862a:	2301      	movs	r3, #1
 800862c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800862e:	697b      	ldr	r3, [r7, #20]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20002d78 	.word	0x20002d78
 800863c:	20002d54 	.word	0x20002d54
 8008640:	20002d08 	.word	0x20002d08
 8008644:	20002d0c 	.word	0x20002d0c
 8008648:	20002d68 	.word	0x20002d68
 800864c:	20002d70 	.word	0x20002d70
 8008650:	20002d58 	.word	0x20002d58
 8008654:	20002880 	.word	0x20002880
 8008658:	2000287c 	.word	0x2000287c
 800865c:	20002d60 	.word	0x20002d60
 8008660:	20002d64 	.word	0x20002d64

08008664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800866a:	4b2a      	ldr	r3, [pc, #168]	; (8008714 <vTaskSwitchContext+0xb0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008672:	4b29      	ldr	r3, [pc, #164]	; (8008718 <vTaskSwitchContext+0xb4>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008678:	e046      	b.n	8008708 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800867a:	4b27      	ldr	r3, [pc, #156]	; (8008718 <vTaskSwitchContext+0xb4>)
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008680:	4b26      	ldr	r3, [pc, #152]	; (800871c <vTaskSwitchContext+0xb8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e010      	b.n	80086aa <vTaskSwitchContext+0x46>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	607b      	str	r3, [r7, #4]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <vTaskSwitchContext+0x3e>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	491d      	ldr	r1, [pc, #116]	; (8008720 <vTaskSwitchContext+0xbc>)
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0e4      	beq.n	8008688 <vTaskSwitchContext+0x24>
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a15      	ldr	r2, [pc, #84]	; (8008720 <vTaskSwitchContext+0xbc>)
 80086ca:	4413      	add	r3, r2
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	605a      	str	r2, [r3, #4]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3308      	adds	r3, #8
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d104      	bne.n	80086ee <vTaskSwitchContext+0x8a>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	605a      	str	r2, [r3, #4]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	4a0b      	ldr	r2, [pc, #44]	; (8008724 <vTaskSwitchContext+0xc0>)
 80086f6:	6013      	str	r3, [r2, #0]
 80086f8:	4a08      	ldr	r2, [pc, #32]	; (800871c <vTaskSwitchContext+0xb8>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086fe:	4b09      	ldr	r3, [pc, #36]	; (8008724 <vTaskSwitchContext+0xc0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3354      	adds	r3, #84	; 0x54
 8008704:	4a08      	ldr	r2, [pc, #32]	; (8008728 <vTaskSwitchContext+0xc4>)
 8008706:	6013      	str	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20002d78 	.word	0x20002d78
 8008718:	20002d64 	.word	0x20002d64
 800871c:	20002d58 	.word	0x20002d58
 8008720:	20002880 	.word	0x20002880
 8008724:	2000287c 	.word	0x2000287c
 8008728:	20000014 	.word	0x20000014

0800872c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	60fb      	str	r3, [r7, #12]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <vTaskPlaceOnEventList+0x44>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3318      	adds	r3, #24
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7fe fabc 	bl	8006cd8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008760:	2101      	movs	r1, #1
 8008762:	6838      	ldr	r0, [r7, #0]
 8008764:	f000 fb8c 	bl	8008e80 <prvAddCurrentTaskToDelayedList>
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	2000287c 	.word	0x2000287c

08008774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10a      	bne.n	800879c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	617b      	str	r3, [r7, #20]
}
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3318      	adds	r3, #24
 80087a2:	4619      	mov	r1, r3
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7fe fa74 	bl	8006c92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	68b8      	ldr	r0, [r7, #8]
 80087ba:	f000 fb61 	bl	8008e80 <prvAddCurrentTaskToDelayedList>
	}
 80087be:	bf00      	nop
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	2000287c 	.word	0x2000287c

080087cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60fb      	str	r3, [r7, #12]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe faa3 	bl	8006d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008802:	4b1e      	ldr	r3, [pc, #120]	; (800887c <xTaskRemoveFromEventList+0xb0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d11d      	bne.n	8008846 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	3304      	adds	r3, #4
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fa9a 	bl	8006d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008818:	4b19      	ldr	r3, [pc, #100]	; (8008880 <xTaskRemoveFromEventList+0xb4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d903      	bls.n	8008828 <xTaskRemoveFromEventList+0x5c>
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <xTaskRemoveFromEventList+0xb4>)
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4a13      	ldr	r2, [pc, #76]	; (8008884 <xTaskRemoveFromEventList+0xb8>)
 8008836:	441a      	add	r2, r3
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	3304      	adds	r3, #4
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f7fe fa27 	bl	8006c92 <vListInsertEnd>
 8008844:	e005      	b.n	8008852 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	3318      	adds	r3, #24
 800884a:	4619      	mov	r1, r3
 800884c:	480e      	ldr	r0, [pc, #56]	; (8008888 <xTaskRemoveFromEventList+0xbc>)
 800884e:	f7fe fa20 	bl	8006c92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008856:	4b0d      	ldr	r3, [pc, #52]	; (800888c <xTaskRemoveFromEventList+0xc0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	429a      	cmp	r2, r3
 800885e:	d905      	bls.n	800886c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <xTaskRemoveFromEventList+0xc4>)
 8008866:	2201      	movs	r2, #1
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	e001      	b.n	8008870 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008870:	697b      	ldr	r3, [r7, #20]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20002d78 	.word	0x20002d78
 8008880:	20002d58 	.word	0x20002d58
 8008884:	20002880 	.word	0x20002880
 8008888:	20002d10 	.word	0x20002d10
 800888c:	2000287c 	.word	0x2000287c
 8008890:	20002d64 	.word	0x20002d64

08008894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <vTaskInternalSetTimeOutState+0x24>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <vTaskInternalSetTimeOutState+0x28>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	605a      	str	r2, [r3, #4]
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20002d68 	.word	0x20002d68
 80088bc:	20002d54 	.word	0x20002d54

080088c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	60fb      	str	r3, [r7, #12]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008902:	f000 ff13 	bl	800972c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008906:	4b1d      	ldr	r3, [pc, #116]	; (800897c <xTaskCheckForTimeOut+0xbc>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800891e:	d102      	bne.n	8008926 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	e023      	b.n	800896e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	4b15      	ldr	r3, [pc, #84]	; (8008980 <xTaskCheckForTimeOut+0xc0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d007      	beq.n	8008942 <xTaskCheckForTimeOut+0x82>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	429a      	cmp	r2, r3
 800893a:	d302      	bcc.n	8008942 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e015      	b.n	800896e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	429a      	cmp	r2, r3
 800894a:	d20b      	bcs.n	8008964 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	1ad2      	subs	r2, r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff ff9b 	bl	8008894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	e004      	b.n	800896e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800896a:	2301      	movs	r3, #1
 800896c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800896e:	f000 ff0d 	bl	800978c <vPortExitCritical>

	return xReturn;
 8008972:	69fb      	ldr	r3, [r7, #28]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20002d54 	.word	0x20002d54
 8008980:	20002d68 	.word	0x20002d68

08008984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008988:	4b03      	ldr	r3, [pc, #12]	; (8008998 <vTaskMissedYield+0x14>)
 800898a:	2201      	movs	r2, #1
 800898c:	601a      	str	r2, [r3, #0]
}
 800898e:	bf00      	nop
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20002d64 	.word	0x20002d64

0800899c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089a4:	f000 f852 	bl	8008a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <prvIdleTask+0x28>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d9f9      	bls.n	80089a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <prvIdleTask+0x2c>)
 80089b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089c0:	e7f0      	b.n	80089a4 <prvIdleTask+0x8>
 80089c2:	bf00      	nop
 80089c4:	20002880 	.word	0x20002880
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
 80089d6:	e00c      	b.n	80089f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a12      	ldr	r2, [pc, #72]	; (8008a2c <prvInitialiseTaskLists+0x60>)
 80089e4:	4413      	add	r3, r2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe f928 	bl	8006c3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3301      	adds	r3, #1
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b37      	cmp	r3, #55	; 0x37
 80089f6:	d9ef      	bls.n	80089d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089f8:	480d      	ldr	r0, [pc, #52]	; (8008a30 <prvInitialiseTaskLists+0x64>)
 80089fa:	f7fe f91f 	bl	8006c3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089fe:	480d      	ldr	r0, [pc, #52]	; (8008a34 <prvInitialiseTaskLists+0x68>)
 8008a00:	f7fe f91c 	bl	8006c3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a04:	480c      	ldr	r0, [pc, #48]	; (8008a38 <prvInitialiseTaskLists+0x6c>)
 8008a06:	f7fe f919 	bl	8006c3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a0a:	480c      	ldr	r0, [pc, #48]	; (8008a3c <prvInitialiseTaskLists+0x70>)
 8008a0c:	f7fe f916 	bl	8006c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a10:	480b      	ldr	r0, [pc, #44]	; (8008a40 <prvInitialiseTaskLists+0x74>)
 8008a12:	f7fe f913 	bl	8006c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a16:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <prvInitialiseTaskLists+0x78>)
 8008a18:	4a05      	ldr	r2, [pc, #20]	; (8008a30 <prvInitialiseTaskLists+0x64>)
 8008a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <prvInitialiseTaskLists+0x7c>)
 8008a1e:	4a05      	ldr	r2, [pc, #20]	; (8008a34 <prvInitialiseTaskLists+0x68>)
 8008a20:	601a      	str	r2, [r3, #0]
}
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20002880 	.word	0x20002880
 8008a30:	20002ce0 	.word	0x20002ce0
 8008a34:	20002cf4 	.word	0x20002cf4
 8008a38:	20002d10 	.word	0x20002d10
 8008a3c:	20002d24 	.word	0x20002d24
 8008a40:	20002d3c 	.word	0x20002d3c
 8008a44:	20002d08 	.word	0x20002d08
 8008a48:	20002d0c 	.word	0x20002d0c

08008a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a52:	e019      	b.n	8008a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a54:	f000 fe6a 	bl	800972c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008a58:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <prvCheckTasksWaitingTermination+0x50>)
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe f96f 	bl	8006d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <prvCheckTasksWaitingTermination+0x54>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	4a0b      	ldr	r2, [pc, #44]	; (8008aa0 <prvCheckTasksWaitingTermination+0x54>)
 8008a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a74:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <prvCheckTasksWaitingTermination+0x58>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	4a0a      	ldr	r2, [pc, #40]	; (8008aa4 <prvCheckTasksWaitingTermination+0x58>)
 8008a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a7e:	f000 fe85 	bl	800978c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f810 	bl	8008aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <prvCheckTasksWaitingTermination+0x58>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e1      	bne.n	8008a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20002d24 	.word	0x20002d24
 8008aa0:	20002d50 	.word	0x20002d50
 8008aa4:	20002d38 	.word	0x20002d38

08008aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3354      	adds	r3, #84	; 0x54
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 f9f5 	bl	8009ea4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fff3 	bl	8009ab4 <vPortFree>
				vPortFree( pxTCB );
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fff0 	bl	8009ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ad4:	e018      	b.n	8008b08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d103      	bne.n	8008ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 ffe7 	bl	8009ab4 <vPortFree>
	}
 8008ae6:	e00f      	b.n	8008b08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d00a      	beq.n	8008b08 <prvDeleteTCB+0x60>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60fb      	str	r3, [r7, #12]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <prvDeleteTCB+0x5e>
	}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b16:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <prvResetNextTaskUnblockTime+0x40>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <prvResetNextTaskUnblockTime+0x14>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <prvResetNextTaskUnblockTime+0x16>
 8008b24:	2300      	movs	r3, #0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d004      	beq.n	8008b34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <prvResetNextTaskUnblockTime+0x44>)
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b32:	e008      	b.n	8008b46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b34:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <prvResetNextTaskUnblockTime+0x40>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <prvResetNextTaskUnblockTime+0x44>)
 8008b44:	6013      	str	r3, [r2, #0]
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr
 8008b50:	20002d08 	.word	0x20002d08
 8008b54:	20002d70 	.word	0x20002d70

08008b58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <xTaskGetSchedulerState+0x34>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b66:	2301      	movs	r3, #1
 8008b68:	607b      	str	r3, [r7, #4]
 8008b6a:	e008      	b.n	8008b7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b6c:	4b08      	ldr	r3, [pc, #32]	; (8008b90 <xTaskGetSchedulerState+0x38>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b74:	2302      	movs	r3, #2
 8008b76:	607b      	str	r3, [r7, #4]
 8008b78:	e001      	b.n	8008b7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b7e:	687b      	ldr	r3, [r7, #4]
	}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20002d5c 	.word	0x20002d5c
 8008b90:	20002d78 	.word	0x20002d78

08008b94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d056      	beq.n	8008c58 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <xTaskPriorityInherit+0xd0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d246      	bcs.n	8008c46 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	db06      	blt.n	8008bce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <xTaskPriorityInherit+0xd0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6959      	ldr	r1, [r3, #20]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4a22      	ldr	r2, [pc, #136]	; (8008c68 <xTaskPriorityInherit+0xd4>)
 8008be0:	4413      	add	r3, r2
 8008be2:	4299      	cmp	r1, r3
 8008be4:	d101      	bne.n	8008bea <xTaskPriorityInherit+0x56>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <xTaskPriorityInherit+0x58>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d022      	beq.n	8008c36 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe f8a7 	bl	8006d48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <xTaskPriorityInherit+0xd0>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <xTaskPriorityInherit+0xd8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d903      	bls.n	8008c18 <xTaskPriorityInherit+0x84>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a15      	ldr	r2, [pc, #84]	; (8008c6c <xTaskPriorityInherit+0xd8>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <xTaskPriorityInherit+0xd4>)
 8008c26:	441a      	add	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fe f82f 	bl	8006c92 <vListInsertEnd>
 8008c34:	e004      	b.n	8008c40 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <xTaskPriorityInherit+0xd0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e008      	b.n	8008c58 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c4a:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <xTaskPriorityInherit+0xd0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d201      	bcs.n	8008c58 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c54:	2301      	movs	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c58:	68fb      	ldr	r3, [r7, #12]
	}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	2000287c 	.word	0x2000287c
 8008c68:	20002880 	.word	0x20002880
 8008c6c:	20002d58 	.word	0x20002d58

08008c70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d056      	beq.n	8008d34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c86:	4b2e      	ldr	r3, [pc, #184]	; (8008d40 <xTaskPriorityDisinherit+0xd0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d00a      	beq.n	8008ca6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60fb      	str	r3, [r7, #12]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	1e5a      	subs	r2, r3, #1
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d02c      	beq.n	8008d34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d128      	bne.n	8008d34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe f82e 	bl	8006d48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <xTaskPriorityDisinherit+0xd4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d903      	bls.n	8008d14 <xTaskPriorityDisinherit+0xa4>
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a0c      	ldr	r2, [pc, #48]	; (8008d44 <xTaskPriorityDisinherit+0xd4>)
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4a09      	ldr	r2, [pc, #36]	; (8008d48 <xTaskPriorityDisinherit+0xd8>)
 8008d22:	441a      	add	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7fd ffb1 	bl	8006c92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d34:	697b      	ldr	r3, [r7, #20]
	}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000287c 	.word	0x2000287c
 8008d44:	20002d58 	.word	0x20002d58
 8008d48:	20002880 	.word	0x20002880

08008d4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d06f      	beq.n	8008e44 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	60fb      	str	r3, [r7, #12]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d902      	bls.n	8008d92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	e002      	b.n	8008d98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d050      	beq.n	8008e44 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d14b      	bne.n	8008e44 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dac:	4b27      	ldr	r3, [pc, #156]	; (8008e4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d10a      	bne.n	8008dcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60bb      	str	r3, [r7, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db04      	blt.n	8008dea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	6959      	ldr	r1, [r3, #20]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4a15      	ldr	r2, [pc, #84]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008dfa:	4413      	add	r3, r2
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	d101      	bne.n	8008e04 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008e04:	2300      	movs	r3, #0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01c      	beq.n	8008e44 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fd ff9a 	bl	8006d48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e18:	4b0e      	ldr	r3, [pc, #56]	; (8008e54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d903      	bls.n	8008e28 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4a06      	ldr	r2, [pc, #24]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e36:	441a      	add	r2, r3
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7fd ff27 	bl	8006c92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e44:	bf00      	nop
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	2000287c 	.word	0x2000287c
 8008e50:	20002880 	.word	0x20002880
 8008e54:	20002d58 	.word	0x20002d58

08008e58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e64:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e6a:	3201      	adds	r2, #1
 8008e6c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e6e:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008e70:	681b      	ldr	r3, [r3, #0]
	}
 8008e72:	4618      	mov	r0, r3
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	2000287c 	.word	0x2000287c

08008e80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e8a:	4b21      	ldr	r3, [pc, #132]	; (8008f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e90:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fd ff56 	bl	8006d48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ea2:	d10a      	bne.n	8008eba <prvAddCurrentTaskToDelayedList+0x3a>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eaa:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4819      	ldr	r0, [pc, #100]	; (8008f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8008eb4:	f7fd feed 	bl	8006c92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eb8:	e026      	b.n	8008f08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ec2:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d209      	bcs.n	8008ee6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed2:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fd fefa 	bl	8006cd8 <vListInsert>
}
 8008ee4:	e010      	b.n	8008f08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fd fef0 	bl	8006cd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d202      	bcs.n	8008f08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f02:	4a08      	ldr	r2, [pc, #32]	; (8008f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	6013      	str	r3, [r2, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20002d54 	.word	0x20002d54
 8008f14:	2000287c 	.word	0x2000287c
 8008f18:	20002d3c 	.word	0x20002d3c
 8008f1c:	20002d0c 	.word	0x20002d0c
 8008f20:	20002d08 	.word	0x20002d08
 8008f24:	20002d70 	.word	0x20002d70

08008f28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08a      	sub	sp, #40	; 0x28
 8008f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f32:	f000 facb 	bl	80094cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f36:	4b1c      	ldr	r3, [pc, #112]	; (8008fa8 <xTimerCreateTimerTask+0x80>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d021      	beq.n	8008f82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f46:	1d3a      	adds	r2, r7, #4
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	f107 030c 	add.w	r3, r7, #12
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fd fe59 	bl	8006c08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	9202      	str	r2, [sp, #8]
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	2302      	movs	r3, #2
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	2300      	movs	r3, #0
 8008f66:	460a      	mov	r2, r1
 8008f68:	4910      	ldr	r1, [pc, #64]	; (8008fac <xTimerCreateTimerTask+0x84>)
 8008f6a:	4811      	ldr	r0, [pc, #68]	; (8008fb0 <xTimerCreateTimerTask+0x88>)
 8008f6c:	f7fe fea0 	bl	8007cb0 <xTaskCreateStatic>
 8008f70:	4603      	mov	r3, r0
 8008f72:	4a10      	ldr	r2, [pc, #64]	; (8008fb4 <xTimerCreateTimerTask+0x8c>)
 8008f74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f76:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <xTimerCreateTimerTask+0x8c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	613b      	str	r3, [r7, #16]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f9e:	697b      	ldr	r3, [r7, #20]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20002dac 	.word	0x20002dac
 8008fac:	0800a818 	.word	0x0800a818
 8008fb0:	080090d5 	.word	0x080090d5
 8008fb4:	20002db0 	.word	0x20002db0

08008fb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	623b      	str	r3, [r7, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fe6:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <xTimerGenericCommand+0x98>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d02a      	beq.n	8009044 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b05      	cmp	r3, #5
 8008ffe:	dc18      	bgt.n	8009032 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009000:	f7ff fdaa 	bl	8008b58 <xTaskGetSchedulerState>
 8009004:	4603      	mov	r3, r0
 8009006:	2b02      	cmp	r3, #2
 8009008:	d109      	bne.n	800901e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800900a:	4b11      	ldr	r3, [pc, #68]	; (8009050 <xTimerGenericCommand+0x98>)
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	f107 0110 	add.w	r1, r7, #16
 8009012:	2300      	movs	r3, #0
 8009014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009016:	f7fe f86b 	bl	80070f0 <xQueueGenericSend>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24
 800901c:	e012      	b.n	8009044 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800901e:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <xTimerGenericCommand+0x98>)
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f107 0110 	add.w	r1, r7, #16
 8009026:	2300      	movs	r3, #0
 8009028:	2200      	movs	r2, #0
 800902a:	f7fe f861 	bl	80070f0 <xQueueGenericSend>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24
 8009030:	e008      	b.n	8009044 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009032:	4b07      	ldr	r3, [pc, #28]	; (8009050 <xTimerGenericCommand+0x98>)
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f107 0110 	add.w	r1, r7, #16
 800903a:	2300      	movs	r3, #0
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	f7fe f955 	bl	80072ec <xQueueGenericSendFromISR>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009046:	4618      	mov	r0, r3
 8009048:	3728      	adds	r7, #40	; 0x28
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20002dac 	.word	0x20002dac

08009054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af02      	add	r7, sp, #8
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800905e:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <prvProcessExpiredTimer+0x7c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	3304      	adds	r3, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f7fd fe6b 	bl	8006d48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d122      	bne.n	80090c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	699a      	ldr	r2, [r3, #24]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	18d1      	adds	r1, r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f000 f8c8 	bl	800921c <prvInsertTimerInActiveList>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d016      	beq.n	80090c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009092:	2300      	movs	r3, #0
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	2100      	movs	r1, #0
 800909c:	6978      	ldr	r0, [r7, #20]
 800909e:	f7ff ff8b 	bl	8008fb8 <xTimerGenericCommand>
 80090a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	60fb      	str	r3, [r7, #12]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	6978      	ldr	r0, [r7, #20]
 80090c6:	4798      	blx	r3
}
 80090c8:	bf00      	nop
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20002da4 	.word	0x20002da4

080090d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090dc:	f107 0308 	add.w	r3, r7, #8
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 f857 	bl	8009194 <prvGetNextExpireTime>
 80090e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4619      	mov	r1, r3
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f803 	bl	80090f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090f2:	f000 f8d5 	bl	80092a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090f6:	e7f1      	b.n	80090dc <prvTimerTask+0x8>

080090f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009102:	f7ff f937 	bl	8008374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f866 	bl	80091dc <prvSampleTimeNow>
 8009110:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d130      	bne.n	800917a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <prvProcessTimerOrBlockTask+0x3c>
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	429a      	cmp	r2, r3
 8009124:	d806      	bhi.n	8009134 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009126:	f7ff f933 	bl	8008390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff ff91 	bl	8009054 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009132:	e024      	b.n	800917e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800913a:	4b13      	ldr	r3, [pc, #76]	; (8009188 <prvProcessTimerOrBlockTask+0x90>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	bf0c      	ite	eq
 8009144:	2301      	moveq	r3, #1
 8009146:	2300      	movne	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800914c:	4b0f      	ldr	r3, [pc, #60]	; (800918c <prvProcessTimerOrBlockTask+0x94>)
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	f7fe fd75 	bl	8007c48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800915e:	f7ff f917 	bl	8008390 <xTaskResumeAll>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <prvProcessTimerOrBlockTask+0x98>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
}
 8009178:	e001      	b.n	800917e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800917a:	f7ff f909 	bl	8008390 <xTaskResumeAll>
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20002da8 	.word	0x20002da8
 800918c:	20002dac 	.word	0x20002dac
 8009190:	e000ed04 	.word	0xe000ed04

08009194 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <prvGetNextExpireTime+0x44>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2300      	movne	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <prvGetNextExpireTime+0x44>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e001      	b.n	80091ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091ca:	68fb      	ldr	r3, [r7, #12]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20002da4 	.word	0x20002da4

080091dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091e4:	f7ff f972 	bl	80084cc <xTaskGetTickCount>
 80091e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091ea:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <prvSampleTimeNow+0x3c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d205      	bcs.n	8009200 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091f4:	f000 f908 	bl	8009408 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e002      	b.n	8009206 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009206:	4a04      	ldr	r2, [pc, #16]	; (8009218 <prvSampleTimeNow+0x3c>)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800920c:	68fb      	ldr	r3, [r7, #12]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20002db4 	.word	0x20002db4

0800921c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d812      	bhi.n	8009268 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	429a      	cmp	r2, r3
 800924e:	d302      	bcc.n	8009256 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e01b      	b.n	800928e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009256:	4b10      	ldr	r3, [pc, #64]	; (8009298 <prvInsertTimerInActiveList+0x7c>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3304      	adds	r3, #4
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f7fd fd39 	bl	8006cd8 <vListInsert>
 8009266:	e012      	b.n	800928e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d206      	bcs.n	800927e <prvInsertTimerInActiveList+0x62>
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d302      	bcc.n	800927e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009278:	2301      	movs	r3, #1
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	e007      	b.n	800928e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <prvInsertTimerInActiveList+0x80>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7fd fd25 	bl	8006cd8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800928e:	697b      	ldr	r3, [r7, #20]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20002da8 	.word	0x20002da8
 800929c:	20002da4 	.word	0x20002da4

080092a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	; 0x38
 80092a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092a6:	e09d      	b.n	80093e4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	da18      	bge.n	80092e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ae:	1d3b      	adds	r3, r7, #4
 80092b0:	3304      	adds	r3, #4
 80092b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	61fb      	str	r3, [r7, #28]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d6:	6850      	ldr	r0, [r2, #4]
 80092d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092da:	6892      	ldr	r2, [r2, #8]
 80092dc:	4611      	mov	r1, r2
 80092de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	db7d      	blt.n	80093e2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fd fd26 	bl	8006d48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092fc:	463b      	mov	r3, r7
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ff6c 	bl	80091dc <prvSampleTimeNow>
 8009304:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b09      	cmp	r3, #9
 800930a:	d86b      	bhi.n	80093e4 <prvProcessReceivedCommands+0x144>
 800930c:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <prvProcessReceivedCommands+0x74>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	0800933d 	.word	0x0800933d
 8009318:	0800933d 	.word	0x0800933d
 800931c:	0800933d 	.word	0x0800933d
 8009320:	080093e5 	.word	0x080093e5
 8009324:	08009399 	.word	0x08009399
 8009328:	080093d1 	.word	0x080093d1
 800932c:	0800933d 	.word	0x0800933d
 8009330:	0800933d 	.word	0x0800933d
 8009334:	080093e5 	.word	0x080093e5
 8009338:	08009399 	.word	0x08009399
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	18d1      	adds	r1, r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934a:	f7ff ff67 	bl	800921c <prvInsertTimerInActiveList>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d047      	beq.n	80093e4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d13f      	bne.n	80093e4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	441a      	add	r2, r3
 800936c:	2300      	movs	r3, #0
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	2100      	movs	r1, #0
 8009374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009376:	f7ff fe1f 	bl	8008fb8 <xTimerGenericCommand>
 800937a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d130      	bne.n	80093e4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	61bb      	str	r3, [r7, #24]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	617b      	str	r3, [r7, #20]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	18d1      	adds	r1, r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ca:	f7ff ff27 	bl	800921c <prvInsertTimerInActiveList>
					break;
 80093ce:	e009      	b.n	80093e4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d104      	bne.n	80093e4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80093da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093dc:	f000 fb6a 	bl	8009ab4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093e0:	e000      	b.n	80093e4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80093e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <prvProcessReceivedCommands+0x164>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	1d39      	adds	r1, r7, #4
 80093ea:	2200      	movs	r2, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe f8a3 	bl	8007538 <xQueueReceive>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f47f af57 	bne.w	80092a8 <prvProcessReceivedCommands+0x8>
	}
}
 80093fa:	bf00      	nop
 80093fc:	bf00      	nop
 80093fe:	3730      	adds	r7, #48	; 0x30
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20002dac 	.word	0x20002dac

08009408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800940e:	e045      	b.n	800949c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009410:	4b2c      	ldr	r3, [pc, #176]	; (80094c4 <prvSwitchTimerLists+0xbc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800941a:	4b2a      	ldr	r3, [pc, #168]	; (80094c4 <prvSwitchTimerLists+0xbc>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3304      	adds	r3, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f7fd fc8d 	bl	8006d48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d12e      	bne.n	800949c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	4413      	add	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	429a      	cmp	r2, r3
 800944e:	d90e      	bls.n	800946e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800945c:	4b19      	ldr	r3, [pc, #100]	; (80094c4 <prvSwitchTimerLists+0xbc>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3304      	adds	r3, #4
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fd fc36 	bl	8006cd8 <vListInsert>
 800946c:	e016      	b.n	800949c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800946e:	2300      	movs	r3, #0
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	2300      	movs	r3, #0
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff fd9d 	bl	8008fb8 <xTimerGenericCommand>
 800947e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <prvSwitchTimerLists+0x94>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	603b      	str	r3, [r7, #0]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800949c:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <prvSwitchTimerLists+0xbc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1b4      	bne.n	8009410 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <prvSwitchTimerLists+0xbc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <prvSwitchTimerLists+0xc0>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a04      	ldr	r2, [pc, #16]	; (80094c4 <prvSwitchTimerLists+0xbc>)
 80094b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094b4:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <prvSwitchTimerLists+0xc0>)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6013      	str	r3, [r2, #0]
}
 80094ba:	bf00      	nop
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20002da4 	.word	0x20002da4
 80094c8:	20002da8 	.word	0x20002da8

080094cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094d2:	f000 f92b 	bl	800972c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094d6:	4b15      	ldr	r3, [pc, #84]	; (800952c <prvCheckForValidListAndQueue+0x60>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d120      	bne.n	8009520 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094de:	4814      	ldr	r0, [pc, #80]	; (8009530 <prvCheckForValidListAndQueue+0x64>)
 80094e0:	f7fd fbac 	bl	8006c3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094e4:	4813      	ldr	r0, [pc, #76]	; (8009534 <prvCheckForValidListAndQueue+0x68>)
 80094e6:	f7fd fba9 	bl	8006c3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <prvCheckForValidListAndQueue+0x6c>)
 80094ec:	4a10      	ldr	r2, [pc, #64]	; (8009530 <prvCheckForValidListAndQueue+0x64>)
 80094ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094f0:	4b12      	ldr	r3, [pc, #72]	; (800953c <prvCheckForValidListAndQueue+0x70>)
 80094f2:	4a10      	ldr	r2, [pc, #64]	; (8009534 <prvCheckForValidListAndQueue+0x68>)
 80094f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094f6:	2300      	movs	r3, #0
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	4b11      	ldr	r3, [pc, #68]	; (8009540 <prvCheckForValidListAndQueue+0x74>)
 80094fc:	4a11      	ldr	r2, [pc, #68]	; (8009544 <prvCheckForValidListAndQueue+0x78>)
 80094fe:	2110      	movs	r1, #16
 8009500:	200a      	movs	r0, #10
 8009502:	f7fd fcb3 	bl	8006e6c <xQueueGenericCreateStatic>
 8009506:	4603      	mov	r3, r0
 8009508:	4a08      	ldr	r2, [pc, #32]	; (800952c <prvCheckForValidListAndQueue+0x60>)
 800950a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <prvCheckForValidListAndQueue+0x60>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d005      	beq.n	8009520 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009514:	4b05      	ldr	r3, [pc, #20]	; (800952c <prvCheckForValidListAndQueue+0x60>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	490b      	ldr	r1, [pc, #44]	; (8009548 <prvCheckForValidListAndQueue+0x7c>)
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fb42 	bl	8007ba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009520:	f000 f934 	bl	800978c <vPortExitCritical>
}
 8009524:	bf00      	nop
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20002dac 	.word	0x20002dac
 8009530:	20002d7c 	.word	0x20002d7c
 8009534:	20002d90 	.word	0x20002d90
 8009538:	20002da4 	.word	0x20002da4
 800953c:	20002da8 	.word	0x20002da8
 8009540:	20002e58 	.word	0x20002e58
 8009544:	20002db8 	.word	0x20002db8
 8009548:	0800a820 	.word	0x0800a820

0800954c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3b04      	subs	r3, #4
 800955c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3b04      	subs	r3, #4
 800956a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f023 0201 	bic.w	r2, r3, #1
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b04      	subs	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800957c:	4a08      	ldr	r2, [pc, #32]	; (80095a0 <pxPortInitialiseStack+0x54>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3b14      	subs	r3, #20
 8009586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3b20      	subs	r3, #32
 8009592:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	bc80      	pop	{r7}
 800959e:	4770      	bx	lr
 80095a0:	080095a5 	.word	0x080095a5

080095a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <prvTaskExitError+0x54>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b6:	d00a      	beq.n	80095ce <prvTaskExitError+0x2a>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	60fb      	str	r3, [r7, #12]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <prvTaskExitError+0x28>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60bb      	str	r3, [r7, #8]
}
 80095e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095e2:	bf00      	nop
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0fc      	beq.n	80095e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095ea:	bf00      	nop
 80095ec:	bf00      	nop
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bc80      	pop	{r7}
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20000010 	.word	0x20000010
 80095fc:	00000000 	.word	0x00000000

08009600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <pxCurrentTCBConst2>)
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800960a:	f380 8809 	msr	PSP, r0
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	f04e 0e0d 	orr.w	lr, lr, #13
 800961e:	4770      	bx	lr

08009620 <pxCurrentTCBConst2>:
 8009620:	2000287c 	.word	0x2000287c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009628:	4806      	ldr	r0, [pc, #24]	; (8009644 <prvPortStartFirstTask+0x1c>)
 800962a:	6800      	ldr	r0, [r0, #0]
 800962c:	6800      	ldr	r0, [r0, #0]
 800962e:	f380 8808 	msr	MSP, r0
 8009632:	b662      	cpsie	i
 8009634:	b661      	cpsie	f
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	df00      	svc	0
 8009640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009642:	bf00      	nop
 8009644:	e000ed08 	.word	0xe000ed08

08009648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800964e:	4b32      	ldr	r3, [pc, #200]	; (8009718 <xPortStartScheduler+0xd0>)
 8009650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	22ff      	movs	r2, #255	; 0xff
 800965e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009670:	b2da      	uxtb	r2, r3
 8009672:	4b2a      	ldr	r3, [pc, #168]	; (800971c <xPortStartScheduler+0xd4>)
 8009674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009676:	4b2a      	ldr	r3, [pc, #168]	; (8009720 <xPortStartScheduler+0xd8>)
 8009678:	2207      	movs	r2, #7
 800967a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800967c:	e009      	b.n	8009692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800967e:	4b28      	ldr	r3, [pc, #160]	; (8009720 <xPortStartScheduler+0xd8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3b01      	subs	r3, #1
 8009684:	4a26      	ldr	r2, [pc, #152]	; (8009720 <xPortStartScheduler+0xd8>)
 8009686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	b2db      	uxtb	r3, r3
 8009690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b80      	cmp	r3, #128	; 0x80
 800969c:	d0ef      	beq.n	800967e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800969e:	4b20      	ldr	r3, [pc, #128]	; (8009720 <xPortStartScheduler+0xd8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f1c3 0307 	rsb	r3, r3, #7
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d00a      	beq.n	80096c0 <xPortStartScheduler+0x78>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	60bb      	str	r3, [r7, #8]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096c0:	4b17      	ldr	r3, [pc, #92]	; (8009720 <xPortStartScheduler+0xd8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	4a16      	ldr	r2, [pc, #88]	; (8009720 <xPortStartScheduler+0xd8>)
 80096c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096ca:	4b15      	ldr	r3, [pc, #84]	; (8009720 <xPortStartScheduler+0xd8>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096d2:	4a13      	ldr	r2, [pc, #76]	; (8009720 <xPortStartScheduler+0xd8>)
 80096d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096de:	4b11      	ldr	r3, [pc, #68]	; (8009724 <xPortStartScheduler+0xdc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <xPortStartScheduler+0xdc>)
 80096e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096ea:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <xPortStartScheduler+0xdc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a0d      	ldr	r2, [pc, #52]	; (8009724 <xPortStartScheduler+0xdc>)
 80096f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096f6:	f000 f8b9 	bl	800986c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096fa:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <xPortStartScheduler+0xe0>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009700:	f7ff ff92 	bl	8009628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009704:	f7fe ffae 	bl	8008664 <vTaskSwitchContext>
	prvTaskExitError();
 8009708:	f7ff ff4c 	bl	80095a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	e000e400 	.word	0xe000e400
 800971c:	20002ea8 	.word	0x20002ea8
 8009720:	20002eac 	.word	0x20002eac
 8009724:	e000ed20 	.word	0xe000ed20
 8009728:	20000010 	.word	0x20000010

0800972c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	607b      	str	r3, [r7, #4]
}
 8009744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009746:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <vPortEnterCritical+0x58>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3301      	adds	r3, #1
 800974c:	4a0d      	ldr	r2, [pc, #52]	; (8009784 <vPortEnterCritical+0x58>)
 800974e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009750:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <vPortEnterCritical+0x58>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d10f      	bne.n	8009778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009758:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <vPortEnterCritical+0x5c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <vPortEnterCritical+0x4c>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	603b      	str	r3, [r7, #0]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <vPortEnterCritical+0x4a>
	}
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	bc80      	pop	{r7}
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000010 	.word	0x20000010
 8009788:	e000ed04 	.word	0xe000ed04

0800978c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009792:	4b11      	ldr	r3, [pc, #68]	; (80097d8 <vPortExitCritical+0x4c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <vPortExitCritical+0x24>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	607b      	str	r3, [r7, #4]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097b0:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <vPortExitCritical+0x4c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	4a08      	ldr	r2, [pc, #32]	; (80097d8 <vPortExitCritical+0x4c>)
 80097b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <vPortExitCritical+0x4c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d105      	bne.n	80097ce <vPortExitCritical+0x42>
 80097c2:	2300      	movs	r3, #0
 80097c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	f383 8811 	msr	BASEPRI, r3
}
 80097cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bc80      	pop	{r7}
 80097d6:	4770      	bx	lr
 80097d8:	20000010 	.word	0x20000010
 80097dc:	00000000 	.word	0x00000000

080097e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097e0:	f3ef 8009 	mrs	r0, PSP
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <pxCurrentTCBConst>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097f0:	6010      	str	r0, [r2, #0]
 80097f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80097f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097fa:	f380 8811 	msr	BASEPRI, r0
 80097fe:	f7fe ff31 	bl	8008664 <vTaskSwitchContext>
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8811 	msr	BASEPRI, r0
 800980a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800980e:	6819      	ldr	r1, [r3, #0]
 8009810:	6808      	ldr	r0, [r1, #0]
 8009812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009816:	f380 8809 	msr	PSP, r0
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	4770      	bx	lr

08009820 <pxCurrentTCBConst>:
 8009820:	2000287c 	.word	0x2000287c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop

08009828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
}
 8009840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009842:	f7fe fe51 	bl	80084e8 <xTaskIncrementTick>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <SysTick_Handler+0x40>)
 800984e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	2300      	movs	r3, #0
 8009856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f383 8811 	msr	BASEPRI, r3
}
 800985e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <vPortSetupTimerInterrupt+0x30>)
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009876:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <vPortSetupTimerInterrupt+0x34>)
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <vPortSetupTimerInterrupt+0x38>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a09      	ldr	r2, [pc, #36]	; (80098a8 <vPortSetupTimerInterrupt+0x3c>)
 8009882:	fba2 2303 	umull	r2, r3, r2, r3
 8009886:	099b      	lsrs	r3, r3, #6
 8009888:	4a08      	ldr	r2, [pc, #32]	; (80098ac <vPortSetupTimerInterrupt+0x40>)
 800988a:	3b01      	subs	r3, #1
 800988c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800988e:	4b03      	ldr	r3, [pc, #12]	; (800989c <vPortSetupTimerInterrupt+0x30>)
 8009890:	2207      	movs	r2, #7
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr
 800989c:	e000e010 	.word	0xe000e010
 80098a0:	e000e018 	.word	0xe000e018
 80098a4:	20000004 	.word	0x20000004
 80098a8:	10624dd3 	.word	0x10624dd3
 80098ac:	e000e014 	.word	0xe000e014

080098b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098b6:	f3ef 8305 	mrs	r3, IPSR
 80098ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b0f      	cmp	r3, #15
 80098c0:	d914      	bls.n	80098ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098c2:	4a16      	ldr	r2, [pc, #88]	; (800991c <vPortValidateInterruptPriority+0x6c>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098cc:	4b14      	ldr	r3, [pc, #80]	; (8009920 <vPortValidateInterruptPriority+0x70>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	7afa      	ldrb	r2, [r7, #11]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d20a      	bcs.n	80098ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	607b      	str	r3, [r7, #4]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <vPortValidateInterruptPriority+0x74>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098f4:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <vPortValidateInterruptPriority+0x78>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d90a      	bls.n	8009912 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	603b      	str	r3, [r7, #0]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortValidateInterruptPriority+0x60>
	}
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	bc80      	pop	{r7}
 800991a:	4770      	bx	lr
 800991c:	e000e3f0 	.word	0xe000e3f0
 8009920:	20002ea8 	.word	0x20002ea8
 8009924:	e000ed0c 	.word	0xe000ed0c
 8009928:	20002eac 	.word	0x20002eac

0800992c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009938:	f7fe fd1c 	bl	8008374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800993c:	4b58      	ldr	r3, [pc, #352]	; (8009aa0 <pvPortMalloc+0x174>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009944:	f000 f910 	bl	8009b68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009948:	4b56      	ldr	r3, [pc, #344]	; (8009aa4 <pvPortMalloc+0x178>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4013      	ands	r3, r2
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 808e 	bne.w	8009a72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01d      	beq.n	8009998 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800995c:	2208      	movs	r2, #8
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4413      	add	r3, r2
 8009962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d014      	beq.n	8009998 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f023 0307 	bic.w	r3, r3, #7
 8009974:	3308      	adds	r3, #8
 8009976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <pvPortMalloc+0x6c>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	617b      	str	r3, [r7, #20]
}
 8009994:	bf00      	nop
 8009996:	e7fe      	b.n	8009996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d069      	beq.n	8009a72 <pvPortMalloc+0x146>
 800999e:	4b42      	ldr	r3, [pc, #264]	; (8009aa8 <pvPortMalloc+0x17c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d864      	bhi.n	8009a72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099a8:	4b40      	ldr	r3, [pc, #256]	; (8009aac <pvPortMalloc+0x180>)
 80099aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099ac:	4b3f      	ldr	r3, [pc, #252]	; (8009aac <pvPortMalloc+0x180>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099b2:	e004      	b.n	80099be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d903      	bls.n	80099d0 <pvPortMalloc+0xa4>
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1f1      	bne.n	80099b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099d0:	4b33      	ldr	r3, [pc, #204]	; (8009aa0 <pvPortMalloc+0x174>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d04b      	beq.n	8009a72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2208      	movs	r2, #8
 80099e0:	4413      	add	r3, r2
 80099e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	1ad2      	subs	r2, r2, r3
 80099f4:	2308      	movs	r3, #8
 80099f6:	005b      	lsls	r3, r3, #1
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d91f      	bls.n	8009a3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4413      	add	r3, r2
 8009a02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <pvPortMalloc+0xf8>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	613b      	str	r3, [r7, #16]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	1ad2      	subs	r2, r2, r3
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a36:	69b8      	ldr	r0, [r7, #24]
 8009a38:	f000 f8f8 	bl	8009c2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a3c:	4b1a      	ldr	r3, [pc, #104]	; (8009aa8 <pvPortMalloc+0x17c>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <pvPortMalloc+0x17c>)
 8009a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a4a:	4b17      	ldr	r3, [pc, #92]	; (8009aa8 <pvPortMalloc+0x17c>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <pvPortMalloc+0x184>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d203      	bcs.n	8009a5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <pvPortMalloc+0x17c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a15      	ldr	r2, [pc, #84]	; (8009ab0 <pvPortMalloc+0x184>)
 8009a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <pvPortMalloc+0x178>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a72:	f7fe fc8d 	bl	8008390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <pvPortMalloc+0x16a>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	60fb      	str	r3, [r7, #12]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <pvPortMalloc+0x168>
	return pvReturn;
 8009a96:	69fb      	ldr	r3, [r7, #28]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3728      	adds	r7, #40	; 0x28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20003a70 	.word	0x20003a70
 8009aa4:	20003a7c 	.word	0x20003a7c
 8009aa8:	20003a74 	.word	0x20003a74
 8009aac:	20003a68 	.word	0x20003a68
 8009ab0:	20003a78 	.word	0x20003a78

08009ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d048      	beq.n	8009b58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ac6:	2308      	movs	r3, #8
 8009ac8:	425b      	negs	r3, r3
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	4b21      	ldr	r3, [pc, #132]	; (8009b60 <vPortFree+0xac>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4013      	ands	r3, r2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <vPortFree+0x44>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	60fb      	str	r3, [r7, #12]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00a      	beq.n	8009b16 <vPortFree+0x62>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60bb      	str	r3, [r7, #8]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	4b11      	ldr	r3, [pc, #68]	; (8009b60 <vPortFree+0xac>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d019      	beq.n	8009b58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d115      	bne.n	8009b58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <vPortFree+0xac>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	43db      	mvns	r3, r3
 8009b36:	401a      	ands	r2, r3
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b3c:	f7fe fc1a 	bl	8008374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <vPortFree+0xb0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4413      	add	r3, r2
 8009b4a:	4a06      	ldr	r2, [pc, #24]	; (8009b64 <vPortFree+0xb0>)
 8009b4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b4e:	6938      	ldr	r0, [r7, #16]
 8009b50:	f000 f86c 	bl	8009c2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b54:	f7fe fc1c 	bl	8008390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20003a7c 	.word	0x20003a7c
 8009b64:	20003a74 	.word	0x20003a74

08009b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009b72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b74:	4b27      	ldr	r3, [pc, #156]	; (8009c14 <prvHeapInit+0xac>)
 8009b76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00c      	beq.n	8009b9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3307      	adds	r3, #7
 8009b86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0307 	bic.w	r3, r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <prvHeapInit+0xac>)
 8009b98:	4413      	add	r3, r2
 8009b9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	; (8009c18 <prvHeapInit+0xb0>)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ba6:	4b1c      	ldr	r3, [pc, #112]	; (8009c18 <prvHeapInit+0xb0>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 0307 	bic.w	r3, r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <prvHeapInit+0xb4>)
 8009bc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bca:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <prvHeapInit+0xb4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <prvHeapInit+0xb4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	1ad2      	subs	r2, r2, r3
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <prvHeapInit+0xb4>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	4a0a      	ldr	r2, [pc, #40]	; (8009c20 <prvHeapInit+0xb8>)
 8009bf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <prvHeapInit+0xbc>)
 8009bfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c00:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <prvHeapInit+0xc0>)
 8009c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c06:	601a      	str	r2, [r3, #0]
}
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20002eb0 	.word	0x20002eb0
 8009c18:	20003a68 	.word	0x20003a68
 8009c1c:	20003a70 	.word	0x20003a70
 8009c20:	20003a78 	.word	0x20003a78
 8009c24:	20003a74 	.word	0x20003a74
 8009c28:	20003a7c 	.word	0x20003a7c

08009c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c34:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <prvInsertBlockIntoFreeList+0xa8>)
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	e002      	b.n	8009c40 <prvInsertBlockIntoFreeList+0x14>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d8f7      	bhi.n	8009c3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	4413      	add	r3, r2
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d108      	bne.n	8009c6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	441a      	add	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	441a      	add	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d118      	bne.n	8009cb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <prvInsertBlockIntoFreeList+0xac>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d00d      	beq.n	8009caa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	441a      	add	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	e008      	b.n	8009cbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <prvInsertBlockIntoFreeList+0xac>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	e003      	b.n	8009cbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d002      	beq.n	8009cca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr
 8009cd4:	20003a68 	.word	0x20003a68
 8009cd8:	20003a70 	.word	0x20003a70

08009cdc <__errno>:
 8009cdc:	4b01      	ldr	r3, [pc, #4]	; (8009ce4 <__errno+0x8>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000014 	.word	0x20000014

08009ce8 <__libc_init_array>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	2600      	movs	r6, #0
 8009cec:	4d0c      	ldr	r5, [pc, #48]	; (8009d20 <__libc_init_array+0x38>)
 8009cee:	4c0d      	ldr	r4, [pc, #52]	; (8009d24 <__libc_init_array+0x3c>)
 8009cf0:	1b64      	subs	r4, r4, r5
 8009cf2:	10a4      	asrs	r4, r4, #2
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	d109      	bne.n	8009d0c <__libc_init_array+0x24>
 8009cf8:	f000 fd16 	bl	800a728 <_init>
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	4d0a      	ldr	r5, [pc, #40]	; (8009d28 <__libc_init_array+0x40>)
 8009d00:	4c0a      	ldr	r4, [pc, #40]	; (8009d2c <__libc_init_array+0x44>)
 8009d02:	1b64      	subs	r4, r4, r5
 8009d04:	10a4      	asrs	r4, r4, #2
 8009d06:	42a6      	cmp	r6, r4
 8009d08:	d105      	bne.n	8009d16 <__libc_init_array+0x2e>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d10:	4798      	blx	r3
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7ee      	b.n	8009cf4 <__libc_init_array+0xc>
 8009d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1a:	4798      	blx	r3
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	e7f2      	b.n	8009d06 <__libc_init_array+0x1e>
 8009d20:	0800ad50 	.word	0x0800ad50
 8009d24:	0800ad50 	.word	0x0800ad50
 8009d28:	0800ad50 	.word	0x0800ad50
 8009d2c:	0800ad54 	.word	0x0800ad54

08009d30 <__retarget_lock_acquire_recursive>:
 8009d30:	4770      	bx	lr

08009d32 <__retarget_lock_release_recursive>:
 8009d32:	4770      	bx	lr

08009d34 <memcpy>:
 8009d34:	440a      	add	r2, r1
 8009d36:	4291      	cmp	r1, r2
 8009d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d3c:	d100      	bne.n	8009d40 <memcpy+0xc>
 8009d3e:	4770      	bx	lr
 8009d40:	b510      	push	{r4, lr}
 8009d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d46:	4291      	cmp	r1, r2
 8009d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d4c:	d1f9      	bne.n	8009d42 <memcpy+0xe>
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <memset>:
 8009d50:	4603      	mov	r3, r0
 8009d52:	4402      	add	r2, r0
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d100      	bne.n	8009d5a <memset+0xa>
 8009d58:	4770      	bx	lr
 8009d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5e:	e7f9      	b.n	8009d54 <memset+0x4>

08009d60 <sbrk_aligned>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4e0e      	ldr	r6, [pc, #56]	; (8009d9c <sbrk_aligned+0x3c>)
 8009d64:	460c      	mov	r4, r1
 8009d66:	6831      	ldr	r1, [r6, #0]
 8009d68:	4605      	mov	r5, r0
 8009d6a:	b911      	cbnz	r1, 8009d72 <sbrk_aligned+0x12>
 8009d6c:	f000 f8f6 	bl	8009f5c <_sbrk_r>
 8009d70:	6030      	str	r0, [r6, #0]
 8009d72:	4621      	mov	r1, r4
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f8f1 	bl	8009f5c <_sbrk_r>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d00a      	beq.n	8009d94 <sbrk_aligned+0x34>
 8009d7e:	1cc4      	adds	r4, r0, #3
 8009d80:	f024 0403 	bic.w	r4, r4, #3
 8009d84:	42a0      	cmp	r0, r4
 8009d86:	d007      	beq.n	8009d98 <sbrk_aligned+0x38>
 8009d88:	1a21      	subs	r1, r4, r0
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f000 f8e6 	bl	8009f5c <_sbrk_r>
 8009d90:	3001      	adds	r0, #1
 8009d92:	d101      	bne.n	8009d98 <sbrk_aligned+0x38>
 8009d94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d98:	4620      	mov	r0, r4
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}
 8009d9c:	20003a88 	.word	0x20003a88

08009da0 <_malloc_r>:
 8009da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da4:	1ccd      	adds	r5, r1, #3
 8009da6:	f025 0503 	bic.w	r5, r5, #3
 8009daa:	3508      	adds	r5, #8
 8009dac:	2d0c      	cmp	r5, #12
 8009dae:	bf38      	it	cc
 8009db0:	250c      	movcc	r5, #12
 8009db2:	2d00      	cmp	r5, #0
 8009db4:	4607      	mov	r7, r0
 8009db6:	db01      	blt.n	8009dbc <_malloc_r+0x1c>
 8009db8:	42a9      	cmp	r1, r5
 8009dba:	d905      	bls.n	8009dc8 <_malloc_r+0x28>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	603b      	str	r3, [r7, #0]
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	4e2e      	ldr	r6, [pc, #184]	; (8009e84 <_malloc_r+0xe4>)
 8009dca:	f000 f907 	bl	8009fdc <__malloc_lock>
 8009dce:	6833      	ldr	r3, [r6, #0]
 8009dd0:	461c      	mov	r4, r3
 8009dd2:	bb34      	cbnz	r4, 8009e22 <_malloc_r+0x82>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f7ff ffc2 	bl	8009d60 <sbrk_aligned>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	4604      	mov	r4, r0
 8009de0:	d14d      	bne.n	8009e7e <_malloc_r+0xde>
 8009de2:	6834      	ldr	r4, [r6, #0]
 8009de4:	4626      	mov	r6, r4
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	d140      	bne.n	8009e6c <_malloc_r+0xcc>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	4631      	mov	r1, r6
 8009dee:	4638      	mov	r0, r7
 8009df0:	eb04 0803 	add.w	r8, r4, r3
 8009df4:	f000 f8b2 	bl	8009f5c <_sbrk_r>
 8009df8:	4580      	cmp	r8, r0
 8009dfa:	d13a      	bne.n	8009e72 <_malloc_r+0xd2>
 8009dfc:	6821      	ldr	r1, [r4, #0]
 8009dfe:	3503      	adds	r5, #3
 8009e00:	1a6d      	subs	r5, r5, r1
 8009e02:	f025 0503 	bic.w	r5, r5, #3
 8009e06:	3508      	adds	r5, #8
 8009e08:	2d0c      	cmp	r5, #12
 8009e0a:	bf38      	it	cc
 8009e0c:	250c      	movcc	r5, #12
 8009e0e:	4638      	mov	r0, r7
 8009e10:	4629      	mov	r1, r5
 8009e12:	f7ff ffa5 	bl	8009d60 <sbrk_aligned>
 8009e16:	3001      	adds	r0, #1
 8009e18:	d02b      	beq.n	8009e72 <_malloc_r+0xd2>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	442b      	add	r3, r5
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	e00e      	b.n	8009e40 <_malloc_r+0xa0>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	1b52      	subs	r2, r2, r5
 8009e26:	d41e      	bmi.n	8009e66 <_malloc_r+0xc6>
 8009e28:	2a0b      	cmp	r2, #11
 8009e2a:	d916      	bls.n	8009e5a <_malloc_r+0xba>
 8009e2c:	1961      	adds	r1, r4, r5
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	6025      	str	r5, [r4, #0]
 8009e32:	bf18      	it	ne
 8009e34:	6059      	strne	r1, [r3, #4]
 8009e36:	6863      	ldr	r3, [r4, #4]
 8009e38:	bf08      	it	eq
 8009e3a:	6031      	streq	r1, [r6, #0]
 8009e3c:	5162      	str	r2, [r4, r5]
 8009e3e:	604b      	str	r3, [r1, #4]
 8009e40:	4638      	mov	r0, r7
 8009e42:	f104 060b 	add.w	r6, r4, #11
 8009e46:	f000 f8cf 	bl	8009fe8 <__malloc_unlock>
 8009e4a:	f026 0607 	bic.w	r6, r6, #7
 8009e4e:	1d23      	adds	r3, r4, #4
 8009e50:	1af2      	subs	r2, r6, r3
 8009e52:	d0b6      	beq.n	8009dc2 <_malloc_r+0x22>
 8009e54:	1b9b      	subs	r3, r3, r6
 8009e56:	50a3      	str	r3, [r4, r2]
 8009e58:	e7b3      	b.n	8009dc2 <_malloc_r+0x22>
 8009e5a:	6862      	ldr	r2, [r4, #4]
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	bf0c      	ite	eq
 8009e60:	6032      	streq	r2, [r6, #0]
 8009e62:	605a      	strne	r2, [r3, #4]
 8009e64:	e7ec      	b.n	8009e40 <_malloc_r+0xa0>
 8009e66:	4623      	mov	r3, r4
 8009e68:	6864      	ldr	r4, [r4, #4]
 8009e6a:	e7b2      	b.n	8009dd2 <_malloc_r+0x32>
 8009e6c:	4634      	mov	r4, r6
 8009e6e:	6876      	ldr	r6, [r6, #4]
 8009e70:	e7b9      	b.n	8009de6 <_malloc_r+0x46>
 8009e72:	230c      	movs	r3, #12
 8009e74:	4638      	mov	r0, r7
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	f000 f8b6 	bl	8009fe8 <__malloc_unlock>
 8009e7c:	e7a1      	b.n	8009dc2 <_malloc_r+0x22>
 8009e7e:	6025      	str	r5, [r4, #0]
 8009e80:	e7de      	b.n	8009e40 <_malloc_r+0xa0>
 8009e82:	bf00      	nop
 8009e84:	20003a84 	.word	0x20003a84

08009e88 <cleanup_glue>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	6809      	ldr	r1, [r1, #0]
 8009e8e:	4605      	mov	r5, r0
 8009e90:	b109      	cbz	r1, 8009e96 <cleanup_glue+0xe>
 8009e92:	f7ff fff9 	bl	8009e88 <cleanup_glue>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e9e:	f000 b8a9 	b.w	8009ff4 <_free_r>
	...

08009ea4 <_reclaim_reent>:
 8009ea4:	4b2c      	ldr	r3, [pc, #176]	; (8009f58 <_reclaim_reent+0xb4>)
 8009ea6:	b570      	push	{r4, r5, r6, lr}
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4283      	cmp	r3, r0
 8009eae:	d051      	beq.n	8009f54 <_reclaim_reent+0xb0>
 8009eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009eb2:	b143      	cbz	r3, 8009ec6 <_reclaim_reent+0x22>
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d14a      	bne.n	8009f50 <_reclaim_reent+0xac>
 8009eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	b111      	cbz	r1, 8009ec6 <_reclaim_reent+0x22>
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 f897 	bl	8009ff4 <_free_r>
 8009ec6:	6961      	ldr	r1, [r4, #20]
 8009ec8:	b111      	cbz	r1, 8009ed0 <_reclaim_reent+0x2c>
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 f892 	bl	8009ff4 <_free_r>
 8009ed0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ed2:	b111      	cbz	r1, 8009eda <_reclaim_reent+0x36>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 f88d 	bl	8009ff4 <_free_r>
 8009eda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009edc:	b111      	cbz	r1, 8009ee4 <_reclaim_reent+0x40>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f888 	bl	8009ff4 <_free_r>
 8009ee4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009ee6:	b111      	cbz	r1, 8009eee <_reclaim_reent+0x4a>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 f883 	bl	8009ff4 <_free_r>
 8009eee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009ef0:	b111      	cbz	r1, 8009ef8 <_reclaim_reent+0x54>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f87e 	bl	8009ff4 <_free_r>
 8009ef8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009efa:	b111      	cbz	r1, 8009f02 <_reclaim_reent+0x5e>
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 f879 	bl	8009ff4 <_free_r>
 8009f02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f04:	b111      	cbz	r1, 8009f0c <_reclaim_reent+0x68>
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f874 	bl	8009ff4 <_free_r>
 8009f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f0e:	b111      	cbz	r1, 8009f16 <_reclaim_reent+0x72>
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f86f 	bl	8009ff4 <_free_r>
 8009f16:	69a3      	ldr	r3, [r4, #24]
 8009f18:	b1e3      	cbz	r3, 8009f54 <_reclaim_reent+0xb0>
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f1e:	4798      	blx	r3
 8009f20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f22:	b1b9      	cbz	r1, 8009f54 <_reclaim_reent+0xb0>
 8009f24:	4620      	mov	r0, r4
 8009f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f2a:	f7ff bfad 	b.w	8009e88 <cleanup_glue>
 8009f2e:	5949      	ldr	r1, [r1, r5]
 8009f30:	b941      	cbnz	r1, 8009f44 <_reclaim_reent+0xa0>
 8009f32:	3504      	adds	r5, #4
 8009f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f36:	2d80      	cmp	r5, #128	; 0x80
 8009f38:	68d9      	ldr	r1, [r3, #12]
 8009f3a:	d1f8      	bne.n	8009f2e <_reclaim_reent+0x8a>
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 f859 	bl	8009ff4 <_free_r>
 8009f42:	e7ba      	b.n	8009eba <_reclaim_reent+0x16>
 8009f44:	680e      	ldr	r6, [r1, #0]
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 f854 	bl	8009ff4 <_free_r>
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	e7ef      	b.n	8009f30 <_reclaim_reent+0x8c>
 8009f50:	2500      	movs	r5, #0
 8009f52:	e7ef      	b.n	8009f34 <_reclaim_reent+0x90>
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	bf00      	nop
 8009f58:	20000014 	.word	0x20000014

08009f5c <_sbrk_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4d05      	ldr	r5, [pc, #20]	; (8009f78 <_sbrk_r+0x1c>)
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7f8 fb68 	bl	800263c <_sbrk>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_sbrk_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_sbrk_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	20003a8c 	.word	0x20003a8c

08009f7c <siprintf>:
 8009f7c:	b40e      	push	{r1, r2, r3}
 8009f7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f82:	b500      	push	{lr}
 8009f84:	b09c      	sub	sp, #112	; 0x70
 8009f86:	ab1d      	add	r3, sp, #116	; 0x74
 8009f88:	9002      	str	r0, [sp, #8]
 8009f8a:	9006      	str	r0, [sp, #24]
 8009f8c:	9107      	str	r1, [sp, #28]
 8009f8e:	9104      	str	r1, [sp, #16]
 8009f90:	4808      	ldr	r0, [pc, #32]	; (8009fb4 <siprintf+0x38>)
 8009f92:	4909      	ldr	r1, [pc, #36]	; (8009fb8 <siprintf+0x3c>)
 8009f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	a902      	add	r1, sp, #8
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	f000 f8cc 	bl	800a13c <_svfiprintf_r>
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	9b02      	ldr	r3, [sp, #8]
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	b01c      	add	sp, #112	; 0x70
 8009fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb0:	b003      	add	sp, #12
 8009fb2:	4770      	bx	lr
 8009fb4:	20000014 	.word	0x20000014
 8009fb8:	ffff0208 	.word	0xffff0208

08009fbc <strcat>:
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	b510      	push	{r4, lr}
 8009fc0:	7814      	ldrb	r4, [r2, #0]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	3201      	adds	r2, #1
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	d1fa      	bne.n	8009fc0 <strcat+0x4>
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fd4:	2a00      	cmp	r2, #0
 8009fd6:	d1f9      	bne.n	8009fcc <strcat+0x10>
 8009fd8:	bd10      	pop	{r4, pc}
	...

08009fdc <__malloc_lock>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__malloc_lock+0x8>)
 8009fde:	f7ff bea7 	b.w	8009d30 <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	20003a80 	.word	0x20003a80

08009fe8 <__malloc_unlock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_unlock+0x8>)
 8009fea:	f7ff bea2 	b.w	8009d32 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20003a80 	.word	0x20003a80

08009ff4 <_free_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	d040      	beq.n	800a07e <_free_r+0x8a>
 8009ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a000:	1f0c      	subs	r4, r1, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfb8      	it	lt
 800a006:	18e4      	addlt	r4, r4, r3
 800a008:	f7ff ffe8 	bl	8009fdc <__malloc_lock>
 800a00c:	4a1c      	ldr	r2, [pc, #112]	; (800a080 <_free_r+0x8c>)
 800a00e:	6813      	ldr	r3, [r2, #0]
 800a010:	b933      	cbnz	r3, 800a020 <_free_r+0x2c>
 800a012:	6063      	str	r3, [r4, #4]
 800a014:	6014      	str	r4, [r2, #0]
 800a016:	4628      	mov	r0, r5
 800a018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01c:	f7ff bfe4 	b.w	8009fe8 <__malloc_unlock>
 800a020:	42a3      	cmp	r3, r4
 800a022:	d908      	bls.n	800a036 <_free_r+0x42>
 800a024:	6820      	ldr	r0, [r4, #0]
 800a026:	1821      	adds	r1, r4, r0
 800a028:	428b      	cmp	r3, r1
 800a02a:	bf01      	itttt	eq
 800a02c:	6819      	ldreq	r1, [r3, #0]
 800a02e:	685b      	ldreq	r3, [r3, #4]
 800a030:	1809      	addeq	r1, r1, r0
 800a032:	6021      	streq	r1, [r4, #0]
 800a034:	e7ed      	b.n	800a012 <_free_r+0x1e>
 800a036:	461a      	mov	r2, r3
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	b10b      	cbz	r3, 800a040 <_free_r+0x4c>
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	d9fa      	bls.n	800a036 <_free_r+0x42>
 800a040:	6811      	ldr	r1, [r2, #0]
 800a042:	1850      	adds	r0, r2, r1
 800a044:	42a0      	cmp	r0, r4
 800a046:	d10b      	bne.n	800a060 <_free_r+0x6c>
 800a048:	6820      	ldr	r0, [r4, #0]
 800a04a:	4401      	add	r1, r0
 800a04c:	1850      	adds	r0, r2, r1
 800a04e:	4283      	cmp	r3, r0
 800a050:	6011      	str	r1, [r2, #0]
 800a052:	d1e0      	bne.n	800a016 <_free_r+0x22>
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	4401      	add	r1, r0
 800a05a:	6011      	str	r1, [r2, #0]
 800a05c:	6053      	str	r3, [r2, #4]
 800a05e:	e7da      	b.n	800a016 <_free_r+0x22>
 800a060:	d902      	bls.n	800a068 <_free_r+0x74>
 800a062:	230c      	movs	r3, #12
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	e7d6      	b.n	800a016 <_free_r+0x22>
 800a068:	6820      	ldr	r0, [r4, #0]
 800a06a:	1821      	adds	r1, r4, r0
 800a06c:	428b      	cmp	r3, r1
 800a06e:	bf01      	itttt	eq
 800a070:	6819      	ldreq	r1, [r3, #0]
 800a072:	685b      	ldreq	r3, [r3, #4]
 800a074:	1809      	addeq	r1, r1, r0
 800a076:	6021      	streq	r1, [r4, #0]
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	6054      	str	r4, [r2, #4]
 800a07c:	e7cb      	b.n	800a016 <_free_r+0x22>
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20003a84 	.word	0x20003a84

0800a084 <__ssputs_r>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	688e      	ldr	r6, [r1, #8]
 800a08a:	4682      	mov	sl, r0
 800a08c:	429e      	cmp	r6, r3
 800a08e:	460c      	mov	r4, r1
 800a090:	4690      	mov	r8, r2
 800a092:	461f      	mov	r7, r3
 800a094:	d838      	bhi.n	800a108 <__ssputs_r+0x84>
 800a096:	898a      	ldrh	r2, [r1, #12]
 800a098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a09c:	d032      	beq.n	800a104 <__ssputs_r+0x80>
 800a09e:	6825      	ldr	r5, [r4, #0]
 800a0a0:	6909      	ldr	r1, [r1, #16]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	eba5 0901 	sub.w	r9, r5, r1
 800a0a8:	6965      	ldr	r5, [r4, #20]
 800a0aa:	444b      	add	r3, r9
 800a0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0b4:	106d      	asrs	r5, r5, #1
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	bf38      	it	cc
 800a0ba:	461d      	movcc	r5, r3
 800a0bc:	0553      	lsls	r3, r2, #21
 800a0be:	d531      	bpl.n	800a124 <__ssputs_r+0xa0>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7ff fe6d 	bl	8009da0 <_malloc_r>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	b950      	cbnz	r0, 800a0e0 <__ssputs_r+0x5c>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d0:	f8ca 3000 	str.w	r3, [sl]
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	464a      	mov	r2, r9
 800a0e2:	6921      	ldr	r1, [r4, #16]
 800a0e4:	f7ff fe26 	bl	8009d34 <memcpy>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	6126      	str	r6, [r4, #16]
 800a0f6:	444e      	add	r6, r9
 800a0f8:	6026      	str	r6, [r4, #0]
 800a0fa:	463e      	mov	r6, r7
 800a0fc:	6165      	str	r5, [r4, #20]
 800a0fe:	eba5 0509 	sub.w	r5, r5, r9
 800a102:	60a5      	str	r5, [r4, #8]
 800a104:	42be      	cmp	r6, r7
 800a106:	d900      	bls.n	800a10a <__ssputs_r+0x86>
 800a108:	463e      	mov	r6, r7
 800a10a:	4632      	mov	r2, r6
 800a10c:	4641      	mov	r1, r8
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	f000 fab8 	bl	800a684 <memmove>
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	2000      	movs	r0, #0
 800a118:	1b9b      	subs	r3, r3, r6
 800a11a:	60a3      	str	r3, [r4, #8]
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	4433      	add	r3, r6
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	e7db      	b.n	800a0dc <__ssputs_r+0x58>
 800a124:	462a      	mov	r2, r5
 800a126:	f000 fac7 	bl	800a6b8 <_realloc_r>
 800a12a:	4606      	mov	r6, r0
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d1e1      	bne.n	800a0f4 <__ssputs_r+0x70>
 800a130:	4650      	mov	r0, sl
 800a132:	6921      	ldr	r1, [r4, #16]
 800a134:	f7ff ff5e 	bl	8009ff4 <_free_r>
 800a138:	e7c7      	b.n	800a0ca <__ssputs_r+0x46>
	...

0800a13c <_svfiprintf_r>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	4698      	mov	r8, r3
 800a142:	898b      	ldrh	r3, [r1, #12]
 800a144:	4607      	mov	r7, r0
 800a146:	061b      	lsls	r3, r3, #24
 800a148:	460d      	mov	r5, r1
 800a14a:	4614      	mov	r4, r2
 800a14c:	b09d      	sub	sp, #116	; 0x74
 800a14e:	d50e      	bpl.n	800a16e <_svfiprintf_r+0x32>
 800a150:	690b      	ldr	r3, [r1, #16]
 800a152:	b963      	cbnz	r3, 800a16e <_svfiprintf_r+0x32>
 800a154:	2140      	movs	r1, #64	; 0x40
 800a156:	f7ff fe23 	bl	8009da0 <_malloc_r>
 800a15a:	6028      	str	r0, [r5, #0]
 800a15c:	6128      	str	r0, [r5, #16]
 800a15e:	b920      	cbnz	r0, 800a16a <_svfiprintf_r+0x2e>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a168:	e0d1      	b.n	800a30e <_svfiprintf_r+0x1d2>
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	616b      	str	r3, [r5, #20]
 800a16e:	2300      	movs	r3, #0
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	2320      	movs	r3, #32
 800a174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a178:	2330      	movs	r3, #48	; 0x30
 800a17a:	f04f 0901 	mov.w	r9, #1
 800a17e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a328 <_svfiprintf_r+0x1ec>
 800a186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a18a:	4623      	mov	r3, r4
 800a18c:	469a      	mov	sl, r3
 800a18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a192:	b10a      	cbz	r2, 800a198 <_svfiprintf_r+0x5c>
 800a194:	2a25      	cmp	r2, #37	; 0x25
 800a196:	d1f9      	bne.n	800a18c <_svfiprintf_r+0x50>
 800a198:	ebba 0b04 	subs.w	fp, sl, r4
 800a19c:	d00b      	beq.n	800a1b6 <_svfiprintf_r+0x7a>
 800a19e:	465b      	mov	r3, fp
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff ff6d 	bl	800a084 <__ssputs_r>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f000 80aa 	beq.w	800a304 <_svfiprintf_r+0x1c8>
 800a1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b2:	445a      	add	r2, fp
 800a1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80a2 	beq.w	800a304 <_svfiprintf_r+0x1c8>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ca:	f10a 0a01 	add.w	sl, sl, #1
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d8:	4654      	mov	r4, sl
 800a1da:	2205      	movs	r2, #5
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	4851      	ldr	r0, [pc, #324]	; (800a328 <_svfiprintf_r+0x1ec>)
 800a1e2:	f000 fa41 	bl	800a668 <memchr>
 800a1e6:	9a04      	ldr	r2, [sp, #16]
 800a1e8:	b9d8      	cbnz	r0, 800a222 <_svfiprintf_r+0xe6>
 800a1ea:	06d0      	lsls	r0, r2, #27
 800a1ec:	bf44      	itt	mi
 800a1ee:	2320      	movmi	r3, #32
 800a1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f4:	0711      	lsls	r1, r2, #28
 800a1f6:	bf44      	itt	mi
 800a1f8:	232b      	movmi	r3, #43	; 0x2b
 800a1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	d015      	beq.n	800a232 <_svfiprintf_r+0xf6>
 800a206:	4654      	mov	r4, sl
 800a208:	2000      	movs	r0, #0
 800a20a:	f04f 0c0a 	mov.w	ip, #10
 800a20e:	9a07      	ldr	r2, [sp, #28]
 800a210:	4621      	mov	r1, r4
 800a212:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a216:	3b30      	subs	r3, #48	; 0x30
 800a218:	2b09      	cmp	r3, #9
 800a21a:	d94e      	bls.n	800a2ba <_svfiprintf_r+0x17e>
 800a21c:	b1b0      	cbz	r0, 800a24c <_svfiprintf_r+0x110>
 800a21e:	9207      	str	r2, [sp, #28]
 800a220:	e014      	b.n	800a24c <_svfiprintf_r+0x110>
 800a222:	eba0 0308 	sub.w	r3, r0, r8
 800a226:	fa09 f303 	lsl.w	r3, r9, r3
 800a22a:	4313      	orrs	r3, r2
 800a22c:	46a2      	mov	sl, r4
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	e7d2      	b.n	800a1d8 <_svfiprintf_r+0x9c>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	1d19      	adds	r1, r3, #4
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	9103      	str	r1, [sp, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bfbb      	ittet	lt
 800a23e:	425b      	neglt	r3, r3
 800a240:	f042 0202 	orrlt.w	r2, r2, #2
 800a244:	9307      	strge	r3, [sp, #28]
 800a246:	9307      	strlt	r3, [sp, #28]
 800a248:	bfb8      	it	lt
 800a24a:	9204      	strlt	r2, [sp, #16]
 800a24c:	7823      	ldrb	r3, [r4, #0]
 800a24e:	2b2e      	cmp	r3, #46	; 0x2e
 800a250:	d10c      	bne.n	800a26c <_svfiprintf_r+0x130>
 800a252:	7863      	ldrb	r3, [r4, #1]
 800a254:	2b2a      	cmp	r3, #42	; 0x2a
 800a256:	d135      	bne.n	800a2c4 <_svfiprintf_r+0x188>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	3402      	adds	r4, #2
 800a25c:	1d1a      	adds	r2, r3, #4
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	9203      	str	r2, [sp, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	bfb8      	it	lt
 800a266:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a32c <_svfiprintf_r+0x1f0>
 800a270:	2203      	movs	r2, #3
 800a272:	4650      	mov	r0, sl
 800a274:	7821      	ldrb	r1, [r4, #0]
 800a276:	f000 f9f7 	bl	800a668 <memchr>
 800a27a:	b140      	cbz	r0, 800a28e <_svfiprintf_r+0x152>
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	eba0 000a 	sub.w	r0, r0, sl
 800a282:	fa03 f000 	lsl.w	r0, r3, r0
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	3401      	adds	r4, #1
 800a28a:	4303      	orrs	r3, r0
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a292:	2206      	movs	r2, #6
 800a294:	4826      	ldr	r0, [pc, #152]	; (800a330 <_svfiprintf_r+0x1f4>)
 800a296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a29a:	f000 f9e5 	bl	800a668 <memchr>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d038      	beq.n	800a314 <_svfiprintf_r+0x1d8>
 800a2a2:	4b24      	ldr	r3, [pc, #144]	; (800a334 <_svfiprintf_r+0x1f8>)
 800a2a4:	bb1b      	cbnz	r3, 800a2ee <_svfiprintf_r+0x1b2>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	3307      	adds	r3, #7
 800a2aa:	f023 0307 	bic.w	r3, r3, #7
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b4:	4433      	add	r3, r6
 800a2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b8:	e767      	b.n	800a18a <_svfiprintf_r+0x4e>
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2001      	movs	r0, #1
 800a2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c2:	e7a5      	b.n	800a210 <_svfiprintf_r+0xd4>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f04f 0c0a 	mov.w	ip, #10
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	9305      	str	r3, [sp, #20]
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d6:	3a30      	subs	r2, #48	; 0x30
 800a2d8:	2a09      	cmp	r2, #9
 800a2da:	d903      	bls.n	800a2e4 <_svfiprintf_r+0x1a8>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0c5      	beq.n	800a26c <_svfiprintf_r+0x130>
 800a2e0:	9105      	str	r1, [sp, #20]
 800a2e2:	e7c3      	b.n	800a26c <_svfiprintf_r+0x130>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ec:	e7f0      	b.n	800a2d0 <_svfiprintf_r+0x194>
 800a2ee:	ab03      	add	r3, sp, #12
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	4b10      	ldr	r3, [pc, #64]	; (800a338 <_svfiprintf_r+0x1fc>)
 800a2f8:	a904      	add	r1, sp, #16
 800a2fa:	f3af 8000 	nop.w
 800a2fe:	1c42      	adds	r2, r0, #1
 800a300:	4606      	mov	r6, r0
 800a302:	d1d6      	bne.n	800a2b2 <_svfiprintf_r+0x176>
 800a304:	89ab      	ldrh	r3, [r5, #12]
 800a306:	065b      	lsls	r3, r3, #25
 800a308:	f53f af2c 	bmi.w	800a164 <_svfiprintf_r+0x28>
 800a30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a30e:	b01d      	add	sp, #116	; 0x74
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a314:	ab03      	add	r3, sp, #12
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	462a      	mov	r2, r5
 800a31a:	4638      	mov	r0, r7
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <_svfiprintf_r+0x1fc>)
 800a31e:	a904      	add	r1, sp, #16
 800a320:	f000 f87c 	bl	800a41c <_printf_i>
 800a324:	e7eb      	b.n	800a2fe <_svfiprintf_r+0x1c2>
 800a326:	bf00      	nop
 800a328:	0800ad1c 	.word	0x0800ad1c
 800a32c:	0800ad22 	.word	0x0800ad22
 800a330:	0800ad26 	.word	0x0800ad26
 800a334:	00000000 	.word	0x00000000
 800a338:	0800a085 	.word	0x0800a085

0800a33c <_printf_common>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	4616      	mov	r6, r2
 800a342:	4699      	mov	r9, r3
 800a344:	688a      	ldr	r2, [r1, #8]
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	4607      	mov	r7, r0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bfb8      	it	lt
 800a34e:	4613      	movlt	r3, r2
 800a350:	6033      	str	r3, [r6, #0]
 800a352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a356:	460c      	mov	r4, r1
 800a358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a35c:	b10a      	cbz	r2, 800a362 <_printf_common+0x26>
 800a35e:	3301      	adds	r3, #1
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	0699      	lsls	r1, r3, #26
 800a366:	bf42      	ittt	mi
 800a368:	6833      	ldrmi	r3, [r6, #0]
 800a36a:	3302      	addmi	r3, #2
 800a36c:	6033      	strmi	r3, [r6, #0]
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	f015 0506 	ands.w	r5, r5, #6
 800a374:	d106      	bne.n	800a384 <_printf_common+0x48>
 800a376:	f104 0a19 	add.w	sl, r4, #25
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	6832      	ldr	r2, [r6, #0]
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc28      	bgt.n	800a3d6 <_printf_common+0x9a>
 800a384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a388:	1e13      	subs	r3, r2, #0
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	2301      	movne	r3, #1
 800a390:	0692      	lsls	r2, r2, #26
 800a392:	d42d      	bmi.n	800a3f0 <_printf_common+0xb4>
 800a394:	4649      	mov	r1, r9
 800a396:	4638      	mov	r0, r7
 800a398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a39c:	47c0      	blx	r8
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d020      	beq.n	800a3e4 <_printf_common+0xa8>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	68e5      	ldr	r5, [r4, #12]
 800a3a6:	f003 0306 	and.w	r3, r3, #6
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	bf18      	it	ne
 800a3ae:	2500      	movne	r5, #0
 800a3b0:	6832      	ldr	r2, [r6, #0]
 800a3b2:	f04f 0600 	mov.w	r6, #0
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	bf08      	it	eq
 800a3ba:	1aad      	subeq	r5, r5, r2
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	bf08      	it	eq
 800a3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfc4      	itt	gt
 800a3c8:	1a9b      	subgt	r3, r3, r2
 800a3ca:	18ed      	addgt	r5, r5, r3
 800a3cc:	341a      	adds	r4, #26
 800a3ce:	42b5      	cmp	r5, r6
 800a3d0:	d11a      	bne.n	800a408 <_printf_common+0xcc>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e008      	b.n	800a3e8 <_printf_common+0xac>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4652      	mov	r2, sl
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4638      	mov	r0, r7
 800a3de:	47c0      	blx	r8
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d103      	bne.n	800a3ec <_printf_common+0xb0>
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	e7c4      	b.n	800a37a <_printf_common+0x3e>
 800a3f0:	2030      	movs	r0, #48	; 0x30
 800a3f2:	18e1      	adds	r1, r4, r3
 800a3f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3fe:	4422      	add	r2, r4
 800a400:	3302      	adds	r3, #2
 800a402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a406:	e7c5      	b.n	800a394 <_printf_common+0x58>
 800a408:	2301      	movs	r3, #1
 800a40a:	4622      	mov	r2, r4
 800a40c:	4649      	mov	r1, r9
 800a40e:	4638      	mov	r0, r7
 800a410:	47c0      	blx	r8
 800a412:	3001      	adds	r0, #1
 800a414:	d0e6      	beq.n	800a3e4 <_printf_common+0xa8>
 800a416:	3601      	adds	r6, #1
 800a418:	e7d9      	b.n	800a3ce <_printf_common+0x92>
	...

0800a41c <_printf_i>:
 800a41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	7e0f      	ldrb	r7, [r1, #24]
 800a422:	4691      	mov	r9, r2
 800a424:	2f78      	cmp	r7, #120	; 0x78
 800a426:	4680      	mov	r8, r0
 800a428:	460c      	mov	r4, r1
 800a42a:	469a      	mov	sl, r3
 800a42c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a42e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a432:	d807      	bhi.n	800a444 <_printf_i+0x28>
 800a434:	2f62      	cmp	r7, #98	; 0x62
 800a436:	d80a      	bhi.n	800a44e <_printf_i+0x32>
 800a438:	2f00      	cmp	r7, #0
 800a43a:	f000 80d9 	beq.w	800a5f0 <_printf_i+0x1d4>
 800a43e:	2f58      	cmp	r7, #88	; 0x58
 800a440:	f000 80a4 	beq.w	800a58c <_printf_i+0x170>
 800a444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a44c:	e03a      	b.n	800a4c4 <_printf_i+0xa8>
 800a44e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a452:	2b15      	cmp	r3, #21
 800a454:	d8f6      	bhi.n	800a444 <_printf_i+0x28>
 800a456:	a101      	add	r1, pc, #4	; (adr r1, 800a45c <_printf_i+0x40>)
 800a458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4c9 	.word	0x0800a4c9
 800a464:	0800a445 	.word	0x0800a445
 800a468:	0800a445 	.word	0x0800a445
 800a46c:	0800a445 	.word	0x0800a445
 800a470:	0800a445 	.word	0x0800a445
 800a474:	0800a4c9 	.word	0x0800a4c9
 800a478:	0800a445 	.word	0x0800a445
 800a47c:	0800a445 	.word	0x0800a445
 800a480:	0800a445 	.word	0x0800a445
 800a484:	0800a445 	.word	0x0800a445
 800a488:	0800a5d7 	.word	0x0800a5d7
 800a48c:	0800a4f9 	.word	0x0800a4f9
 800a490:	0800a5b9 	.word	0x0800a5b9
 800a494:	0800a445 	.word	0x0800a445
 800a498:	0800a445 	.word	0x0800a445
 800a49c:	0800a5f9 	.word	0x0800a5f9
 800a4a0:	0800a445 	.word	0x0800a445
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a445 	.word	0x0800a445
 800a4ac:	0800a445 	.word	0x0800a445
 800a4b0:	0800a5c1 	.word	0x0800a5c1
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	602a      	str	r2, [r5, #0]
 800a4bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e0a4      	b.n	800a612 <_printf_i+0x1f6>
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	6829      	ldr	r1, [r5, #0]
 800a4cc:	0606      	lsls	r6, r0, #24
 800a4ce:	f101 0304 	add.w	r3, r1, #4
 800a4d2:	d50a      	bpl.n	800a4ea <_printf_i+0xce>
 800a4d4:	680e      	ldr	r6, [r1, #0]
 800a4d6:	602b      	str	r3, [r5, #0]
 800a4d8:	2e00      	cmp	r6, #0
 800a4da:	da03      	bge.n	800a4e4 <_printf_i+0xc8>
 800a4dc:	232d      	movs	r3, #45	; 0x2d
 800a4de:	4276      	negs	r6, r6
 800a4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e4:	230a      	movs	r3, #10
 800a4e6:	485e      	ldr	r0, [pc, #376]	; (800a660 <_printf_i+0x244>)
 800a4e8:	e019      	b.n	800a51e <_printf_i+0x102>
 800a4ea:	680e      	ldr	r6, [r1, #0]
 800a4ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	bf18      	it	ne
 800a4f4:	b236      	sxthne	r6, r6
 800a4f6:	e7ef      	b.n	800a4d8 <_printf_i+0xbc>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	6820      	ldr	r0, [r4, #0]
 800a4fc:	1d19      	adds	r1, r3, #4
 800a4fe:	6029      	str	r1, [r5, #0]
 800a500:	0601      	lsls	r1, r0, #24
 800a502:	d501      	bpl.n	800a508 <_printf_i+0xec>
 800a504:	681e      	ldr	r6, [r3, #0]
 800a506:	e002      	b.n	800a50e <_printf_i+0xf2>
 800a508:	0646      	lsls	r6, r0, #25
 800a50a:	d5fb      	bpl.n	800a504 <_printf_i+0xe8>
 800a50c:	881e      	ldrh	r6, [r3, #0]
 800a50e:	2f6f      	cmp	r7, #111	; 0x6f
 800a510:	bf0c      	ite	eq
 800a512:	2308      	moveq	r3, #8
 800a514:	230a      	movne	r3, #10
 800a516:	4852      	ldr	r0, [pc, #328]	; (800a660 <_printf_i+0x244>)
 800a518:	2100      	movs	r1, #0
 800a51a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a51e:	6865      	ldr	r5, [r4, #4]
 800a520:	2d00      	cmp	r5, #0
 800a522:	bfa8      	it	ge
 800a524:	6821      	ldrge	r1, [r4, #0]
 800a526:	60a5      	str	r5, [r4, #8]
 800a528:	bfa4      	itt	ge
 800a52a:	f021 0104 	bicge.w	r1, r1, #4
 800a52e:	6021      	strge	r1, [r4, #0]
 800a530:	b90e      	cbnz	r6, 800a536 <_printf_i+0x11a>
 800a532:	2d00      	cmp	r5, #0
 800a534:	d04d      	beq.n	800a5d2 <_printf_i+0x1b6>
 800a536:	4615      	mov	r5, r2
 800a538:	fbb6 f1f3 	udiv	r1, r6, r3
 800a53c:	fb03 6711 	mls	r7, r3, r1, r6
 800a540:	5dc7      	ldrb	r7, [r0, r7]
 800a542:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a546:	4637      	mov	r7, r6
 800a548:	42bb      	cmp	r3, r7
 800a54a:	460e      	mov	r6, r1
 800a54c:	d9f4      	bls.n	800a538 <_printf_i+0x11c>
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d10b      	bne.n	800a56a <_printf_i+0x14e>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	07de      	lsls	r6, r3, #31
 800a556:	d508      	bpl.n	800a56a <_printf_i+0x14e>
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	6861      	ldr	r1, [r4, #4]
 800a55c:	4299      	cmp	r1, r3
 800a55e:	bfde      	ittt	le
 800a560:	2330      	movle	r3, #48	; 0x30
 800a562:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a566:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a56a:	1b52      	subs	r2, r2, r5
 800a56c:	6122      	str	r2, [r4, #16]
 800a56e:	464b      	mov	r3, r9
 800a570:	4621      	mov	r1, r4
 800a572:	4640      	mov	r0, r8
 800a574:	f8cd a000 	str.w	sl, [sp]
 800a578:	aa03      	add	r2, sp, #12
 800a57a:	f7ff fedf 	bl	800a33c <_printf_common>
 800a57e:	3001      	adds	r0, #1
 800a580:	d14c      	bne.n	800a61c <_printf_i+0x200>
 800a582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a586:	b004      	add	sp, #16
 800a588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58c:	4834      	ldr	r0, [pc, #208]	; (800a660 <_printf_i+0x244>)
 800a58e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a592:	6829      	ldr	r1, [r5, #0]
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	f851 6b04 	ldr.w	r6, [r1], #4
 800a59a:	6029      	str	r1, [r5, #0]
 800a59c:	061d      	lsls	r5, r3, #24
 800a59e:	d514      	bpl.n	800a5ca <_printf_i+0x1ae>
 800a5a0:	07df      	lsls	r7, r3, #31
 800a5a2:	bf44      	itt	mi
 800a5a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5a8:	6023      	strmi	r3, [r4, #0]
 800a5aa:	b91e      	cbnz	r6, 800a5b4 <_printf_i+0x198>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	f023 0320 	bic.w	r3, r3, #32
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	e7af      	b.n	800a518 <_printf_i+0xfc>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	f043 0320 	orr.w	r3, r3, #32
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	2378      	movs	r3, #120	; 0x78
 800a5c2:	4828      	ldr	r0, [pc, #160]	; (800a664 <_printf_i+0x248>)
 800a5c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5c8:	e7e3      	b.n	800a592 <_printf_i+0x176>
 800a5ca:	0659      	lsls	r1, r3, #25
 800a5cc:	bf48      	it	mi
 800a5ce:	b2b6      	uxthmi	r6, r6
 800a5d0:	e7e6      	b.n	800a5a0 <_printf_i+0x184>
 800a5d2:	4615      	mov	r5, r2
 800a5d4:	e7bb      	b.n	800a54e <_printf_i+0x132>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	6826      	ldr	r6, [r4, #0]
 800a5da:	1d18      	adds	r0, r3, #4
 800a5dc:	6961      	ldr	r1, [r4, #20]
 800a5de:	6028      	str	r0, [r5, #0]
 800a5e0:	0635      	lsls	r5, r6, #24
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	d501      	bpl.n	800a5ea <_printf_i+0x1ce>
 800a5e6:	6019      	str	r1, [r3, #0]
 800a5e8:	e002      	b.n	800a5f0 <_printf_i+0x1d4>
 800a5ea:	0670      	lsls	r0, r6, #25
 800a5ec:	d5fb      	bpl.n	800a5e6 <_printf_i+0x1ca>
 800a5ee:	8019      	strh	r1, [r3, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4615      	mov	r5, r2
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	e7ba      	b.n	800a56e <_printf_i+0x152>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	1d1a      	adds	r2, r3, #4
 800a5fe:	602a      	str	r2, [r5, #0]
 800a600:	681d      	ldr	r5, [r3, #0]
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f82f 	bl	800a668 <memchr>
 800a60a:	b108      	cbz	r0, 800a610 <_printf_i+0x1f4>
 800a60c:	1b40      	subs	r0, r0, r5
 800a60e:	6060      	str	r0, [r4, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2300      	movs	r3, #0
 800a616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61a:	e7a8      	b.n	800a56e <_printf_i+0x152>
 800a61c:	462a      	mov	r2, r5
 800a61e:	4649      	mov	r1, r9
 800a620:	4640      	mov	r0, r8
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	47d0      	blx	sl
 800a626:	3001      	adds	r0, #1
 800a628:	d0ab      	beq.n	800a582 <_printf_i+0x166>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	079b      	lsls	r3, r3, #30
 800a62e:	d413      	bmi.n	800a658 <_printf_i+0x23c>
 800a630:	68e0      	ldr	r0, [r4, #12]
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	4298      	cmp	r0, r3
 800a636:	bfb8      	it	lt
 800a638:	4618      	movlt	r0, r3
 800a63a:	e7a4      	b.n	800a586 <_printf_i+0x16a>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4632      	mov	r2, r6
 800a640:	4649      	mov	r1, r9
 800a642:	4640      	mov	r0, r8
 800a644:	47d0      	blx	sl
 800a646:	3001      	adds	r0, #1
 800a648:	d09b      	beq.n	800a582 <_printf_i+0x166>
 800a64a:	3501      	adds	r5, #1
 800a64c:	68e3      	ldr	r3, [r4, #12]
 800a64e:	9903      	ldr	r1, [sp, #12]
 800a650:	1a5b      	subs	r3, r3, r1
 800a652:	42ab      	cmp	r3, r5
 800a654:	dcf2      	bgt.n	800a63c <_printf_i+0x220>
 800a656:	e7eb      	b.n	800a630 <_printf_i+0x214>
 800a658:	2500      	movs	r5, #0
 800a65a:	f104 0619 	add.w	r6, r4, #25
 800a65e:	e7f5      	b.n	800a64c <_printf_i+0x230>
 800a660:	0800ad2d 	.word	0x0800ad2d
 800a664:	0800ad3e 	.word	0x0800ad3e

0800a668 <memchr>:
 800a668:	4603      	mov	r3, r0
 800a66a:	b510      	push	{r4, lr}
 800a66c:	b2c9      	uxtb	r1, r1
 800a66e:	4402      	add	r2, r0
 800a670:	4293      	cmp	r3, r2
 800a672:	4618      	mov	r0, r3
 800a674:	d101      	bne.n	800a67a <memchr+0x12>
 800a676:	2000      	movs	r0, #0
 800a678:	e003      	b.n	800a682 <memchr+0x1a>
 800a67a:	7804      	ldrb	r4, [r0, #0]
 800a67c:	3301      	adds	r3, #1
 800a67e:	428c      	cmp	r4, r1
 800a680:	d1f6      	bne.n	800a670 <memchr+0x8>
 800a682:	bd10      	pop	{r4, pc}

0800a684 <memmove>:
 800a684:	4288      	cmp	r0, r1
 800a686:	b510      	push	{r4, lr}
 800a688:	eb01 0402 	add.w	r4, r1, r2
 800a68c:	d902      	bls.n	800a694 <memmove+0x10>
 800a68e:	4284      	cmp	r4, r0
 800a690:	4623      	mov	r3, r4
 800a692:	d807      	bhi.n	800a6a4 <memmove+0x20>
 800a694:	1e43      	subs	r3, r0, #1
 800a696:	42a1      	cmp	r1, r4
 800a698:	d008      	beq.n	800a6ac <memmove+0x28>
 800a69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6a2:	e7f8      	b.n	800a696 <memmove+0x12>
 800a6a4:	4601      	mov	r1, r0
 800a6a6:	4402      	add	r2, r0
 800a6a8:	428a      	cmp	r2, r1
 800a6aa:	d100      	bne.n	800a6ae <memmove+0x2a>
 800a6ac:	bd10      	pop	{r4, pc}
 800a6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6b6:	e7f7      	b.n	800a6a8 <memmove+0x24>

0800a6b8 <_realloc_r>:
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4614      	mov	r4, r2
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	b921      	cbnz	r1, 800a6ce <_realloc_r+0x16>
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ca:	f7ff bb69 	b.w	8009da0 <_malloc_r>
 800a6ce:	b92a      	cbnz	r2, 800a6dc <_realloc_r+0x24>
 800a6d0:	f7ff fc90 	bl	8009ff4 <_free_r>
 800a6d4:	4625      	mov	r5, r4
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6dc:	f000 f81b 	bl	800a716 <_malloc_usable_size_r>
 800a6e0:	4284      	cmp	r4, r0
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	d802      	bhi.n	800a6ec <_realloc_r+0x34>
 800a6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ea:	d812      	bhi.n	800a712 <_realloc_r+0x5a>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f7ff fb56 	bl	8009da0 <_malloc_r>
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d0ed      	beq.n	800a6d6 <_realloc_r+0x1e>
 800a6fa:	42bc      	cmp	r4, r7
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4631      	mov	r1, r6
 800a700:	bf28      	it	cs
 800a702:	463a      	movcs	r2, r7
 800a704:	f7ff fb16 	bl	8009d34 <memcpy>
 800a708:	4631      	mov	r1, r6
 800a70a:	4640      	mov	r0, r8
 800a70c:	f7ff fc72 	bl	8009ff4 <_free_r>
 800a710:	e7e1      	b.n	800a6d6 <_realloc_r+0x1e>
 800a712:	4635      	mov	r5, r6
 800a714:	e7df      	b.n	800a6d6 <_realloc_r+0x1e>

0800a716 <_malloc_usable_size_r>:
 800a716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71a:	1f18      	subs	r0, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfbc      	itt	lt
 800a720:	580b      	ldrlt	r3, [r1, r0]
 800a722:	18c0      	addlt	r0, r0, r3
 800a724:	4770      	bx	lr
	...

0800a728 <_init>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr

0800a734 <_fini>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr
